// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.4
// source: wandb_settings.proto

package service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListStringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *ListStringValue) Reset() {
	*x = ListStringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStringValue) ProtoMessage() {}

func (x *ListStringValue) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStringValue.ProtoReflect.Descriptor instead.
func (*ListStringValue) Descriptor() ([]byte, []int) {
	return file_wandb_settings_proto_rawDescGZIP(), []int{0}
}

func (x *ListStringValue) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type MapStringKeyStringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[string]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringKeyStringValue) Reset() {
	*x = MapStringKeyStringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringKeyStringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringKeyStringValue) ProtoMessage() {}

func (x *MapStringKeyStringValue) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringKeyStringValue.ProtoReflect.Descriptor instead.
func (*MapStringKeyStringValue) Descriptor() ([]byte, []int) {
	return file_wandb_settings_proto_rawDescGZIP(), []int{1}
}

func (x *MapStringKeyStringValue) GetValue() map[string]string {
	if x != nil {
		return x.Value
	}
	return nil
}

type MapStringKeyMapStringKeyStringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[string]*MapStringKeyStringValue `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringKeyMapStringKeyStringValue) Reset() {
	*x = MapStringKeyMapStringKeyStringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_settings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringKeyMapStringKeyStringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringKeyMapStringKeyStringValue) ProtoMessage() {}

func (x *MapStringKeyMapStringKeyStringValue) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_settings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringKeyMapStringKeyStringValue.ProtoReflect.Descriptor instead.
func (*MapStringKeyMapStringKeyStringValue) Descriptor() ([]byte, []int) {
	return file_wandb_settings_proto_rawDescGZIP(), []int{2}
}

func (x *MapStringKeyMapStringKeyStringValue) GetValue() map[string]*MapStringKeyStringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type OpenMetricsFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*OpenMetricsFilters_Sequence
	//	*OpenMetricsFilters_Mapping
	Value isOpenMetricsFilters_Value `protobuf_oneof:"value"`
}

func (x *OpenMetricsFilters) Reset() {
	*x = OpenMetricsFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_settings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenMetricsFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenMetricsFilters) ProtoMessage() {}

func (x *OpenMetricsFilters) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_settings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenMetricsFilters.ProtoReflect.Descriptor instead.
func (*OpenMetricsFilters) Descriptor() ([]byte, []int) {
	return file_wandb_settings_proto_rawDescGZIP(), []int{3}
}

func (m *OpenMetricsFilters) GetValue() isOpenMetricsFilters_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *OpenMetricsFilters) GetSequence() *ListStringValue {
	if x, ok := x.GetValue().(*OpenMetricsFilters_Sequence); ok {
		return x.Sequence
	}
	return nil
}

func (x *OpenMetricsFilters) GetMapping() *MapStringKeyMapStringKeyStringValue {
	if x, ok := x.GetValue().(*OpenMetricsFilters_Mapping); ok {
		return x.Mapping
	}
	return nil
}

type isOpenMetricsFilters_Value interface {
	isOpenMetricsFilters_Value()
}

type OpenMetricsFilters_Sequence struct {
	Sequence *ListStringValue `protobuf:"bytes,1,opt,name=sequence,proto3,oneof"`
}

type OpenMetricsFilters_Mapping struct {
	Mapping *MapStringKeyMapStringKeyStringValue `protobuf:"bytes,2,opt,name=mapping,proto3,oneof"`
}

func (*OpenMetricsFilters_Sequence) isOpenMetricsFilters_Value() {}

func (*OpenMetricsFilters_Mapping) isOpenMetricsFilters_Value() {}

type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XArgs                           *ListStringValue         `protobuf:"bytes,1,opt,name=_args,json=Args,proto3" json:"_args,omitempty"`
	XAwsLambda                      *wrapperspb.BoolValue    `protobuf:"bytes,2,opt,name=_aws_lambda,json=AwsLambda,proto3" json:"_aws_lambda,omitempty"`
	XAsyncUploadConcurrencyLimit    *wrapperspb.Int32Value   `protobuf:"bytes,3,opt,name=_async_upload_concurrency_limit,json=AsyncUploadConcurrencyLimit,proto3" json:"_async_upload_concurrency_limit,omitempty"`
	XCliOnlyMode                    *wrapperspb.BoolValue    `protobuf:"bytes,4,opt,name=_cli_only_mode,json=CliOnlyMode,proto3" json:"_cli_only_mode,omitempty"`
	XColab                          *wrapperspb.BoolValue    `protobuf:"bytes,5,opt,name=_colab,json=Colab,proto3" json:"_colab,omitempty"`
	XCuda                           *wrapperspb.StringValue  `protobuf:"bytes,6,opt,name=_cuda,json=Cuda,proto3" json:"_cuda,omitempty"`
	XDisableMeta                    *wrapperspb.BoolValue    `protobuf:"bytes,7,opt,name=_disable_meta,json=DisableMeta,proto3" json:"_disable_meta,omitempty"`
	XDisableService                 *wrapperspb.BoolValue    `protobuf:"bytes,8,opt,name=_disable_service,json=DisableService,proto3" json:"_disable_service,omitempty"`
	XDisableSetproctitle            *wrapperspb.BoolValue    `protobuf:"bytes,9,opt,name=_disable_setproctitle,json=DisableSetproctitle,proto3" json:"_disable_setproctitle,omitempty"`
	XDisableStats                   *wrapperspb.BoolValue    `protobuf:"bytes,10,opt,name=_disable_stats,json=DisableStats,proto3" json:"_disable_stats,omitempty"`
	XDisableViewer                  *wrapperspb.BoolValue    `protobuf:"bytes,11,opt,name=_disable_viewer,json=DisableViewer,proto3" json:"_disable_viewer,omitempty"`
	XExceptExit                     *wrapperspb.BoolValue    `protobuf:"bytes,12,opt,name=_except_exit,json=ExceptExit,proto3" json:"_except_exit,omitempty"`
	XExecutable                     *wrapperspb.StringValue  `protobuf:"bytes,13,opt,name=_executable,json=Executable,proto3" json:"_executable,omitempty"`
	XExtraHttpHeaders               *MapStringKeyStringValue `protobuf:"bytes,14,opt,name=_extra_http_headers,json=ExtraHttpHeaders,proto3" json:"_extra_http_headers,omitempty"`
	XFileStreamTimeoutSeconds       *wrapperspb.DoubleValue  `protobuf:"bytes,15,opt,name=_file_stream_timeout_seconds,json=FileStreamTimeoutSeconds,proto3" json:"_file_stream_timeout_seconds,omitempty"`
	XFlowControlCustom              *wrapperspb.BoolValue    `protobuf:"bytes,16,opt,name=_flow_control_custom,json=FlowControlCustom,proto3" json:"_flow_control_custom,omitempty"`
	XFlowControlDisabled            *wrapperspb.BoolValue    `protobuf:"bytes,17,opt,name=_flow_control_disabled,json=FlowControlDisabled,proto3" json:"_flow_control_disabled,omitempty"`
	XInternalCheckProcess           *wrapperspb.DoubleValue  `protobuf:"bytes,18,opt,name=_internal_check_process,json=InternalCheckProcess,proto3" json:"_internal_check_process,omitempty"`
	XInternalQueueTimeout           *wrapperspb.DoubleValue  `protobuf:"bytes,19,opt,name=_internal_queue_timeout,json=InternalQueueTimeout,proto3" json:"_internal_queue_timeout,omitempty"`
	XIpython                        *wrapperspb.BoolValue    `protobuf:"bytes,20,opt,name=_ipython,json=Ipython,proto3" json:"_ipython,omitempty"`
	XJupyter                        *wrapperspb.BoolValue    `protobuf:"bytes,21,opt,name=_jupyter,json=Jupyter,proto3" json:"_jupyter,omitempty"`
	XJupyterName                    *wrapperspb.StringValue  `protobuf:"bytes,143,opt,name=_jupyter_name,json=JupyterName,proto3" json:"_jupyter_name,omitempty"`
	XJupyterPath                    *wrapperspb.StringValue  `protobuf:"bytes,144,opt,name=_jupyter_path,json=JupyterPath,proto3" json:"_jupyter_path,omitempty"`
	XJupyterRoot                    *wrapperspb.StringValue  `protobuf:"bytes,22,opt,name=_jupyter_root,json=JupyterRoot,proto3" json:"_jupyter_root,omitempty"`
	XKaggle                         *wrapperspb.BoolValue    `protobuf:"bytes,23,opt,name=_kaggle,json=Kaggle,proto3" json:"_kaggle,omitempty"`
	XLivePolicyRateLimit            *wrapperspb.Int32Value   `protobuf:"bytes,24,opt,name=_live_policy_rate_limit,json=LivePolicyRateLimit,proto3" json:"_live_policy_rate_limit,omitempty"`
	XLivePolicyWaitTime             *wrapperspb.Int32Value   `protobuf:"bytes,25,opt,name=_live_policy_wait_time,json=LivePolicyWaitTime,proto3" json:"_live_policy_wait_time,omitempty"`
	XLogLevel                       *wrapperspb.Int32Value   `protobuf:"bytes,26,opt,name=_log_level,json=LogLevel,proto3" json:"_log_level,omitempty"`
	XNetworkBuffer                  *wrapperspb.Int32Value   `protobuf:"bytes,27,opt,name=_network_buffer,json=NetworkBuffer,proto3" json:"_network_buffer,omitempty"`
	XNoop                           *wrapperspb.BoolValue    `protobuf:"bytes,28,opt,name=_noop,json=Noop,proto3" json:"_noop,omitempty"`
	XNotebook                       *wrapperspb.BoolValue    `protobuf:"bytes,29,opt,name=_notebook,json=Notebook,proto3" json:"_notebook,omitempty"`
	XOffline                        *wrapperspb.BoolValue    `protobuf:"bytes,30,opt,name=_offline,json=Offline,proto3" json:"_offline,omitempty"`
	XSync                           *wrapperspb.BoolValue    `protobuf:"bytes,31,opt,name=_sync,json=Sync,proto3" json:"_sync,omitempty"`
	XOs                             *wrapperspb.StringValue  `protobuf:"bytes,32,opt,name=_os,json=Os,proto3" json:"_os,omitempty"`
	XPlatform                       *wrapperspb.StringValue  `protobuf:"bytes,33,opt,name=_platform,json=Platform,proto3" json:"_platform,omitempty"`
	XPython                         *wrapperspb.StringValue  `protobuf:"bytes,34,opt,name=_python,json=Python,proto3" json:"_python,omitempty"`
	XRunqueueItemId                 *wrapperspb.StringValue  `protobuf:"bytes,35,opt,name=_runqueue_item_id,json=RunqueueItemId,proto3" json:"_runqueue_item_id,omitempty"`
	XRequireNexus                   *wrapperspb.BoolValue    `protobuf:"bytes,36,opt,name=_require_nexus,json=RequireNexus,proto3" json:"_require_nexus,omitempty"`
	XSaveRequirements               *wrapperspb.BoolValue    `protobuf:"bytes,37,opt,name=_save_requirements,json=SaveRequirements,proto3" json:"_save_requirements,omitempty"`
	XServiceTransport               *wrapperspb.StringValue  `protobuf:"bytes,38,opt,name=_service_transport,json=ServiceTransport,proto3" json:"_service_transport,omitempty"`
	XServiceWait                    *wrapperspb.DoubleValue  `protobuf:"bytes,39,opt,name=_service_wait,json=ServiceWait,proto3" json:"_service_wait,omitempty"`
	XStartDatetime                  *wrapperspb.StringValue  `protobuf:"bytes,40,opt,name=_start_datetime,json=StartDatetime,proto3" json:"_start_datetime,omitempty"`
	XStartTime                      *wrapperspb.DoubleValue  `protobuf:"bytes,41,opt,name=_start_time,json=StartTime,proto3" json:"_start_time,omitempty"`
	XStatsPid                       *wrapperspb.Int32Value   `protobuf:"bytes,42,opt,name=_stats_pid,json=StatsPid,proto3" json:"_stats_pid,omitempty"`
	XStatsSampleRateSeconds         *wrapperspb.DoubleValue  `protobuf:"bytes,43,opt,name=_stats_sample_rate_seconds,json=StatsSampleRateSeconds,proto3" json:"_stats_sample_rate_seconds,omitempty"`
	XStatsSamplesToAverage          *wrapperspb.Int32Value   `protobuf:"bytes,44,opt,name=_stats_samples_to_average,json=StatsSamplesToAverage,proto3" json:"_stats_samples_to_average,omitempty"`
	XStatsJoinAssets                *wrapperspb.BoolValue    `protobuf:"bytes,45,opt,name=_stats_join_assets,json=StatsJoinAssets,proto3" json:"_stats_join_assets,omitempty"`
	XStatsNeuronMonitorConfigPath   *wrapperspb.StringValue  `protobuf:"bytes,46,opt,name=_stats_neuron_monitor_config_path,json=StatsNeuronMonitorConfigPath,proto3" json:"_stats_neuron_monitor_config_path,omitempty"`
	XStatsOpenMetricsEndpoints      *MapStringKeyStringValue `protobuf:"bytes,47,opt,name=_stats_open_metrics_endpoints,json=StatsOpenMetricsEndpoints,proto3" json:"_stats_open_metrics_endpoints,omitempty"`
	XStatsOpenMetricsFilters        *OpenMetricsFilters      `protobuf:"bytes,48,opt,name=_stats_open_metrics_filters,json=StatsOpenMetricsFilters,proto3" json:"_stats_open_metrics_filters,omitempty"`
	XTmpCodeDir                     *wrapperspb.StringValue  `protobuf:"bytes,49,opt,name=_tmp_code_dir,json=TmpCodeDir,proto3" json:"_tmp_code_dir,omitempty"`
	XTracelog                       *wrapperspb.StringValue  `protobuf:"bytes,50,opt,name=_tracelog,json=Tracelog,proto3" json:"_tracelog,omitempty"`
	XUnsavedKeys                    *ListStringValue         `protobuf:"bytes,51,opt,name=_unsaved_keys,json=UnsavedKeys,proto3" json:"_unsaved_keys,omitempty"`
	XWindows                        *wrapperspb.BoolValue    `protobuf:"bytes,52,opt,name=_windows,json=Windows,proto3" json:"_windows,omitempty"`
	AllowValChange                  *wrapperspb.BoolValue    `protobuf:"bytes,53,opt,name=allow_val_change,json=allowValChange,proto3" json:"allow_val_change,omitempty"`
	Anonymous                       *wrapperspb.StringValue  `protobuf:"bytes,54,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	ApiKey                          *wrapperspb.StringValue  `protobuf:"bytes,55,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	AzureAccountUrlToAccessKey      *MapStringKeyStringValue `protobuf:"bytes,56,opt,name=azure_account_url_to_access_key,json=azureAccountUrlToAccessKey,proto3" json:"azure_account_url_to_access_key,omitempty"`
	BaseUrl                         *wrapperspb.StringValue  `protobuf:"bytes,57,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	CodeDir                         *wrapperspb.StringValue  `protobuf:"bytes,58,opt,name=code_dir,json=codeDir,proto3" json:"code_dir,omitempty"`
	ConfigPaths                     *ListStringValue         `protobuf:"bytes,59,opt,name=config_paths,json=configPaths,proto3" json:"config_paths,omitempty"`
	Console                         *wrapperspb.StringValue  `protobuf:"bytes,60,opt,name=console,proto3" json:"console,omitempty"`
	Deployment                      *wrapperspb.StringValue  `protobuf:"bytes,61,opt,name=deployment,proto3" json:"deployment,omitempty"`
	DisableCode                     *wrapperspb.BoolValue    `protobuf:"bytes,62,opt,name=disable_code,json=disableCode,proto3" json:"disable_code,omitempty"`
	DisableGit                      *wrapperspb.BoolValue    `protobuf:"bytes,63,opt,name=disable_git,json=disableGit,proto3" json:"disable_git,omitempty"`
	DisableHints                    *wrapperspb.BoolValue    `protobuf:"bytes,64,opt,name=disable_hints,json=disableHints,proto3" json:"disable_hints,omitempty"`
	DisableJobCreation              *wrapperspb.BoolValue    `protobuf:"bytes,65,opt,name=disable_job_creation,json=disableJobCreation,proto3" json:"disable_job_creation,omitempty"`
	Disabled                        *wrapperspb.BoolValue    `protobuf:"bytes,66,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Docker                          *wrapperspb.StringValue  `protobuf:"bytes,67,opt,name=docker,proto3" json:"docker,omitempty"`
	Email                           *wrapperspb.StringValue  `protobuf:"bytes,68,opt,name=email,proto3" json:"email,omitempty"`
	Entity                          *wrapperspb.StringValue  `protobuf:"bytes,69,opt,name=entity,proto3" json:"entity,omitempty"`
	FilesDir                        *wrapperspb.StringValue  `protobuf:"bytes,70,opt,name=files_dir,json=filesDir,proto3" json:"files_dir,omitempty"`
	Force                           *wrapperspb.BoolValue    `protobuf:"bytes,71,opt,name=force,proto3" json:"force,omitempty"`
	GitCommit                       *wrapperspb.StringValue  `protobuf:"bytes,72,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	GitRemote                       *wrapperspb.StringValue  `protobuf:"bytes,73,opt,name=git_remote,json=gitRemote,proto3" json:"git_remote,omitempty"`
	GitRemoteUrl                    *wrapperspb.StringValue  `protobuf:"bytes,74,opt,name=git_remote_url,json=gitRemoteUrl,proto3" json:"git_remote_url,omitempty"`
	GitRoot                         *wrapperspb.StringValue  `protobuf:"bytes,75,opt,name=git_root,json=gitRoot,proto3" json:"git_root,omitempty"`
	HeartbeatSeconds                *wrapperspb.Int32Value   `protobuf:"bytes,76,opt,name=heartbeat_seconds,json=heartbeatSeconds,proto3" json:"heartbeat_seconds,omitempty"`
	Host                            *wrapperspb.StringValue  `protobuf:"bytes,77,opt,name=host,proto3" json:"host,omitempty"`
	IgnoreGlobs                     *ListStringValue         `protobuf:"bytes,78,opt,name=ignore_globs,json=ignoreGlobs,proto3" json:"ignore_globs,omitempty"`
	InitTimeout                     *wrapperspb.DoubleValue  `protobuf:"bytes,79,opt,name=init_timeout,json=initTimeout,proto3" json:"init_timeout,omitempty"`
	IsLocal                         *wrapperspb.BoolValue    `protobuf:"bytes,80,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	JobName                         *wrapperspb.StringValue  `protobuf:"bytes,145,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	JobSource                       *wrapperspb.StringValue  `protobuf:"bytes,81,opt,name=job_source,json=jobSource,proto3" json:"job_source,omitempty"`
	LabelDisable                    *wrapperspb.BoolValue    `protobuf:"bytes,82,opt,name=label_disable,json=labelDisable,proto3" json:"label_disable,omitempty"`
	Launch                          *wrapperspb.BoolValue    `protobuf:"bytes,83,opt,name=launch,proto3" json:"launch,omitempty"`
	LaunchConfigPath                *wrapperspb.StringValue  `protobuf:"bytes,84,opt,name=launch_config_path,json=launchConfigPath,proto3" json:"launch_config_path,omitempty"`
	LogDir                          *wrapperspb.StringValue  `protobuf:"bytes,85,opt,name=log_dir,json=logDir,proto3" json:"log_dir,omitempty"`
	LogInternal                     *wrapperspb.StringValue  `protobuf:"bytes,86,opt,name=log_internal,json=logInternal,proto3" json:"log_internal,omitempty"`
	LogSymlinkInternal              *wrapperspb.StringValue  `protobuf:"bytes,87,opt,name=log_symlink_internal,json=logSymlinkInternal,proto3" json:"log_symlink_internal,omitempty"`
	LogSymlinkUser                  *wrapperspb.StringValue  `protobuf:"bytes,88,opt,name=log_symlink_user,json=logSymlinkUser,proto3" json:"log_symlink_user,omitempty"`
	LogUser                         *wrapperspb.StringValue  `protobuf:"bytes,89,opt,name=log_user,json=logUser,proto3" json:"log_user,omitempty"`
	LoginTimeout                    *wrapperspb.DoubleValue  `protobuf:"bytes,90,opt,name=login_timeout,json=loginTimeout,proto3" json:"login_timeout,omitempty"`
	Mode                            *wrapperspb.StringValue  `protobuf:"bytes,92,opt,name=mode,proto3" json:"mode,omitempty"`
	NotebookName                    *wrapperspb.StringValue  `protobuf:"bytes,93,opt,name=notebook_name,json=notebookName,proto3" json:"notebook_name,omitempty"`
	Problem                         *wrapperspb.StringValue  `protobuf:"bytes,94,opt,name=problem,proto3" json:"problem,omitempty"`
	Program                         *wrapperspb.StringValue  `protobuf:"bytes,95,opt,name=program,proto3" json:"program,omitempty"`
	ProgramRelpath                  *wrapperspb.StringValue  `protobuf:"bytes,96,opt,name=program_relpath,json=programRelpath,proto3" json:"program_relpath,omitempty"`
	Project                         *wrapperspb.StringValue  `protobuf:"bytes,97,opt,name=project,proto3" json:"project,omitempty"`
	ProjectUrl                      *wrapperspb.StringValue  `protobuf:"bytes,98,opt,name=project_url,json=projectUrl,proto3" json:"project_url,omitempty"`
	Quiet                           *wrapperspb.BoolValue    `protobuf:"bytes,99,opt,name=quiet,proto3" json:"quiet,omitempty"`
	Reinit                          *wrapperspb.BoolValue    `protobuf:"bytes,100,opt,name=reinit,proto3" json:"reinit,omitempty"`
	Relogin                         *wrapperspb.BoolValue    `protobuf:"bytes,101,opt,name=relogin,proto3" json:"relogin,omitempty"`
	Resume                          *wrapperspb.StringValue  `protobuf:"bytes,102,opt,name=resume,proto3" json:"resume,omitempty"`
	ResumeFname                     *wrapperspb.StringValue  `protobuf:"bytes,103,opt,name=resume_fname,json=resumeFname,proto3" json:"resume_fname,omitempty"`
	Resumed                         *wrapperspb.BoolValue    `protobuf:"bytes,104,opt,name=resumed,proto3" json:"resumed,omitempty"`
	RootDir                         *wrapperspb.StringValue  `protobuf:"bytes,105,opt,name=root_dir,json=rootDir,proto3" json:"root_dir,omitempty"`
	RunGroup                        *wrapperspb.StringValue  `protobuf:"bytes,106,opt,name=run_group,json=runGroup,proto3" json:"run_group,omitempty"`
	RunId                           *wrapperspb.StringValue  `protobuf:"bytes,107,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	RunJobType                      *wrapperspb.StringValue  `protobuf:"bytes,108,opt,name=run_job_type,json=runJobType,proto3" json:"run_job_type,omitempty"`
	RunMode                         *wrapperspb.StringValue  `protobuf:"bytes,109,opt,name=run_mode,json=runMode,proto3" json:"run_mode,omitempty"`
	RunName                         *wrapperspb.StringValue  `protobuf:"bytes,110,opt,name=run_name,json=runName,proto3" json:"run_name,omitempty"`
	RunNotes                        *wrapperspb.StringValue  `protobuf:"bytes,111,opt,name=run_notes,json=runNotes,proto3" json:"run_notes,omitempty"`
	RunTags                         *ListStringValue         `protobuf:"bytes,112,opt,name=run_tags,json=runTags,proto3" json:"run_tags,omitempty"`
	RunUrl                          *wrapperspb.StringValue  `protobuf:"bytes,113,opt,name=run_url,json=runUrl,proto3" json:"run_url,omitempty"`
	SagemakerDisable                *wrapperspb.BoolValue    `protobuf:"bytes,114,opt,name=sagemaker_disable,json=sagemakerDisable,proto3" json:"sagemaker_disable,omitempty"`
	SaveCode                        *wrapperspb.BoolValue    `protobuf:"bytes,115,opt,name=save_code,json=saveCode,proto3" json:"save_code,omitempty"`
	SettingsSystem                  *wrapperspb.StringValue  `protobuf:"bytes,116,opt,name=settings_system,json=settingsSystem,proto3" json:"settings_system,omitempty"`
	SettingsWorkspace               *wrapperspb.StringValue  `protobuf:"bytes,117,opt,name=settings_workspace,json=settingsWorkspace,proto3" json:"settings_workspace,omitempty"`
	ShowColors                      *wrapperspb.BoolValue    `protobuf:"bytes,118,opt,name=show_colors,json=showColors,proto3" json:"show_colors,omitempty"`
	ShowEmoji                       *wrapperspb.BoolValue    `protobuf:"bytes,119,opt,name=show_emoji,json=showEmoji,proto3" json:"show_emoji,omitempty"`
	ShowErrors                      *wrapperspb.BoolValue    `protobuf:"bytes,120,opt,name=show_errors,json=showErrors,proto3" json:"show_errors,omitempty"`
	ShowInfo                        *wrapperspb.BoolValue    `protobuf:"bytes,121,opt,name=show_info,json=showInfo,proto3" json:"show_info,omitempty"`
	ShowWarnings                    *wrapperspb.BoolValue    `protobuf:"bytes,122,opt,name=show_warnings,json=showWarnings,proto3" json:"show_warnings,omitempty"`
	Silent                          *wrapperspb.BoolValue    `protobuf:"bytes,123,opt,name=silent,proto3" json:"silent,omitempty"`
	StartMethod                     *wrapperspb.StringValue  `protobuf:"bytes,124,opt,name=start_method,json=startMethod,proto3" json:"start_method,omitempty"`
	Strict                          *wrapperspb.BoolValue    `protobuf:"bytes,125,opt,name=strict,proto3" json:"strict,omitempty"`
	SummaryErrors                   *wrapperspb.Int32Value   `protobuf:"bytes,126,opt,name=summary_errors,json=summaryErrors,proto3" json:"summary_errors,omitempty"`
	SummaryTimeout                  *wrapperspb.Int32Value   `protobuf:"bytes,127,opt,name=summary_timeout,json=summaryTimeout,proto3" json:"summary_timeout,omitempty"`
	SummaryWarnings                 *wrapperspb.Int32Value   `protobuf:"bytes,128,opt,name=summary_warnings,json=summaryWarnings,proto3" json:"summary_warnings,omitempty"`
	SweepId                         *wrapperspb.StringValue  `protobuf:"bytes,129,opt,name=sweep_id,json=sweepId,proto3" json:"sweep_id,omitempty"`
	SweepParamPath                  *wrapperspb.StringValue  `protobuf:"bytes,130,opt,name=sweep_param_path,json=sweepParamPath,proto3" json:"sweep_param_path,omitempty"`
	SweepUrl                        *wrapperspb.StringValue  `protobuf:"bytes,131,opt,name=sweep_url,json=sweepUrl,proto3" json:"sweep_url,omitempty"`
	Symlink                         *wrapperspb.BoolValue    `protobuf:"bytes,132,opt,name=symlink,proto3" json:"symlink,omitempty"`
	SyncDir                         *wrapperspb.StringValue  `protobuf:"bytes,133,opt,name=sync_dir,json=syncDir,proto3" json:"sync_dir,omitempty"`
	SyncFile                        *wrapperspb.StringValue  `protobuf:"bytes,134,opt,name=sync_file,json=syncFile,proto3" json:"sync_file,omitempty"`
	SyncSymlinkLatest               *wrapperspb.StringValue  `protobuf:"bytes,135,opt,name=sync_symlink_latest,json=syncSymlinkLatest,proto3" json:"sync_symlink_latest,omitempty"`
	SystemSample                    *wrapperspb.Int32Value   `protobuf:"bytes,136,opt,name=system_sample,json=systemSample,proto3" json:"system_sample,omitempty"`
	SystemSampleSeconds             *wrapperspb.Int32Value   `protobuf:"bytes,137,opt,name=system_sample_seconds,json=systemSampleSeconds,proto3" json:"system_sample_seconds,omitempty"`
	TableRaiseOnMaxRowLimitExceeded *wrapperspb.BoolValue    `protobuf:"bytes,138,opt,name=table_raise_on_max_row_limit_exceeded,json=tableRaiseOnMaxRowLimitExceeded,proto3" json:"table_raise_on_max_row_limit_exceeded,omitempty"`
	Timespec                        *wrapperspb.StringValue  `protobuf:"bytes,139,opt,name=timespec,proto3" json:"timespec,omitempty"`
	TmpDir                          *wrapperspb.StringValue  `protobuf:"bytes,140,opt,name=tmp_dir,json=tmpDir,proto3" json:"tmp_dir,omitempty"`
	Username                        *wrapperspb.StringValue  `protobuf:"bytes,141,opt,name=username,proto3" json:"username,omitempty"`
	WandbDir                        *wrapperspb.StringValue  `protobuf:"bytes,142,opt,name=wandb_dir,json=wandbDir,proto3" json:"wandb_dir,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_settings_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_settings_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_wandb_settings_proto_rawDescGZIP(), []int{4}
}

func (x *Settings) GetXArgs() *ListStringValue {
	if x != nil {
		return x.XArgs
	}
	return nil
}

func (x *Settings) GetXAwsLambda() *wrapperspb.BoolValue {
	if x != nil {
		return x.XAwsLambda
	}
	return nil
}

func (x *Settings) GetXAsyncUploadConcurrencyLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.XAsyncUploadConcurrencyLimit
	}
	return nil
}

func (x *Settings) GetXCliOnlyMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.XCliOnlyMode
	}
	return nil
}

func (x *Settings) GetXColab() *wrapperspb.BoolValue {
	if x != nil {
		return x.XColab
	}
	return nil
}

func (x *Settings) GetXCuda() *wrapperspb.StringValue {
	if x != nil {
		return x.XCuda
	}
	return nil
}

func (x *Settings) GetXDisableMeta() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableMeta
	}
	return nil
}

func (x *Settings) GetXDisableService() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableService
	}
	return nil
}

func (x *Settings) GetXDisableSetproctitle() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableSetproctitle
	}
	return nil
}

func (x *Settings) GetXDisableStats() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableStats
	}
	return nil
}

func (x *Settings) GetXDisableViewer() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableViewer
	}
	return nil
}

func (x *Settings) GetXExceptExit() *wrapperspb.BoolValue {
	if x != nil {
		return x.XExceptExit
	}
	return nil
}

func (x *Settings) GetXExecutable() *wrapperspb.StringValue {
	if x != nil {
		return x.XExecutable
	}
	return nil
}

func (x *Settings) GetXExtraHttpHeaders() *MapStringKeyStringValue {
	if x != nil {
		return x.XExtraHttpHeaders
	}
	return nil
}

func (x *Settings) GetXFileStreamTimeoutSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XFileStreamTimeoutSeconds
	}
	return nil
}

func (x *Settings) GetXFlowControlCustom() *wrapperspb.BoolValue {
	if x != nil {
		return x.XFlowControlCustom
	}
	return nil
}

func (x *Settings) GetXFlowControlDisabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.XFlowControlDisabled
	}
	return nil
}

func (x *Settings) GetXInternalCheckProcess() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XInternalCheckProcess
	}
	return nil
}

func (x *Settings) GetXInternalQueueTimeout() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XInternalQueueTimeout
	}
	return nil
}

func (x *Settings) GetXIpython() *wrapperspb.BoolValue {
	if x != nil {
		return x.XIpython
	}
	return nil
}

func (x *Settings) GetXJupyter() *wrapperspb.BoolValue {
	if x != nil {
		return x.XJupyter
	}
	return nil
}

func (x *Settings) GetXJupyterName() *wrapperspb.StringValue {
	if x != nil {
		return x.XJupyterName
	}
	return nil
}

func (x *Settings) GetXJupyterPath() *wrapperspb.StringValue {
	if x != nil {
		return x.XJupyterPath
	}
	return nil
}

func (x *Settings) GetXJupyterRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.XJupyterRoot
	}
	return nil
}

func (x *Settings) GetXKaggle() *wrapperspb.BoolValue {
	if x != nil {
		return x.XKaggle
	}
	return nil
}

func (x *Settings) GetXLivePolicyRateLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.XLivePolicyRateLimit
	}
	return nil
}

func (x *Settings) GetXLivePolicyWaitTime() *wrapperspb.Int32Value {
	if x != nil {
		return x.XLivePolicyWaitTime
	}
	return nil
}

func (x *Settings) GetXLogLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.XLogLevel
	}
	return nil
}

func (x *Settings) GetXNetworkBuffer() *wrapperspb.Int32Value {
	if x != nil {
		return x.XNetworkBuffer
	}
	return nil
}

func (x *Settings) GetXNoop() *wrapperspb.BoolValue {
	if x != nil {
		return x.XNoop
	}
	return nil
}

func (x *Settings) GetXNotebook() *wrapperspb.BoolValue {
	if x != nil {
		return x.XNotebook
	}
	return nil
}

func (x *Settings) GetXOffline() *wrapperspb.BoolValue {
	if x != nil {
		return x.XOffline
	}
	return nil
}

func (x *Settings) GetXSync() *wrapperspb.BoolValue {
	if x != nil {
		return x.XSync
	}
	return nil
}

func (x *Settings) GetXOs() *wrapperspb.StringValue {
	if x != nil {
		return x.XOs
	}
	return nil
}

func (x *Settings) GetXPlatform() *wrapperspb.StringValue {
	if x != nil {
		return x.XPlatform
	}
	return nil
}

func (x *Settings) GetXPython() *wrapperspb.StringValue {
	if x != nil {
		return x.XPython
	}
	return nil
}

func (x *Settings) GetXRunqueueItemId() *wrapperspb.StringValue {
	if x != nil {
		return x.XRunqueueItemId
	}
	return nil
}

func (x *Settings) GetXRequireNexus() *wrapperspb.BoolValue {
	if x != nil {
		return x.XRequireNexus
	}
	return nil
}

func (x *Settings) GetXSaveRequirements() *wrapperspb.BoolValue {
	if x != nil {
		return x.XSaveRequirements
	}
	return nil
}

func (x *Settings) GetXServiceTransport() *wrapperspb.StringValue {
	if x != nil {
		return x.XServiceTransport
	}
	return nil
}

func (x *Settings) GetXServiceWait() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XServiceWait
	}
	return nil
}

func (x *Settings) GetXStartDatetime() *wrapperspb.StringValue {
	if x != nil {
		return x.XStartDatetime
	}
	return nil
}

func (x *Settings) GetXStartTime() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XStartTime
	}
	return nil
}

func (x *Settings) GetXStatsPid() *wrapperspb.Int32Value {
	if x != nil {
		return x.XStatsPid
	}
	return nil
}

func (x *Settings) GetXStatsSampleRateSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XStatsSampleRateSeconds
	}
	return nil
}

func (x *Settings) GetXStatsSamplesToAverage() *wrapperspb.Int32Value {
	if x != nil {
		return x.XStatsSamplesToAverage
	}
	return nil
}

func (x *Settings) GetXStatsJoinAssets() *wrapperspb.BoolValue {
	if x != nil {
		return x.XStatsJoinAssets
	}
	return nil
}

func (x *Settings) GetXStatsNeuronMonitorConfigPath() *wrapperspb.StringValue {
	if x != nil {
		return x.XStatsNeuronMonitorConfigPath
	}
	return nil
}

func (x *Settings) GetXStatsOpenMetricsEndpoints() *MapStringKeyStringValue {
	if x != nil {
		return x.XStatsOpenMetricsEndpoints
	}
	return nil
}

func (x *Settings) GetXStatsOpenMetricsFilters() *OpenMetricsFilters {
	if x != nil {
		return x.XStatsOpenMetricsFilters
	}
	return nil
}

func (x *Settings) GetXTmpCodeDir() *wrapperspb.StringValue {
	if x != nil {
		return x.XTmpCodeDir
	}
	return nil
}

func (x *Settings) GetXTracelog() *wrapperspb.StringValue {
	if x != nil {
		return x.XTracelog
	}
	return nil
}

func (x *Settings) GetXUnsavedKeys() *ListStringValue {
	if x != nil {
		return x.XUnsavedKeys
	}
	return nil
}

func (x *Settings) GetXWindows() *wrapperspb.BoolValue {
	if x != nil {
		return x.XWindows
	}
	return nil
}

func (x *Settings) GetAllowValChange() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowValChange
	}
	return nil
}

func (x *Settings) GetAnonymous() *wrapperspb.StringValue {
	if x != nil {
		return x.Anonymous
	}
	return nil
}

func (x *Settings) GetApiKey() *wrapperspb.StringValue {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *Settings) GetAzureAccountUrlToAccessKey() *MapStringKeyStringValue {
	if x != nil {
		return x.AzureAccountUrlToAccessKey
	}
	return nil
}

func (x *Settings) GetBaseUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseUrl
	}
	return nil
}

func (x *Settings) GetCodeDir() *wrapperspb.StringValue {
	if x != nil {
		return x.CodeDir
	}
	return nil
}

func (x *Settings) GetConfigPaths() *ListStringValue {
	if x != nil {
		return x.ConfigPaths
	}
	return nil
}

func (x *Settings) GetConsole() *wrapperspb.StringValue {
	if x != nil {
		return x.Console
	}
	return nil
}

func (x *Settings) GetDeployment() *wrapperspb.StringValue {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Settings) GetDisableCode() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableCode
	}
	return nil
}

func (x *Settings) GetDisableGit() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableGit
	}
	return nil
}

func (x *Settings) GetDisableHints() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableHints
	}
	return nil
}

func (x *Settings) GetDisableJobCreation() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableJobCreation
	}
	return nil
}

func (x *Settings) GetDisabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *Settings) GetDocker() *wrapperspb.StringValue {
	if x != nil {
		return x.Docker
	}
	return nil
}

func (x *Settings) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Settings) GetEntity() *wrapperspb.StringValue {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Settings) GetFilesDir() *wrapperspb.StringValue {
	if x != nil {
		return x.FilesDir
	}
	return nil
}

func (x *Settings) GetForce() *wrapperspb.BoolValue {
	if x != nil {
		return x.Force
	}
	return nil
}

func (x *Settings) GetGitCommit() *wrapperspb.StringValue {
	if x != nil {
		return x.GitCommit
	}
	return nil
}

func (x *Settings) GetGitRemote() *wrapperspb.StringValue {
	if x != nil {
		return x.GitRemote
	}
	return nil
}

func (x *Settings) GetGitRemoteUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.GitRemoteUrl
	}
	return nil
}

func (x *Settings) GetGitRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.GitRoot
	}
	return nil
}

func (x *Settings) GetHeartbeatSeconds() *wrapperspb.Int32Value {
	if x != nil {
		return x.HeartbeatSeconds
	}
	return nil
}

func (x *Settings) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *Settings) GetIgnoreGlobs() *ListStringValue {
	if x != nil {
		return x.IgnoreGlobs
	}
	return nil
}

func (x *Settings) GetInitTimeout() *wrapperspb.DoubleValue {
	if x != nil {
		return x.InitTimeout
	}
	return nil
}

func (x *Settings) GetIsLocal() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsLocal
	}
	return nil
}

func (x *Settings) GetJobName() *wrapperspb.StringValue {
	if x != nil {
		return x.JobName
	}
	return nil
}

func (x *Settings) GetJobSource() *wrapperspb.StringValue {
	if x != nil {
		return x.JobSource
	}
	return nil
}

func (x *Settings) GetLabelDisable() *wrapperspb.BoolValue {
	if x != nil {
		return x.LabelDisable
	}
	return nil
}

func (x *Settings) GetLaunch() *wrapperspb.BoolValue {
	if x != nil {
		return x.Launch
	}
	return nil
}

func (x *Settings) GetLaunchConfigPath() *wrapperspb.StringValue {
	if x != nil {
		return x.LaunchConfigPath
	}
	return nil
}

func (x *Settings) GetLogDir() *wrapperspb.StringValue {
	if x != nil {
		return x.LogDir
	}
	return nil
}

func (x *Settings) GetLogInternal() *wrapperspb.StringValue {
	if x != nil {
		return x.LogInternal
	}
	return nil
}

func (x *Settings) GetLogSymlinkInternal() *wrapperspb.StringValue {
	if x != nil {
		return x.LogSymlinkInternal
	}
	return nil
}

func (x *Settings) GetLogSymlinkUser() *wrapperspb.StringValue {
	if x != nil {
		return x.LogSymlinkUser
	}
	return nil
}

func (x *Settings) GetLogUser() *wrapperspb.StringValue {
	if x != nil {
		return x.LogUser
	}
	return nil
}

func (x *Settings) GetLoginTimeout() *wrapperspb.DoubleValue {
	if x != nil {
		return x.LoginTimeout
	}
	return nil
}

func (x *Settings) GetMode() *wrapperspb.StringValue {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Settings) GetNotebookName() *wrapperspb.StringValue {
	if x != nil {
		return x.NotebookName
	}
	return nil
}

func (x *Settings) GetProblem() *wrapperspb.StringValue {
	if x != nil {
		return x.Problem
	}
	return nil
}

func (x *Settings) GetProgram() *wrapperspb.StringValue {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *Settings) GetProgramRelpath() *wrapperspb.StringValue {
	if x != nil {
		return x.ProgramRelpath
	}
	return nil
}

func (x *Settings) GetProject() *wrapperspb.StringValue {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Settings) GetProjectUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.ProjectUrl
	}
	return nil
}

func (x *Settings) GetQuiet() *wrapperspb.BoolValue {
	if x != nil {
		return x.Quiet
	}
	return nil
}

func (x *Settings) GetReinit() *wrapperspb.BoolValue {
	if x != nil {
		return x.Reinit
	}
	return nil
}

func (x *Settings) GetRelogin() *wrapperspb.BoolValue {
	if x != nil {
		return x.Relogin
	}
	return nil
}

func (x *Settings) GetResume() *wrapperspb.StringValue {
	if x != nil {
		return x.Resume
	}
	return nil
}

func (x *Settings) GetResumeFname() *wrapperspb.StringValue {
	if x != nil {
		return x.ResumeFname
	}
	return nil
}

func (x *Settings) GetResumed() *wrapperspb.BoolValue {
	if x != nil {
		return x.Resumed
	}
	return nil
}

func (x *Settings) GetRootDir() *wrapperspb.StringValue {
	if x != nil {
		return x.RootDir
	}
	return nil
}

func (x *Settings) GetRunGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.RunGroup
	}
	return nil
}

func (x *Settings) GetRunId() *wrapperspb.StringValue {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *Settings) GetRunJobType() *wrapperspb.StringValue {
	if x != nil {
		return x.RunJobType
	}
	return nil
}

func (x *Settings) GetRunMode() *wrapperspb.StringValue {
	if x != nil {
		return x.RunMode
	}
	return nil
}

func (x *Settings) GetRunName() *wrapperspb.StringValue {
	if x != nil {
		return x.RunName
	}
	return nil
}

func (x *Settings) GetRunNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.RunNotes
	}
	return nil
}

func (x *Settings) GetRunTags() *ListStringValue {
	if x != nil {
		return x.RunTags
	}
	return nil
}

func (x *Settings) GetRunUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.RunUrl
	}
	return nil
}

func (x *Settings) GetSagemakerDisable() *wrapperspb.BoolValue {
	if x != nil {
		return x.SagemakerDisable
	}
	return nil
}

func (x *Settings) GetSaveCode() *wrapperspb.BoolValue {
	if x != nil {
		return x.SaveCode
	}
	return nil
}

func (x *Settings) GetSettingsSystem() *wrapperspb.StringValue {
	if x != nil {
		return x.SettingsSystem
	}
	return nil
}

func (x *Settings) GetSettingsWorkspace() *wrapperspb.StringValue {
	if x != nil {
		return x.SettingsWorkspace
	}
	return nil
}

func (x *Settings) GetShowColors() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowColors
	}
	return nil
}

func (x *Settings) GetShowEmoji() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowEmoji
	}
	return nil
}

func (x *Settings) GetShowErrors() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowErrors
	}
	return nil
}

func (x *Settings) GetShowInfo() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowInfo
	}
	return nil
}

func (x *Settings) GetShowWarnings() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowWarnings
	}
	return nil
}

func (x *Settings) GetSilent() *wrapperspb.BoolValue {
	if x != nil {
		return x.Silent
	}
	return nil
}

func (x *Settings) GetStartMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.StartMethod
	}
	return nil
}

func (x *Settings) GetStrict() *wrapperspb.BoolValue {
	if x != nil {
		return x.Strict
	}
	return nil
}

func (x *Settings) GetSummaryErrors() *wrapperspb.Int32Value {
	if x != nil {
		return x.SummaryErrors
	}
	return nil
}

func (x *Settings) GetSummaryTimeout() *wrapperspb.Int32Value {
	if x != nil {
		return x.SummaryTimeout
	}
	return nil
}

func (x *Settings) GetSummaryWarnings() *wrapperspb.Int32Value {
	if x != nil {
		return x.SummaryWarnings
	}
	return nil
}

func (x *Settings) GetSweepId() *wrapperspb.StringValue {
	if x != nil {
		return x.SweepId
	}
	return nil
}

func (x *Settings) GetSweepParamPath() *wrapperspb.StringValue {
	if x != nil {
		return x.SweepParamPath
	}
	return nil
}

func (x *Settings) GetSweepUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.SweepUrl
	}
	return nil
}

func (x *Settings) GetSymlink() *wrapperspb.BoolValue {
	if x != nil {
		return x.Symlink
	}
	return nil
}

func (x *Settings) GetSyncDir() *wrapperspb.StringValue {
	if x != nil {
		return x.SyncDir
	}
	return nil
}

func (x *Settings) GetSyncFile() *wrapperspb.StringValue {
	if x != nil {
		return x.SyncFile
	}
	return nil
}

func (x *Settings) GetSyncSymlinkLatest() *wrapperspb.StringValue {
	if x != nil {
		return x.SyncSymlinkLatest
	}
	return nil
}

func (x *Settings) GetSystemSample() *wrapperspb.Int32Value {
	if x != nil {
		return x.SystemSample
	}
	return nil
}

func (x *Settings) GetSystemSampleSeconds() *wrapperspb.Int32Value {
	if x != nil {
		return x.SystemSampleSeconds
	}
	return nil
}

func (x *Settings) GetTableRaiseOnMaxRowLimitExceeded() *wrapperspb.BoolValue {
	if x != nil {
		return x.TableRaiseOnMaxRowLimitExceeded
	}
	return nil
}

func (x *Settings) GetTimespec() *wrapperspb.StringValue {
	if x != nil {
		return x.Timespec
	}
	return nil
}

func (x *Settings) GetTmpDir() *wrapperspb.StringValue {
	if x != nil {
		return x.TmpDir
	}
	return nil
}

func (x *Settings) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *Settings) GetWandbDir() *wrapperspb.StringValue {
	if x != nil {
		return x.WandbDir
	}
	return nil
}

var File_wandb_settings_proto protoreflect.FileDescriptor

var file_wandb_settings_proto_rawDesc = []byte{
	0x0a, 0x14, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x9d, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x61, 0x6e,
	0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xde, 0x01, 0x0a, 0x23, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x61, 0x0a,
	0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77,
	0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xad, 0x01, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x9a, 0x49, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34, 0x0a,
	0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77,
	0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x6c, 0x61, 0x6d, 0x62,
	0x64, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x41, 0x77, 0x73, 0x4c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x12,
	0x61, 0x0a, 0x1f, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x43, 0x6c, 0x69, 0x4f, 0x6e, 0x6c, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x61, 0x62, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x43, 0x6f, 0x6c, 0x61, 0x62, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x63, 0x75, 0x64, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x43, 0x75, 0x64, 0x61, 0x12, 0x3e, 0x0a, 0x0d, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x10, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x4e, 0x0a, 0x15, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x70,
	0x72, 0x6f, 0x63, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x63, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x0f, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x5f, 0x65, 0x78, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x45,
	0x78, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x45, 0x78, 0x74, 0x72, 0x61, 0x48,
	0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x5c, 0x0a, 0x1c, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x5f, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x4f, 0x0a, 0x16, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x17, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x17, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x35, 0x0a, 0x08, 0x5f, 0x69, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x49, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x5f, 0x6a, 0x75, 0x70, 0x79,
	0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x0d, 0x5f, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x5f, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0d, 0x5f, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x4a, 0x75, 0x70, 0x79, 0x74,
	0x65, 0x72, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x5f, 0x6b, 0x61, 0x67, 0x67, 0x6c,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x4b, 0x61, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4f,
	0x0a, 0x16, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x4c, 0x69, 0x76,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x43, 0x0a, 0x0f, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12,
	0x2f, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x6f, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x6f, 0x70,
	0x12, 0x37, 0x0a, 0x09, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x35, 0x0a, 0x08, 0x5f, 0x6f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x2d, 0x0a, 0x03, 0x5f, 0x6f, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x4f, 0x73,
	0x12, 0x39, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x35, 0x0a, 0x07, 0x5f,
	0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x50, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x11, 0x5f, 0x72, 0x75, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x52, 0x75, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x75, 0x73, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4e, 0x65, 0x78, 0x75, 0x73, 0x12, 0x48, 0x0a,
	0x12, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x77, 0x61, 0x69, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x57, 0x61, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x50, 0x69, 0x64, 0x12, 0x58, 0x0a, 0x1a, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x55,
	0x0a, 0x19, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x54, 0x6f, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x65,
	0x0a, 0x21, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x5f,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4e, 0x65,
	0x75, 0x72, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x69, 0x0a, 0x1d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77,
	0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x60, 0x0a, 0x1b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x17, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x5f, 0x74, 0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x54, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x44, 0x69, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x6f, 0x67,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x43,
	0x0a, 0x0d, 0x5f, 0x75, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x55, 0x6e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x6c, 0x0a, 0x1f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77,
	0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65,
	0x44, 0x69, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f,
	0x6c, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12,
	0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x69, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x69, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x14, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f, 0x62,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x39, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a,
	0x0a, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x69,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x67,
	0x69, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x67,
	0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x67, 0x69, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x68, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x30,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x73,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x47,
	0x6c, 0x6f, 0x62, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x08,
	0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6a,
	0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x53,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x12, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x54,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x6c,
	0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x56, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x14,
	0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x53, 0x79, 0x6d,
	0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x10,
	0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x30, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d,
	0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x36, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x72, 0x65, 0x6c, 0x70, 0x61, 0x74, 0x68, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x70, 0x61, 0x74, 0x68, 0x12, 0x36, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x18, 0x63, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x71, 0x75, 0x69, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x72, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f,
	0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x46, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x08,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x6f,
	0x6f, 0x74, 0x44, 0x69, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x33, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x5f, 0x6a, 0x6f, 0x62,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x4a, 0x6f,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x72, 0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x35,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72,
	0x75, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x61,
	0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73,
	0x61, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4b,
	0x0a, 0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x6d,
	0x6f, 0x6a, 0x69, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x79, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x68, 0x6f,
	0x77, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x68,
	0x6f, 0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x69,
	0x6c, 0x65, 0x6e, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x7c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x47, 0x0a,
	0x10, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x77, 0x65, 0x65, 0x70, 0x49, 0x64,
	0x12, 0x47, 0x0a, 0x10, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x77, 0x65, 0x65, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x77, 0x65,
	0x65, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x77, 0x65,
	0x65, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x38, 0x0a, 0x08,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73,
	0x79, 0x6e, 0x63, 0x44, 0x69, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x73, 0x79, 0x6e, 0x63, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x89, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x6b, 0x0a, 0x25, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18,
	0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x69, 0x73, 0x65, 0x4f, 0x6e,
	0x4d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x65, 0x63, 0x12, 0x36,
	0x0a, 0x07, 0x74, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x74, 0x6d, 0x70, 0x44, 0x69, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x09, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x44, 0x69, 0x72, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wandb_settings_proto_rawDescOnce sync.Once
	file_wandb_settings_proto_rawDescData = file_wandb_settings_proto_rawDesc
)

func file_wandb_settings_proto_rawDescGZIP() []byte {
	file_wandb_settings_proto_rawDescOnce.Do(func() {
		file_wandb_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_wandb_settings_proto_rawDescData)
	})
	return file_wandb_settings_proto_rawDescData
}

var file_wandb_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_wandb_settings_proto_goTypes = []interface{}{
	(*ListStringValue)(nil),                     // 0: wandb_internal.ListStringValue
	(*MapStringKeyStringValue)(nil),             // 1: wandb_internal.MapStringKeyStringValue
	(*MapStringKeyMapStringKeyStringValue)(nil), // 2: wandb_internal.MapStringKeyMapStringKeyStringValue
	(*OpenMetricsFilters)(nil),                  // 3: wandb_internal.OpenMetricsFilters
	(*Settings)(nil),                            // 4: wandb_internal.Settings
	nil,                                         // 5: wandb_internal.MapStringKeyStringValue.ValueEntry
	nil,                                         // 6: wandb_internal.MapStringKeyMapStringKeyStringValue.ValueEntry
	(*wrapperspb.BoolValue)(nil),                // 7: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),               // 8: google.protobuf.Int32Value
	(*wrapperspb.StringValue)(nil),              // 9: google.protobuf.StringValue
	(*wrapperspb.DoubleValue)(nil),              // 10: google.protobuf.DoubleValue
}
var file_wandb_settings_proto_depIdxs = []int32{
	5,   // 0: wandb_internal.MapStringKeyStringValue.value:type_name -> wandb_internal.MapStringKeyStringValue.ValueEntry
	6,   // 1: wandb_internal.MapStringKeyMapStringKeyStringValue.value:type_name -> wandb_internal.MapStringKeyMapStringKeyStringValue.ValueEntry
	0,   // 2: wandb_internal.OpenMetricsFilters.sequence:type_name -> wandb_internal.ListStringValue
	2,   // 3: wandb_internal.OpenMetricsFilters.mapping:type_name -> wandb_internal.MapStringKeyMapStringKeyStringValue
	0,   // 4: wandb_internal.Settings._args:type_name -> wandb_internal.ListStringValue
	7,   // 5: wandb_internal.Settings._aws_lambda:type_name -> google.protobuf.BoolValue
	8,   // 6: wandb_internal.Settings._async_upload_concurrency_limit:type_name -> google.protobuf.Int32Value
	7,   // 7: wandb_internal.Settings._cli_only_mode:type_name -> google.protobuf.BoolValue
	7,   // 8: wandb_internal.Settings._colab:type_name -> google.protobuf.BoolValue
	9,   // 9: wandb_internal.Settings._cuda:type_name -> google.protobuf.StringValue
	7,   // 10: wandb_internal.Settings._disable_meta:type_name -> google.protobuf.BoolValue
	7,   // 11: wandb_internal.Settings._disable_service:type_name -> google.protobuf.BoolValue
	7,   // 12: wandb_internal.Settings._disable_setproctitle:type_name -> google.protobuf.BoolValue
	7,   // 13: wandb_internal.Settings._disable_stats:type_name -> google.protobuf.BoolValue
	7,   // 14: wandb_internal.Settings._disable_viewer:type_name -> google.protobuf.BoolValue
	7,   // 15: wandb_internal.Settings._except_exit:type_name -> google.protobuf.BoolValue
	9,   // 16: wandb_internal.Settings._executable:type_name -> google.protobuf.StringValue
	1,   // 17: wandb_internal.Settings._extra_http_headers:type_name -> wandb_internal.MapStringKeyStringValue
	10,  // 18: wandb_internal.Settings._file_stream_timeout_seconds:type_name -> google.protobuf.DoubleValue
	7,   // 19: wandb_internal.Settings._flow_control_custom:type_name -> google.protobuf.BoolValue
	7,   // 20: wandb_internal.Settings._flow_control_disabled:type_name -> google.protobuf.BoolValue
	10,  // 21: wandb_internal.Settings._internal_check_process:type_name -> google.protobuf.DoubleValue
	10,  // 22: wandb_internal.Settings._internal_queue_timeout:type_name -> google.protobuf.DoubleValue
	7,   // 23: wandb_internal.Settings._ipython:type_name -> google.protobuf.BoolValue
	7,   // 24: wandb_internal.Settings._jupyter:type_name -> google.protobuf.BoolValue
	9,   // 25: wandb_internal.Settings._jupyter_name:type_name -> google.protobuf.StringValue
	9,   // 26: wandb_internal.Settings._jupyter_path:type_name -> google.protobuf.StringValue
	9,   // 27: wandb_internal.Settings._jupyter_root:type_name -> google.protobuf.StringValue
	7,   // 28: wandb_internal.Settings._kaggle:type_name -> google.protobuf.BoolValue
	8,   // 29: wandb_internal.Settings._live_policy_rate_limit:type_name -> google.protobuf.Int32Value
	8,   // 30: wandb_internal.Settings._live_policy_wait_time:type_name -> google.protobuf.Int32Value
	8,   // 31: wandb_internal.Settings._log_level:type_name -> google.protobuf.Int32Value
	8,   // 32: wandb_internal.Settings._network_buffer:type_name -> google.protobuf.Int32Value
	7,   // 33: wandb_internal.Settings._noop:type_name -> google.protobuf.BoolValue
	7,   // 34: wandb_internal.Settings._notebook:type_name -> google.protobuf.BoolValue
	7,   // 35: wandb_internal.Settings._offline:type_name -> google.protobuf.BoolValue
	7,   // 36: wandb_internal.Settings._sync:type_name -> google.protobuf.BoolValue
	9,   // 37: wandb_internal.Settings._os:type_name -> google.protobuf.StringValue
	9,   // 38: wandb_internal.Settings._platform:type_name -> google.protobuf.StringValue
	9,   // 39: wandb_internal.Settings._python:type_name -> google.protobuf.StringValue
	9,   // 40: wandb_internal.Settings._runqueue_item_id:type_name -> google.protobuf.StringValue
	7,   // 41: wandb_internal.Settings._require_nexus:type_name -> google.protobuf.BoolValue
	7,   // 42: wandb_internal.Settings._save_requirements:type_name -> google.protobuf.BoolValue
	9,   // 43: wandb_internal.Settings._service_transport:type_name -> google.protobuf.StringValue
	10,  // 44: wandb_internal.Settings._service_wait:type_name -> google.protobuf.DoubleValue
	9,   // 45: wandb_internal.Settings._start_datetime:type_name -> google.protobuf.StringValue
	10,  // 46: wandb_internal.Settings._start_time:type_name -> google.protobuf.DoubleValue
	8,   // 47: wandb_internal.Settings._stats_pid:type_name -> google.protobuf.Int32Value
	10,  // 48: wandb_internal.Settings._stats_sample_rate_seconds:type_name -> google.protobuf.DoubleValue
	8,   // 49: wandb_internal.Settings._stats_samples_to_average:type_name -> google.protobuf.Int32Value
	7,   // 50: wandb_internal.Settings._stats_join_assets:type_name -> google.protobuf.BoolValue
	9,   // 51: wandb_internal.Settings._stats_neuron_monitor_config_path:type_name -> google.protobuf.StringValue
	1,   // 52: wandb_internal.Settings._stats_open_metrics_endpoints:type_name -> wandb_internal.MapStringKeyStringValue
	3,   // 53: wandb_internal.Settings._stats_open_metrics_filters:type_name -> wandb_internal.OpenMetricsFilters
	9,   // 54: wandb_internal.Settings._tmp_code_dir:type_name -> google.protobuf.StringValue
	9,   // 55: wandb_internal.Settings._tracelog:type_name -> google.protobuf.StringValue
	0,   // 56: wandb_internal.Settings._unsaved_keys:type_name -> wandb_internal.ListStringValue
	7,   // 57: wandb_internal.Settings._windows:type_name -> google.protobuf.BoolValue
	7,   // 58: wandb_internal.Settings.allow_val_change:type_name -> google.protobuf.BoolValue
	9,   // 59: wandb_internal.Settings.anonymous:type_name -> google.protobuf.StringValue
	9,   // 60: wandb_internal.Settings.api_key:type_name -> google.protobuf.StringValue
	1,   // 61: wandb_internal.Settings.azure_account_url_to_access_key:type_name -> wandb_internal.MapStringKeyStringValue
	9,   // 62: wandb_internal.Settings.base_url:type_name -> google.protobuf.StringValue
	9,   // 63: wandb_internal.Settings.code_dir:type_name -> google.protobuf.StringValue
	0,   // 64: wandb_internal.Settings.config_paths:type_name -> wandb_internal.ListStringValue
	9,   // 65: wandb_internal.Settings.console:type_name -> google.protobuf.StringValue
	9,   // 66: wandb_internal.Settings.deployment:type_name -> google.protobuf.StringValue
	7,   // 67: wandb_internal.Settings.disable_code:type_name -> google.protobuf.BoolValue
	7,   // 68: wandb_internal.Settings.disable_git:type_name -> google.protobuf.BoolValue
	7,   // 69: wandb_internal.Settings.disable_hints:type_name -> google.protobuf.BoolValue
	7,   // 70: wandb_internal.Settings.disable_job_creation:type_name -> google.protobuf.BoolValue
	7,   // 71: wandb_internal.Settings.disabled:type_name -> google.protobuf.BoolValue
	9,   // 72: wandb_internal.Settings.docker:type_name -> google.protobuf.StringValue
	9,   // 73: wandb_internal.Settings.email:type_name -> google.protobuf.StringValue
	9,   // 74: wandb_internal.Settings.entity:type_name -> google.protobuf.StringValue
	9,   // 75: wandb_internal.Settings.files_dir:type_name -> google.protobuf.StringValue
	7,   // 76: wandb_internal.Settings.force:type_name -> google.protobuf.BoolValue
	9,   // 77: wandb_internal.Settings.git_commit:type_name -> google.protobuf.StringValue
	9,   // 78: wandb_internal.Settings.git_remote:type_name -> google.protobuf.StringValue
	9,   // 79: wandb_internal.Settings.git_remote_url:type_name -> google.protobuf.StringValue
	9,   // 80: wandb_internal.Settings.git_root:type_name -> google.protobuf.StringValue
	8,   // 81: wandb_internal.Settings.heartbeat_seconds:type_name -> google.protobuf.Int32Value
	9,   // 82: wandb_internal.Settings.host:type_name -> google.protobuf.StringValue
	0,   // 83: wandb_internal.Settings.ignore_globs:type_name -> wandb_internal.ListStringValue
	10,  // 84: wandb_internal.Settings.init_timeout:type_name -> google.protobuf.DoubleValue
	7,   // 85: wandb_internal.Settings.is_local:type_name -> google.protobuf.BoolValue
	9,   // 86: wandb_internal.Settings.job_name:type_name -> google.protobuf.StringValue
	9,   // 87: wandb_internal.Settings.job_source:type_name -> google.protobuf.StringValue
	7,   // 88: wandb_internal.Settings.label_disable:type_name -> google.protobuf.BoolValue
	7,   // 89: wandb_internal.Settings.launch:type_name -> google.protobuf.BoolValue
	9,   // 90: wandb_internal.Settings.launch_config_path:type_name -> google.protobuf.StringValue
	9,   // 91: wandb_internal.Settings.log_dir:type_name -> google.protobuf.StringValue
	9,   // 92: wandb_internal.Settings.log_internal:type_name -> google.protobuf.StringValue
	9,   // 93: wandb_internal.Settings.log_symlink_internal:type_name -> google.protobuf.StringValue
	9,   // 94: wandb_internal.Settings.log_symlink_user:type_name -> google.protobuf.StringValue
	9,   // 95: wandb_internal.Settings.log_user:type_name -> google.protobuf.StringValue
	10,  // 96: wandb_internal.Settings.login_timeout:type_name -> google.protobuf.DoubleValue
	9,   // 97: wandb_internal.Settings.mode:type_name -> google.protobuf.StringValue
	9,   // 98: wandb_internal.Settings.notebook_name:type_name -> google.protobuf.StringValue
	9,   // 99: wandb_internal.Settings.problem:type_name -> google.protobuf.StringValue
	9,   // 100: wandb_internal.Settings.program:type_name -> google.protobuf.StringValue
	9,   // 101: wandb_internal.Settings.program_relpath:type_name -> google.protobuf.StringValue
	9,   // 102: wandb_internal.Settings.project:type_name -> google.protobuf.StringValue
	9,   // 103: wandb_internal.Settings.project_url:type_name -> google.protobuf.StringValue
	7,   // 104: wandb_internal.Settings.quiet:type_name -> google.protobuf.BoolValue
	7,   // 105: wandb_internal.Settings.reinit:type_name -> google.protobuf.BoolValue
	7,   // 106: wandb_internal.Settings.relogin:type_name -> google.protobuf.BoolValue
	9,   // 107: wandb_internal.Settings.resume:type_name -> google.protobuf.StringValue
	9,   // 108: wandb_internal.Settings.resume_fname:type_name -> google.protobuf.StringValue
	7,   // 109: wandb_internal.Settings.resumed:type_name -> google.protobuf.BoolValue
	9,   // 110: wandb_internal.Settings.root_dir:type_name -> google.protobuf.StringValue
	9,   // 111: wandb_internal.Settings.run_group:type_name -> google.protobuf.StringValue
	9,   // 112: wandb_internal.Settings.run_id:type_name -> google.protobuf.StringValue
	9,   // 113: wandb_internal.Settings.run_job_type:type_name -> google.protobuf.StringValue
	9,   // 114: wandb_internal.Settings.run_mode:type_name -> google.protobuf.StringValue
	9,   // 115: wandb_internal.Settings.run_name:type_name -> google.protobuf.StringValue
	9,   // 116: wandb_internal.Settings.run_notes:type_name -> google.protobuf.StringValue
	0,   // 117: wandb_internal.Settings.run_tags:type_name -> wandb_internal.ListStringValue
	9,   // 118: wandb_internal.Settings.run_url:type_name -> google.protobuf.StringValue
	7,   // 119: wandb_internal.Settings.sagemaker_disable:type_name -> google.protobuf.BoolValue
	7,   // 120: wandb_internal.Settings.save_code:type_name -> google.protobuf.BoolValue
	9,   // 121: wandb_internal.Settings.settings_system:type_name -> google.protobuf.StringValue
	9,   // 122: wandb_internal.Settings.settings_workspace:type_name -> google.protobuf.StringValue
	7,   // 123: wandb_internal.Settings.show_colors:type_name -> google.protobuf.BoolValue
	7,   // 124: wandb_internal.Settings.show_emoji:type_name -> google.protobuf.BoolValue
	7,   // 125: wandb_internal.Settings.show_errors:type_name -> google.protobuf.BoolValue
	7,   // 126: wandb_internal.Settings.show_info:type_name -> google.protobuf.BoolValue
	7,   // 127: wandb_internal.Settings.show_warnings:type_name -> google.protobuf.BoolValue
	7,   // 128: wandb_internal.Settings.silent:type_name -> google.protobuf.BoolValue
	9,   // 129: wandb_internal.Settings.start_method:type_name -> google.protobuf.StringValue
	7,   // 130: wandb_internal.Settings.strict:type_name -> google.protobuf.BoolValue
	8,   // 131: wandb_internal.Settings.summary_errors:type_name -> google.protobuf.Int32Value
	8,   // 132: wandb_internal.Settings.summary_timeout:type_name -> google.protobuf.Int32Value
	8,   // 133: wandb_internal.Settings.summary_warnings:type_name -> google.protobuf.Int32Value
	9,   // 134: wandb_internal.Settings.sweep_id:type_name -> google.protobuf.StringValue
	9,   // 135: wandb_internal.Settings.sweep_param_path:type_name -> google.protobuf.StringValue
	9,   // 136: wandb_internal.Settings.sweep_url:type_name -> google.protobuf.StringValue
	7,   // 137: wandb_internal.Settings.symlink:type_name -> google.protobuf.BoolValue
	9,   // 138: wandb_internal.Settings.sync_dir:type_name -> google.protobuf.StringValue
	9,   // 139: wandb_internal.Settings.sync_file:type_name -> google.protobuf.StringValue
	9,   // 140: wandb_internal.Settings.sync_symlink_latest:type_name -> google.protobuf.StringValue
	8,   // 141: wandb_internal.Settings.system_sample:type_name -> google.protobuf.Int32Value
	8,   // 142: wandb_internal.Settings.system_sample_seconds:type_name -> google.protobuf.Int32Value
	7,   // 143: wandb_internal.Settings.table_raise_on_max_row_limit_exceeded:type_name -> google.protobuf.BoolValue
	9,   // 144: wandb_internal.Settings.timespec:type_name -> google.protobuf.StringValue
	9,   // 145: wandb_internal.Settings.tmp_dir:type_name -> google.protobuf.StringValue
	9,   // 146: wandb_internal.Settings.username:type_name -> google.protobuf.StringValue
	9,   // 147: wandb_internal.Settings.wandb_dir:type_name -> google.protobuf.StringValue
	1,   // 148: wandb_internal.MapStringKeyMapStringKeyStringValue.ValueEntry.value:type_name -> wandb_internal.MapStringKeyStringValue
	149, // [149:149] is the sub-list for method output_type
	149, // [149:149] is the sub-list for method input_type
	149, // [149:149] is the sub-list for extension type_name
	149, // [149:149] is the sub-list for extension extendee
	0,   // [0:149] is the sub-list for field type_name
}

func init() { file_wandb_settings_proto_init() }
func file_wandb_settings_proto_init() {
	if File_wandb_settings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wandb_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_settings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringKeyStringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_settings_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringKeyMapStringKeyStringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_settings_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenMetricsFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_settings_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wandb_settings_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*OpenMetricsFilters_Sequence)(nil),
		(*OpenMetricsFilters_Mapping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wandb_settings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wandb_settings_proto_goTypes,
		DependencyIndexes: file_wandb_settings_proto_depIdxs,
		MessageInfos:      file_wandb_settings_proto_msgTypes,
	}.Build()
	File_wandb_settings_proto = out.File
	file_wandb_settings_proto_rawDesc = nil
	file_wandb_settings_proto_goTypes = nil
	file_wandb_settings_proto_depIdxs = nil
}
