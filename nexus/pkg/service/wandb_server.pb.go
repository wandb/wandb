// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.4
// source: wandb_server.proto

package service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerShutdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XInfo *XRecordInfo `protobuf:"bytes,200,opt,name=_info,json=Info,proto3" json:"_info,omitempty"`
}

func (x *ServerShutdownRequest) Reset() {
	*x = ServerShutdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerShutdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerShutdownRequest) ProtoMessage() {}

func (x *ServerShutdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerShutdownRequest.ProtoReflect.Descriptor instead.
func (*ServerShutdownRequest) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{0}
}

func (x *ServerShutdownRequest) GetXInfo() *XRecordInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

type ServerShutdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerShutdownResponse) Reset() {
	*x = ServerShutdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerShutdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerShutdownResponse) ProtoMessage() {}

func (x *ServerShutdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerShutdownResponse.ProtoReflect.Descriptor instead.
func (*ServerShutdownResponse) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{1}
}

type ServerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XInfo *XRecordInfo `protobuf:"bytes,200,opt,name=_info,json=Info,proto3" json:"_info,omitempty"`
}

func (x *ServerStatusRequest) Reset() {
	*x = ServerStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusRequest) ProtoMessage() {}

func (x *ServerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusRequest.ProtoReflect.Descriptor instead.
func (*ServerStatusRequest) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{2}
}

func (x *ServerStatusRequest) GetXInfo() *XRecordInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

type ServerStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerStatusResponse) Reset() {
	*x = ServerStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusResponse) ProtoMessage() {}

func (x *ServerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusResponse.ProtoReflect.Descriptor instead.
func (*ServerStatusResponse) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{3}
}

type ServerInformInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *Settings    `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	XInfo    *XRecordInfo `protobuf:"bytes,200,opt,name=_info,json=Info,proto3" json:"_info,omitempty"`
}

func (x *ServerInformInitRequest) Reset() {
	*x = ServerInformInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformInitRequest) ProtoMessage() {}

func (x *ServerInformInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformInitRequest.ProtoReflect.Descriptor instead.
func (*ServerInformInitRequest) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{4}
}

func (x *ServerInformInitRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ServerInformInitRequest) GetXInfo() *XRecordInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

type ServerInformInitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerInformInitResponse) Reset() {
	*x = ServerInformInitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformInitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformInitResponse) ProtoMessage() {}

func (x *ServerInformInitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformInitResponse.ProtoReflect.Descriptor instead.
func (*ServerInformInitResponse) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{5}
}

type ServerInformStartRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *Settings    `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	XInfo    *XRecordInfo `protobuf:"bytes,200,opt,name=_info,json=Info,proto3" json:"_info,omitempty"`
}

func (x *ServerInformStartRequest) Reset() {
	*x = ServerInformStartRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformStartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformStartRequest) ProtoMessage() {}

func (x *ServerInformStartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformStartRequest.ProtoReflect.Descriptor instead.
func (*ServerInformStartRequest) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{6}
}

func (x *ServerInformStartRequest) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ServerInformStartRequest) GetXInfo() *XRecordInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

type ServerInformStartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerInformStartResponse) Reset() {
	*x = ServerInformStartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformStartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformStartResponse) ProtoMessage() {}

func (x *ServerInformStartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformStartResponse.ProtoReflect.Descriptor instead.
func (*ServerInformStartResponse) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{7}
}

type ServerInformFinishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XInfo *XRecordInfo `protobuf:"bytes,200,opt,name=_info,json=Info,proto3" json:"_info,omitempty"`
}

func (x *ServerInformFinishRequest) Reset() {
	*x = ServerInformFinishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformFinishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformFinishRequest) ProtoMessage() {}

func (x *ServerInformFinishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformFinishRequest.ProtoReflect.Descriptor instead.
func (*ServerInformFinishRequest) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{8}
}

func (x *ServerInformFinishRequest) GetXInfo() *XRecordInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

type ServerInformFinishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerInformFinishResponse) Reset() {
	*x = ServerInformFinishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformFinishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformFinishResponse) ProtoMessage() {}

func (x *ServerInformFinishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformFinishResponse.ProtoReflect.Descriptor instead.
func (*ServerInformFinishResponse) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{9}
}

type ServerInformAttachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XInfo *XRecordInfo `protobuf:"bytes,200,opt,name=_info,json=Info,proto3" json:"_info,omitempty"`
}

func (x *ServerInformAttachRequest) Reset() {
	*x = ServerInformAttachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformAttachRequest) ProtoMessage() {}

func (x *ServerInformAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformAttachRequest.ProtoReflect.Descriptor instead.
func (*ServerInformAttachRequest) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{10}
}

func (x *ServerInformAttachRequest) GetXInfo() *XRecordInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

type ServerInformAttachResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *Settings    `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	XInfo    *XRecordInfo `protobuf:"bytes,200,opt,name=_info,json=Info,proto3" json:"_info,omitempty"`
}

func (x *ServerInformAttachResponse) Reset() {
	*x = ServerInformAttachResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformAttachResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformAttachResponse) ProtoMessage() {}

func (x *ServerInformAttachResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformAttachResponse.ProtoReflect.Descriptor instead.
func (*ServerInformAttachResponse) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{11}
}

func (x *ServerInformAttachResponse) GetSettings() *Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ServerInformAttachResponse) GetXInfo() *XRecordInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

type ServerInformDetachRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XInfo *XRecordInfo `protobuf:"bytes,200,opt,name=_info,json=Info,proto3" json:"_info,omitempty"`
}

func (x *ServerInformDetachRequest) Reset() {
	*x = ServerInformDetachRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformDetachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformDetachRequest) ProtoMessage() {}

func (x *ServerInformDetachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformDetachRequest.ProtoReflect.Descriptor instead.
func (*ServerInformDetachRequest) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{12}
}

func (x *ServerInformDetachRequest) GetXInfo() *XRecordInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

type ServerInformDetachResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerInformDetachResponse) Reset() {
	*x = ServerInformDetachResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformDetachResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformDetachResponse) ProtoMessage() {}

func (x *ServerInformDetachResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformDetachResponse.ProtoReflect.Descriptor instead.
func (*ServerInformDetachResponse) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{13}
}

type ServerInformTeardownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode int32        `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	XInfo    *XRecordInfo `protobuf:"bytes,200,opt,name=_info,json=Info,proto3" json:"_info,omitempty"`
}

func (x *ServerInformTeardownRequest) Reset() {
	*x = ServerInformTeardownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformTeardownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformTeardownRequest) ProtoMessage() {}

func (x *ServerInformTeardownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformTeardownRequest.ProtoReflect.Descriptor instead.
func (*ServerInformTeardownRequest) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{14}
}

func (x *ServerInformTeardownRequest) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ServerInformTeardownRequest) GetXInfo() *XRecordInfo {
	if x != nil {
		return x.XInfo
	}
	return nil
}

type ServerInformTeardownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerInformTeardownResponse) Reset() {
	*x = ServerInformTeardownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInformTeardownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInformTeardownResponse) ProtoMessage() {}

func (x *ServerInformTeardownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInformTeardownResponse.ProtoReflect.Descriptor instead.
func (*ServerInformTeardownResponse) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{15}
}

type ServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ServerRequestType:
	//
	//	*ServerRequest_RecordPublish
	//	*ServerRequest_RecordCommunicate
	//	*ServerRequest_InformInit
	//	*ServerRequest_InformFinish
	//	*ServerRequest_InformAttach
	//	*ServerRequest_InformDetach
	//	*ServerRequest_InformTeardown
	//	*ServerRequest_InformStart
	ServerRequestType isServerRequest_ServerRequestType `protobuf_oneof:"server_request_type"`
}

func (x *ServerRequest) Reset() {
	*x = ServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerRequest) ProtoMessage() {}

func (x *ServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerRequest.ProtoReflect.Descriptor instead.
func (*ServerRequest) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{16}
}

func (m *ServerRequest) GetServerRequestType() isServerRequest_ServerRequestType {
	if m != nil {
		return m.ServerRequestType
	}
	return nil
}

func (x *ServerRequest) GetRecordPublish() *Record {
	if x, ok := x.GetServerRequestType().(*ServerRequest_RecordPublish); ok {
		return x.RecordPublish
	}
	return nil
}

func (x *ServerRequest) GetRecordCommunicate() *Record {
	if x, ok := x.GetServerRequestType().(*ServerRequest_RecordCommunicate); ok {
		return x.RecordCommunicate
	}
	return nil
}

func (x *ServerRequest) GetInformInit() *ServerInformInitRequest {
	if x, ok := x.GetServerRequestType().(*ServerRequest_InformInit); ok {
		return x.InformInit
	}
	return nil
}

func (x *ServerRequest) GetInformFinish() *ServerInformFinishRequest {
	if x, ok := x.GetServerRequestType().(*ServerRequest_InformFinish); ok {
		return x.InformFinish
	}
	return nil
}

func (x *ServerRequest) GetInformAttach() *ServerInformAttachRequest {
	if x, ok := x.GetServerRequestType().(*ServerRequest_InformAttach); ok {
		return x.InformAttach
	}
	return nil
}

func (x *ServerRequest) GetInformDetach() *ServerInformDetachRequest {
	if x, ok := x.GetServerRequestType().(*ServerRequest_InformDetach); ok {
		return x.InformDetach
	}
	return nil
}

func (x *ServerRequest) GetInformTeardown() *ServerInformTeardownRequest {
	if x, ok := x.GetServerRequestType().(*ServerRequest_InformTeardown); ok {
		return x.InformTeardown
	}
	return nil
}

func (x *ServerRequest) GetInformStart() *ServerInformStartRequest {
	if x, ok := x.GetServerRequestType().(*ServerRequest_InformStart); ok {
		return x.InformStart
	}
	return nil
}

type isServerRequest_ServerRequestType interface {
	isServerRequest_ServerRequestType()
}

type ServerRequest_RecordPublish struct {
	RecordPublish *Record `protobuf:"bytes,1,opt,name=record_publish,json=recordPublish,proto3,oneof"`
}

type ServerRequest_RecordCommunicate struct {
	RecordCommunicate *Record `protobuf:"bytes,2,opt,name=record_communicate,json=recordCommunicate,proto3,oneof"`
}

type ServerRequest_InformInit struct {
	InformInit *ServerInformInitRequest `protobuf:"bytes,3,opt,name=inform_init,json=informInit,proto3,oneof"`
}

type ServerRequest_InformFinish struct {
	InformFinish *ServerInformFinishRequest `protobuf:"bytes,4,opt,name=inform_finish,json=informFinish,proto3,oneof"`
}

type ServerRequest_InformAttach struct {
	InformAttach *ServerInformAttachRequest `protobuf:"bytes,5,opt,name=inform_attach,json=informAttach,proto3,oneof"`
}

type ServerRequest_InformDetach struct {
	InformDetach *ServerInformDetachRequest `protobuf:"bytes,6,opt,name=inform_detach,json=informDetach,proto3,oneof"`
}

type ServerRequest_InformTeardown struct {
	InformTeardown *ServerInformTeardownRequest `protobuf:"bytes,7,opt,name=inform_teardown,json=informTeardown,proto3,oneof"`
}

type ServerRequest_InformStart struct {
	InformStart *ServerInformStartRequest `protobuf:"bytes,8,opt,name=inform_start,json=informStart,proto3,oneof"`
}

func (*ServerRequest_RecordPublish) isServerRequest_ServerRequestType() {}

func (*ServerRequest_RecordCommunicate) isServerRequest_ServerRequestType() {}

func (*ServerRequest_InformInit) isServerRequest_ServerRequestType() {}

func (*ServerRequest_InformFinish) isServerRequest_ServerRequestType() {}

func (*ServerRequest_InformAttach) isServerRequest_ServerRequestType() {}

func (*ServerRequest_InformDetach) isServerRequest_ServerRequestType() {}

func (*ServerRequest_InformTeardown) isServerRequest_ServerRequestType() {}

func (*ServerRequest_InformStart) isServerRequest_ServerRequestType() {}

type ServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ServerResponseType:
	//
	//	*ServerResponse_ResultCommunicate
	//	*ServerResponse_InformInitResponse
	//	*ServerResponse_InformFinishResponse
	//	*ServerResponse_InformAttachResponse
	//	*ServerResponse_InformDetachResponse
	//	*ServerResponse_InformTeardownResponse
	//	*ServerResponse_InformStartResponse
	ServerResponseType isServerResponse_ServerResponseType `protobuf_oneof:"server_response_type"`
}

func (x *ServerResponse) Reset() {
	*x = ServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerResponse) ProtoMessage() {}

func (x *ServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerResponse.ProtoReflect.Descriptor instead.
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return file_wandb_server_proto_rawDescGZIP(), []int{17}
}

func (m *ServerResponse) GetServerResponseType() isServerResponse_ServerResponseType {
	if m != nil {
		return m.ServerResponseType
	}
	return nil
}

func (x *ServerResponse) GetResultCommunicate() *Result {
	if x, ok := x.GetServerResponseType().(*ServerResponse_ResultCommunicate); ok {
		return x.ResultCommunicate
	}
	return nil
}

func (x *ServerResponse) GetInformInitResponse() *ServerInformInitResponse {
	if x, ok := x.GetServerResponseType().(*ServerResponse_InformInitResponse); ok {
		return x.InformInitResponse
	}
	return nil
}

func (x *ServerResponse) GetInformFinishResponse() *ServerInformFinishResponse {
	if x, ok := x.GetServerResponseType().(*ServerResponse_InformFinishResponse); ok {
		return x.InformFinishResponse
	}
	return nil
}

func (x *ServerResponse) GetInformAttachResponse() *ServerInformAttachResponse {
	if x, ok := x.GetServerResponseType().(*ServerResponse_InformAttachResponse); ok {
		return x.InformAttachResponse
	}
	return nil
}

func (x *ServerResponse) GetInformDetachResponse() *ServerInformDetachResponse {
	if x, ok := x.GetServerResponseType().(*ServerResponse_InformDetachResponse); ok {
		return x.InformDetachResponse
	}
	return nil
}

func (x *ServerResponse) GetInformTeardownResponse() *ServerInformTeardownResponse {
	if x, ok := x.GetServerResponseType().(*ServerResponse_InformTeardownResponse); ok {
		return x.InformTeardownResponse
	}
	return nil
}

func (x *ServerResponse) GetInformStartResponse() *ServerInformStartResponse {
	if x, ok := x.GetServerResponseType().(*ServerResponse_InformStartResponse); ok {
		return x.InformStartResponse
	}
	return nil
}

type isServerResponse_ServerResponseType interface {
	isServerResponse_ServerResponseType()
}

type ServerResponse_ResultCommunicate struct {
	ResultCommunicate *Result `protobuf:"bytes,2,opt,name=result_communicate,json=resultCommunicate,proto3,oneof"`
}

type ServerResponse_InformInitResponse struct {
	InformInitResponse *ServerInformInitResponse `protobuf:"bytes,3,opt,name=inform_init_response,json=informInitResponse,proto3,oneof"`
}

type ServerResponse_InformFinishResponse struct {
	InformFinishResponse *ServerInformFinishResponse `protobuf:"bytes,4,opt,name=inform_finish_response,json=informFinishResponse,proto3,oneof"`
}

type ServerResponse_InformAttachResponse struct {
	InformAttachResponse *ServerInformAttachResponse `protobuf:"bytes,5,opt,name=inform_attach_response,json=informAttachResponse,proto3,oneof"`
}

type ServerResponse_InformDetachResponse struct {
	InformDetachResponse *ServerInformDetachResponse `protobuf:"bytes,6,opt,name=inform_detach_response,json=informDetachResponse,proto3,oneof"`
}

type ServerResponse_InformTeardownResponse struct {
	InformTeardownResponse *ServerInformTeardownResponse `protobuf:"bytes,7,opt,name=inform_teardown_response,json=informTeardownResponse,proto3,oneof"`
}

type ServerResponse_InformStartResponse struct {
	InformStartResponse *ServerInformStartResponse `protobuf:"bytes,8,opt,name=inform_start_response,json=informStartResponse,proto3,oneof"`
}

func (*ServerResponse_ResultCommunicate) isServerResponse_ServerResponseType() {}

func (*ServerResponse_InformInitResponse) isServerResponse_ServerResponseType() {}

func (*ServerResponse_InformFinishResponse) isServerResponse_ServerResponseType() {}

func (*ServerResponse_InformAttachResponse) isServerResponse_ServerResponseType() {}

func (*ServerResponse_InformDetachResponse) isServerResponse_ServerResponseType() {}

func (*ServerResponse_InformTeardownResponse) isServerResponse_ServerResponseType() {}

func (*ServerResponse_InformStartResponse) isServerResponse_ServerResponseType() {}

var File_wandb_server_proto protoreflect.FileDescriptor

var file_wandb_server_proto_rawDesc = []byte{
	0x0a, 0x12, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x1a, 0x10, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x15, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x48, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x19, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x19, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x0a, 0x1b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x99, 0x05, 0x0a, 0x0d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x47, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x48,
	0x00, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74,
	0x12, 0x50, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x12, 0x50, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x12, 0x50, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x56, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x61,
	0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x4d,
	0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x15, 0x0a,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xc6, 0x05, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x5c, 0x0a, 0x14, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x16, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x62, 0x0a, 0x16, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x16, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x18, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x77,
	0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x94, 0x1c,
	0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x49, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x06, 0x54, 0x42, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x18, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x54, 0x42, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x18, 0x2e, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x42, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x25, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x12, 0x1f,
	0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x21, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x08, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x09, 0x52,
	0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x77, 0x61, 0x6e,
	0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x45, 0x78, 0x69, 0x74, 0x12, 0x1d, 0x2e, 0x77, 0x61, 0x6e,
	0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x45,
	0x78, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x45, 0x78,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0d, 0x52, 0x75,
	0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e,
	0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x1a, 0x23, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x72, 0x65, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x1c, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x25, 0x2e,
	0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x1d, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x07, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x1d, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x1d, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x46, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6e,
	0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x05, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1b,
	0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1c, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x61, 0x77, 0x12, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x61, 0x77, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x61, 0x77, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x1b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1b, 0x2e,
	0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x08,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1e, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0c, 0x4c, 0x69,
	0x6e, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x77, 0x61, 0x6e,
	0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x22,
	0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x21, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x55, 0x73, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x07, 0x4a,
	0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x23, 0x2e, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x23, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1d, 0x2e,
	0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77,
	0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52,
	0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x05, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x12, 0x1d, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x77,
	0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x25, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x69,
	0x74, 0x12, 0x27, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x77, 0x61, 0x6e,
	0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x2e, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x29, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6d, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0x29, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x73, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2b, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wandb_server_proto_rawDescOnce sync.Once
	file_wandb_server_proto_rawDescData = file_wandb_server_proto_rawDesc
)

func file_wandb_server_proto_rawDescGZIP() []byte {
	file_wandb_server_proto_rawDescOnce.Do(func() {
		file_wandb_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_wandb_server_proto_rawDescData)
	})
	return file_wandb_server_proto_rawDescData
}

var file_wandb_server_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_wandb_server_proto_goTypes = []interface{}{
	(*ServerShutdownRequest)(nil),        // 0: wandb_internal.ServerShutdownRequest
	(*ServerShutdownResponse)(nil),       // 1: wandb_internal.ServerShutdownResponse
	(*ServerStatusRequest)(nil),          // 2: wandb_internal.ServerStatusRequest
	(*ServerStatusResponse)(nil),         // 3: wandb_internal.ServerStatusResponse
	(*ServerInformInitRequest)(nil),      // 4: wandb_internal.ServerInformInitRequest
	(*ServerInformInitResponse)(nil),     // 5: wandb_internal.ServerInformInitResponse
	(*ServerInformStartRequest)(nil),     // 6: wandb_internal.ServerInformStartRequest
	(*ServerInformStartResponse)(nil),    // 7: wandb_internal.ServerInformStartResponse
	(*ServerInformFinishRequest)(nil),    // 8: wandb_internal.ServerInformFinishRequest
	(*ServerInformFinishResponse)(nil),   // 9: wandb_internal.ServerInformFinishResponse
	(*ServerInformAttachRequest)(nil),    // 10: wandb_internal.ServerInformAttachRequest
	(*ServerInformAttachResponse)(nil),   // 11: wandb_internal.ServerInformAttachResponse
	(*ServerInformDetachRequest)(nil),    // 12: wandb_internal.ServerInformDetachRequest
	(*ServerInformDetachResponse)(nil),   // 13: wandb_internal.ServerInformDetachResponse
	(*ServerInformTeardownRequest)(nil),  // 14: wandb_internal.ServerInformTeardownRequest
	(*ServerInformTeardownResponse)(nil), // 15: wandb_internal.ServerInformTeardownResponse
	(*ServerRequest)(nil),                // 16: wandb_internal.ServerRequest
	(*ServerResponse)(nil),               // 17: wandb_internal.ServerResponse
	(*XRecordInfo)(nil),                  // 18: wandb_internal._RecordInfo
	(*Settings)(nil),                     // 19: wandb_internal.Settings
	(*Record)(nil),                       // 20: wandb_internal.Record
	(*Result)(nil),                       // 21: wandb_internal.Result
	(*RunRecord)(nil),                    // 22: wandb_internal.RunRecord
	(*AttachRequest)(nil),                // 23: wandb_internal.AttachRequest
	(*TBRecord)(nil),                     // 24: wandb_internal.TBRecord
	(*RunStartRequest)(nil),              // 25: wandb_internal.RunStartRequest
	(*GetSummaryRequest)(nil),            // 26: wandb_internal.GetSummaryRequest
	(*SampledHistoryRequest)(nil),        // 27: wandb_internal.SampledHistoryRequest
	(*PollExitRequest)(nil),              // 28: wandb_internal.PollExitRequest
	(*ServerInfoRequest)(nil),            // 29: wandb_internal.ServerInfoRequest
	(*ShutdownRequest)(nil),              // 30: wandb_internal.ShutdownRequest
	(*RunStatusRequest)(nil),             // 31: wandb_internal.RunStatusRequest
	(*RunExitRecord)(nil),                // 32: wandb_internal.RunExitRecord
	(*RunPreemptingRecord)(nil),          // 33: wandb_internal.RunPreemptingRecord
	(*MetricRecord)(nil),                 // 34: wandb_internal.MetricRecord
	(*PartialHistoryRequest)(nil),        // 35: wandb_internal.PartialHistoryRequest
	(*HistoryRecord)(nil),                // 36: wandb_internal.HistoryRecord
	(*SummaryRecord)(nil),                // 37: wandb_internal.SummaryRecord
	(*ConfigRecord)(nil),                 // 38: wandb_internal.ConfigRecord
	(*FilesRecord)(nil),                  // 39: wandb_internal.FilesRecord
	(*OutputRecord)(nil),                 // 40: wandb_internal.OutputRecord
	(*OutputRawRecord)(nil),              // 41: wandb_internal.OutputRawRecord
	(*TelemetryRecord)(nil),              // 42: wandb_internal.TelemetryRecord
	(*AlertRecord)(nil),                  // 43: wandb_internal.AlertRecord
	(*ArtifactRecord)(nil),               // 44: wandb_internal.ArtifactRecord
	(*LinkArtifactRecord)(nil),           // 45: wandb_internal.LinkArtifactRecord
	(*UseArtifactRecord)(nil),            // 46: wandb_internal.UseArtifactRecord
	(*JobInfoRequest)(nil),               // 47: wandb_internal.JobInfoRequest
	(*ArtifactSendRequest)(nil),          // 48: wandb_internal.ArtifactSendRequest
	(*ArtifactPollRequest)(nil),          // 49: wandb_internal.ArtifactPollRequest
	(*CancelRequest)(nil),                // 50: wandb_internal.CancelRequest
	(*KeepaliveRequest)(nil),             // 51: wandb_internal.KeepaliveRequest
	(*CheckVersionRequest)(nil),          // 52: wandb_internal.CheckVersionRequest
	(*PauseRequest)(nil),                 // 53: wandb_internal.PauseRequest
	(*ResumeRequest)(nil),                // 54: wandb_internal.ResumeRequest
	(*StatusRequest)(nil),                // 55: wandb_internal.StatusRequest
	(*RunUpdateResult)(nil),              // 56: wandb_internal.RunUpdateResult
	(*AttachResponse)(nil),               // 57: wandb_internal.AttachResponse
	(*TBResult)(nil),                     // 58: wandb_internal.TBResult
	(*RunStartResponse)(nil),             // 59: wandb_internal.RunStartResponse
	(*GetSummaryResponse)(nil),           // 60: wandb_internal.GetSummaryResponse
	(*SampledHistoryResponse)(nil),       // 61: wandb_internal.SampledHistoryResponse
	(*PollExitResponse)(nil),             // 62: wandb_internal.PollExitResponse
	(*ServerInfoResponse)(nil),           // 63: wandb_internal.ServerInfoResponse
	(*ShutdownResponse)(nil),             // 64: wandb_internal.ShutdownResponse
	(*RunStatusResponse)(nil),            // 65: wandb_internal.RunStatusResponse
	(*RunExitResult)(nil),                // 66: wandb_internal.RunExitResult
	(*RunPreemptingResult)(nil),          // 67: wandb_internal.RunPreemptingResult
	(*MetricResult)(nil),                 // 68: wandb_internal.MetricResult
	(*PartialHistoryResponse)(nil),       // 69: wandb_internal.PartialHistoryResponse
	(*HistoryResult)(nil),                // 70: wandb_internal.HistoryResult
	(*SummaryResult)(nil),                // 71: wandb_internal.SummaryResult
	(*ConfigResult)(nil),                 // 72: wandb_internal.ConfigResult
	(*FilesResult)(nil),                  // 73: wandb_internal.FilesResult
	(*OutputResult)(nil),                 // 74: wandb_internal.OutputResult
	(*OutputRawResult)(nil),              // 75: wandb_internal.OutputRawResult
	(*TelemetryResult)(nil),              // 76: wandb_internal.TelemetryResult
	(*AlertResult)(nil),                  // 77: wandb_internal.AlertResult
	(*ArtifactResult)(nil),               // 78: wandb_internal.ArtifactResult
	(*LinkArtifactResult)(nil),           // 79: wandb_internal.LinkArtifactResult
	(*UseArtifactResult)(nil),            // 80: wandb_internal.UseArtifactResult
	(*JobInfoResponse)(nil),              // 81: wandb_internal.JobInfoResponse
	(*ArtifactSendResponse)(nil),         // 82: wandb_internal.ArtifactSendResponse
	(*ArtifactPollResponse)(nil),         // 83: wandb_internal.ArtifactPollResponse
	(*CancelResponse)(nil),               // 84: wandb_internal.CancelResponse
	(*KeepaliveResponse)(nil),            // 85: wandb_internal.KeepaliveResponse
	(*CheckVersionResponse)(nil),         // 86: wandb_internal.CheckVersionResponse
	(*PauseResponse)(nil),                // 87: wandb_internal.PauseResponse
	(*ResumeResponse)(nil),               // 88: wandb_internal.ResumeResponse
	(*StatusResponse)(nil),               // 89: wandb_internal.StatusResponse
}
var file_wandb_server_proto_depIdxs = []int32{
	18, // 0: wandb_internal.ServerShutdownRequest._info:type_name -> wandb_internal._RecordInfo
	18, // 1: wandb_internal.ServerStatusRequest._info:type_name -> wandb_internal._RecordInfo
	19, // 2: wandb_internal.ServerInformInitRequest.settings:type_name -> wandb_internal.Settings
	18, // 3: wandb_internal.ServerInformInitRequest._info:type_name -> wandb_internal._RecordInfo
	19, // 4: wandb_internal.ServerInformStartRequest.settings:type_name -> wandb_internal.Settings
	18, // 5: wandb_internal.ServerInformStartRequest._info:type_name -> wandb_internal._RecordInfo
	18, // 6: wandb_internal.ServerInformFinishRequest._info:type_name -> wandb_internal._RecordInfo
	18, // 7: wandb_internal.ServerInformAttachRequest._info:type_name -> wandb_internal._RecordInfo
	19, // 8: wandb_internal.ServerInformAttachResponse.settings:type_name -> wandb_internal.Settings
	18, // 9: wandb_internal.ServerInformAttachResponse._info:type_name -> wandb_internal._RecordInfo
	18, // 10: wandb_internal.ServerInformDetachRequest._info:type_name -> wandb_internal._RecordInfo
	18, // 11: wandb_internal.ServerInformTeardownRequest._info:type_name -> wandb_internal._RecordInfo
	20, // 12: wandb_internal.ServerRequest.record_publish:type_name -> wandb_internal.Record
	20, // 13: wandb_internal.ServerRequest.record_communicate:type_name -> wandb_internal.Record
	4,  // 14: wandb_internal.ServerRequest.inform_init:type_name -> wandb_internal.ServerInformInitRequest
	8,  // 15: wandb_internal.ServerRequest.inform_finish:type_name -> wandb_internal.ServerInformFinishRequest
	10, // 16: wandb_internal.ServerRequest.inform_attach:type_name -> wandb_internal.ServerInformAttachRequest
	12, // 17: wandb_internal.ServerRequest.inform_detach:type_name -> wandb_internal.ServerInformDetachRequest
	14, // 18: wandb_internal.ServerRequest.inform_teardown:type_name -> wandb_internal.ServerInformTeardownRequest
	6,  // 19: wandb_internal.ServerRequest.inform_start:type_name -> wandb_internal.ServerInformStartRequest
	21, // 20: wandb_internal.ServerResponse.result_communicate:type_name -> wandb_internal.Result
	5,  // 21: wandb_internal.ServerResponse.inform_init_response:type_name -> wandb_internal.ServerInformInitResponse
	9,  // 22: wandb_internal.ServerResponse.inform_finish_response:type_name -> wandb_internal.ServerInformFinishResponse
	11, // 23: wandb_internal.ServerResponse.inform_attach_response:type_name -> wandb_internal.ServerInformAttachResponse
	13, // 24: wandb_internal.ServerResponse.inform_detach_response:type_name -> wandb_internal.ServerInformDetachResponse
	15, // 25: wandb_internal.ServerResponse.inform_teardown_response:type_name -> wandb_internal.ServerInformTeardownResponse
	7,  // 26: wandb_internal.ServerResponse.inform_start_response:type_name -> wandb_internal.ServerInformStartResponse
	22, // 27: wandb_internal.InternalService.RunUpdate:input_type -> wandb_internal.RunRecord
	23, // 28: wandb_internal.InternalService.Attach:input_type -> wandb_internal.AttachRequest
	24, // 29: wandb_internal.InternalService.TBSend:input_type -> wandb_internal.TBRecord
	25, // 30: wandb_internal.InternalService.RunStart:input_type -> wandb_internal.RunStartRequest
	26, // 31: wandb_internal.InternalService.GetSummary:input_type -> wandb_internal.GetSummaryRequest
	27, // 32: wandb_internal.InternalService.SampledHistory:input_type -> wandb_internal.SampledHistoryRequest
	28, // 33: wandb_internal.InternalService.PollExit:input_type -> wandb_internal.PollExitRequest
	29, // 34: wandb_internal.InternalService.ServerInfo:input_type -> wandb_internal.ServerInfoRequest
	30, // 35: wandb_internal.InternalService.Shutdown:input_type -> wandb_internal.ShutdownRequest
	31, // 36: wandb_internal.InternalService.RunStatus:input_type -> wandb_internal.RunStatusRequest
	32, // 37: wandb_internal.InternalService.RunExit:input_type -> wandb_internal.RunExitRecord
	33, // 38: wandb_internal.InternalService.RunPreempting:input_type -> wandb_internal.RunPreemptingRecord
	34, // 39: wandb_internal.InternalService.Metric:input_type -> wandb_internal.MetricRecord
	35, // 40: wandb_internal.InternalService.PartialLog:input_type -> wandb_internal.PartialHistoryRequest
	36, // 41: wandb_internal.InternalService.Log:input_type -> wandb_internal.HistoryRecord
	37, // 42: wandb_internal.InternalService.Summary:input_type -> wandb_internal.SummaryRecord
	38, // 43: wandb_internal.InternalService.Config:input_type -> wandb_internal.ConfigRecord
	39, // 44: wandb_internal.InternalService.Files:input_type -> wandb_internal.FilesRecord
	40, // 45: wandb_internal.InternalService.Output:input_type -> wandb_internal.OutputRecord
	41, // 46: wandb_internal.InternalService.OutputRaw:input_type -> wandb_internal.OutputRawRecord
	42, // 47: wandb_internal.InternalService.Telemetry:input_type -> wandb_internal.TelemetryRecord
	43, // 48: wandb_internal.InternalService.Alert:input_type -> wandb_internal.AlertRecord
	44, // 49: wandb_internal.InternalService.Artifact:input_type -> wandb_internal.ArtifactRecord
	45, // 50: wandb_internal.InternalService.LinkArtifact:input_type -> wandb_internal.LinkArtifactRecord
	46, // 51: wandb_internal.InternalService.UseArtifact:input_type -> wandb_internal.UseArtifactRecord
	47, // 52: wandb_internal.InternalService.JobInfo:input_type -> wandb_internal.JobInfoRequest
	48, // 53: wandb_internal.InternalService.ArtifactSend:input_type -> wandb_internal.ArtifactSendRequest
	49, // 54: wandb_internal.InternalService.ArtifactPoll:input_type -> wandb_internal.ArtifactPollRequest
	50, // 55: wandb_internal.InternalService.Cancel:input_type -> wandb_internal.CancelRequest
	51, // 56: wandb_internal.InternalService.Keepalive:input_type -> wandb_internal.KeepaliveRequest
	52, // 57: wandb_internal.InternalService.CheckVersion:input_type -> wandb_internal.CheckVersionRequest
	53, // 58: wandb_internal.InternalService.Pause:input_type -> wandb_internal.PauseRequest
	54, // 59: wandb_internal.InternalService.Resume:input_type -> wandb_internal.ResumeRequest
	55, // 60: wandb_internal.InternalService.Status:input_type -> wandb_internal.StatusRequest
	0,  // 61: wandb_internal.InternalService.ServerShutdown:input_type -> wandb_internal.ServerShutdownRequest
	2,  // 62: wandb_internal.InternalService.ServerStatus:input_type -> wandb_internal.ServerStatusRequest
	4,  // 63: wandb_internal.InternalService.ServerInformInit:input_type -> wandb_internal.ServerInformInitRequest
	6,  // 64: wandb_internal.InternalService.ServerInformStart:input_type -> wandb_internal.ServerInformStartRequest
	8,  // 65: wandb_internal.InternalService.ServerInformFinish:input_type -> wandb_internal.ServerInformFinishRequest
	10, // 66: wandb_internal.InternalService.ServerInformAttach:input_type -> wandb_internal.ServerInformAttachRequest
	12, // 67: wandb_internal.InternalService.ServerInformDetach:input_type -> wandb_internal.ServerInformDetachRequest
	14, // 68: wandb_internal.InternalService.ServerInformTeardown:input_type -> wandb_internal.ServerInformTeardownRequest
	56, // 69: wandb_internal.InternalService.RunUpdate:output_type -> wandb_internal.RunUpdateResult
	57, // 70: wandb_internal.InternalService.Attach:output_type -> wandb_internal.AttachResponse
	58, // 71: wandb_internal.InternalService.TBSend:output_type -> wandb_internal.TBResult
	59, // 72: wandb_internal.InternalService.RunStart:output_type -> wandb_internal.RunStartResponse
	60, // 73: wandb_internal.InternalService.GetSummary:output_type -> wandb_internal.GetSummaryResponse
	61, // 74: wandb_internal.InternalService.SampledHistory:output_type -> wandb_internal.SampledHistoryResponse
	62, // 75: wandb_internal.InternalService.PollExit:output_type -> wandb_internal.PollExitResponse
	63, // 76: wandb_internal.InternalService.ServerInfo:output_type -> wandb_internal.ServerInfoResponse
	64, // 77: wandb_internal.InternalService.Shutdown:output_type -> wandb_internal.ShutdownResponse
	65, // 78: wandb_internal.InternalService.RunStatus:output_type -> wandb_internal.RunStatusResponse
	66, // 79: wandb_internal.InternalService.RunExit:output_type -> wandb_internal.RunExitResult
	67, // 80: wandb_internal.InternalService.RunPreempting:output_type -> wandb_internal.RunPreemptingResult
	68, // 81: wandb_internal.InternalService.Metric:output_type -> wandb_internal.MetricResult
	69, // 82: wandb_internal.InternalService.PartialLog:output_type -> wandb_internal.PartialHistoryResponse
	70, // 83: wandb_internal.InternalService.Log:output_type -> wandb_internal.HistoryResult
	71, // 84: wandb_internal.InternalService.Summary:output_type -> wandb_internal.SummaryResult
	72, // 85: wandb_internal.InternalService.Config:output_type -> wandb_internal.ConfigResult
	73, // 86: wandb_internal.InternalService.Files:output_type -> wandb_internal.FilesResult
	74, // 87: wandb_internal.InternalService.Output:output_type -> wandb_internal.OutputResult
	75, // 88: wandb_internal.InternalService.OutputRaw:output_type -> wandb_internal.OutputRawResult
	76, // 89: wandb_internal.InternalService.Telemetry:output_type -> wandb_internal.TelemetryResult
	77, // 90: wandb_internal.InternalService.Alert:output_type -> wandb_internal.AlertResult
	78, // 91: wandb_internal.InternalService.Artifact:output_type -> wandb_internal.ArtifactResult
	79, // 92: wandb_internal.InternalService.LinkArtifact:output_type -> wandb_internal.LinkArtifactResult
	80, // 93: wandb_internal.InternalService.UseArtifact:output_type -> wandb_internal.UseArtifactResult
	81, // 94: wandb_internal.InternalService.JobInfo:output_type -> wandb_internal.JobInfoResponse
	82, // 95: wandb_internal.InternalService.ArtifactSend:output_type -> wandb_internal.ArtifactSendResponse
	83, // 96: wandb_internal.InternalService.ArtifactPoll:output_type -> wandb_internal.ArtifactPollResponse
	84, // 97: wandb_internal.InternalService.Cancel:output_type -> wandb_internal.CancelResponse
	85, // 98: wandb_internal.InternalService.Keepalive:output_type -> wandb_internal.KeepaliveResponse
	86, // 99: wandb_internal.InternalService.CheckVersion:output_type -> wandb_internal.CheckVersionResponse
	87, // 100: wandb_internal.InternalService.Pause:output_type -> wandb_internal.PauseResponse
	88, // 101: wandb_internal.InternalService.Resume:output_type -> wandb_internal.ResumeResponse
	89, // 102: wandb_internal.InternalService.Status:output_type -> wandb_internal.StatusResponse
	1,  // 103: wandb_internal.InternalService.ServerShutdown:output_type -> wandb_internal.ServerShutdownResponse
	3,  // 104: wandb_internal.InternalService.ServerStatus:output_type -> wandb_internal.ServerStatusResponse
	5,  // 105: wandb_internal.InternalService.ServerInformInit:output_type -> wandb_internal.ServerInformInitResponse
	7,  // 106: wandb_internal.InternalService.ServerInformStart:output_type -> wandb_internal.ServerInformStartResponse
	9,  // 107: wandb_internal.InternalService.ServerInformFinish:output_type -> wandb_internal.ServerInformFinishResponse
	11, // 108: wandb_internal.InternalService.ServerInformAttach:output_type -> wandb_internal.ServerInformAttachResponse
	13, // 109: wandb_internal.InternalService.ServerInformDetach:output_type -> wandb_internal.ServerInformDetachResponse
	15, // 110: wandb_internal.InternalService.ServerInformTeardown:output_type -> wandb_internal.ServerInformTeardownResponse
	69, // [69:111] is the sub-list for method output_type
	27, // [27:69] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_wandb_server_proto_init() }
func file_wandb_server_proto_init() {
	if File_wandb_server_proto != nil {
		return
	}
	file_wandb_base_proto_init()
	file_wandb_internal_proto_init()
	file_wandb_telemetry_proto_init()
	file_wandb_settings_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wandb_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerShutdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerShutdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformInitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformStartRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformStartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformFinishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformFinishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformAttachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformAttachResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformDetachRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformDetachResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformTeardownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInformTeardownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wandb_server_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ServerRequest_RecordPublish)(nil),
		(*ServerRequest_RecordCommunicate)(nil),
		(*ServerRequest_InformInit)(nil),
		(*ServerRequest_InformFinish)(nil),
		(*ServerRequest_InformAttach)(nil),
		(*ServerRequest_InformDetach)(nil),
		(*ServerRequest_InformTeardown)(nil),
		(*ServerRequest_InformStart)(nil),
	}
	file_wandb_server_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ServerResponse_ResultCommunicate)(nil),
		(*ServerResponse_InformInitResponse)(nil),
		(*ServerResponse_InformFinishResponse)(nil),
		(*ServerResponse_InformAttachResponse)(nil),
		(*ServerResponse_InformDetachResponse)(nil),
		(*ServerResponse_InformTeardownResponse)(nil),
		(*ServerResponse_InformStartResponse)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wandb_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wandb_server_proto_goTypes,
		DependencyIndexes: file_wandb_server_proto_depIdxs,
		MessageInfos:      file_wandb_server_proto_msgTypes,
	}.Build()
	File_wandb_server_proto = out.File
	file_wandb_server_proto_rawDesc = nil
	file_wandb_server_proto_goTypes = nil
	file_wandb_server_proto_depIdxs = nil
}
