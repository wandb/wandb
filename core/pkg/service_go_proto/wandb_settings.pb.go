// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.23.4
// source: wandb/proto/wandb_settings.proto

package service_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListStringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *ListStringValue) Reset() {
	*x = ListStringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_proto_wandb_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStringValue) ProtoMessage() {}

func (x *ListStringValue) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_proto_wandb_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStringValue.ProtoReflect.Descriptor instead.
func (*ListStringValue) Descriptor() ([]byte, []int) {
	return file_wandb_proto_wandb_settings_proto_rawDescGZIP(), []int{0}
}

func (x *ListStringValue) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ListIntValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []int32 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *ListIntValue) Reset() {
	*x = ListIntValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_proto_wandb_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIntValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIntValue) ProtoMessage() {}

func (x *ListIntValue) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_proto_wandb_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIntValue.ProtoReflect.Descriptor instead.
func (*ListIntValue) Descriptor() ([]byte, []int) {
	return file_wandb_proto_wandb_settings_proto_rawDescGZIP(), []int{1}
}

func (x *ListIntValue) GetValue() []int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type MapStringKeyStringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[string]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringKeyStringValue) Reset() {
	*x = MapStringKeyStringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_proto_wandb_settings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringKeyStringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringKeyStringValue) ProtoMessage() {}

func (x *MapStringKeyStringValue) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_proto_wandb_settings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringKeyStringValue.ProtoReflect.Descriptor instead.
func (*MapStringKeyStringValue) Descriptor() ([]byte, []int) {
	return file_wandb_proto_wandb_settings_proto_rawDescGZIP(), []int{2}
}

func (x *MapStringKeyStringValue) GetValue() map[string]string {
	if x != nil {
		return x.Value
	}
	return nil
}

type MapStringKeyMapStringKeyStringValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value map[string]*MapStringKeyStringValue `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringKeyMapStringKeyStringValue) Reset() {
	*x = MapStringKeyMapStringKeyStringValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_proto_wandb_settings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringKeyMapStringKeyStringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringKeyMapStringKeyStringValue) ProtoMessage() {}

func (x *MapStringKeyMapStringKeyStringValue) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_proto_wandb_settings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringKeyMapStringKeyStringValue.ProtoReflect.Descriptor instead.
func (*MapStringKeyMapStringKeyStringValue) Descriptor() ([]byte, []int) {
	return file_wandb_proto_wandb_settings_proto_rawDescGZIP(), []int{3}
}

func (x *MapStringKeyMapStringKeyStringValue) GetValue() map[string]*MapStringKeyStringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type OpenMetricsFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*OpenMetricsFilters_Sequence
	//	*OpenMetricsFilters_Mapping
	Value isOpenMetricsFilters_Value `protobuf_oneof:"value"`
}

func (x *OpenMetricsFilters) Reset() {
	*x = OpenMetricsFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_proto_wandb_settings_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenMetricsFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenMetricsFilters) ProtoMessage() {}

func (x *OpenMetricsFilters) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_proto_wandb_settings_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenMetricsFilters.ProtoReflect.Descriptor instead.
func (*OpenMetricsFilters) Descriptor() ([]byte, []int) {
	return file_wandb_proto_wandb_settings_proto_rawDescGZIP(), []int{4}
}

func (m *OpenMetricsFilters) GetValue() isOpenMetricsFilters_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *OpenMetricsFilters) GetSequence() *ListStringValue {
	if x, ok := x.GetValue().(*OpenMetricsFilters_Sequence); ok {
		return x.Sequence
	}
	return nil
}

func (x *OpenMetricsFilters) GetMapping() *MapStringKeyMapStringKeyStringValue {
	if x, ok := x.GetValue().(*OpenMetricsFilters_Mapping); ok {
		return x.Mapping
	}
	return nil
}

type isOpenMetricsFilters_Value interface {
	isOpenMetricsFilters_Value()
}

type OpenMetricsFilters_Sequence struct {
	Sequence *ListStringValue `protobuf:"bytes,1,opt,name=sequence,proto3,oneof"`
}

type OpenMetricsFilters_Mapping struct {
	Mapping *MapStringKeyMapStringKeyStringValue `protobuf:"bytes,2,opt,name=mapping,proto3,oneof"`
}

func (*OpenMetricsFilters_Sequence) isOpenMetricsFilters_Value() {}

func (*OpenMetricsFilters_Mapping) isOpenMetricsFilters_Value() {}

// Serialized representation of the RunMoment class in wandb.sdk.lib.run_moment.
// Used to communicate the moment in a run at which forking or resuming should
// take place.
type RunMoment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Run    string  `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`       // The name of the run to fork from.
	Value  float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"` // The value of the metric to fork at.
	Metric string  `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"` // The name of the metric to use to find a fork point.
}

func (x *RunMoment) Reset() {
	*x = RunMoment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_proto_wandb_settings_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunMoment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMoment) ProtoMessage() {}

func (x *RunMoment) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_proto_wandb_settings_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMoment.ProtoReflect.Descriptor instead.
func (*RunMoment) Descriptor() ([]byte, []int) {
	return file_wandb_proto_wandb_settings_proto_rawDescGZIP(), []int{5}
}

func (x *RunMoment) GetRun() string {
	if x != nil {
		return x.Run
	}
	return ""
}

func (x *RunMoment) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RunMoment) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

// Settings for the SDK.
//
// There is a hierarchy of settings, with at least the following levels:
//
// 1. User process settings
// 2. Run settings
//
// Some fields such as `run_id` only make sense at the run level.
//
// Next ID: 187
type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The W&B API key.
	//
	// This can be empty if we're in offline mode.
	ApiKey *wrapperspb.StringValue `protobuf:"bytes,55,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	// Path to file containing an identity token for authentication.
	IdentityTokenFile *wrapperspb.StringValue `protobuf:"bytes,170,opt,name=identity_token_file,json=identityTokenFile,proto3" json:"identity_token_file,omitempty"`
	// Path to file for writing temporary access tokens.
	CredentialsFile *wrapperspb.StringValue `protobuf:"bytes,171,opt,name=credentials_file,json=credentialsFile,proto3" json:"credentials_file,omitempty"`
	// Whether to insecurely disable SSL verification.
	InsecureDisableSsl *wrapperspb.BoolValue `protobuf:"bytes,185,opt,name=insecure_disable_ssl,json=insecureDisableSsl,proto3" json:"insecure_disable_ssl,omitempty"`
	// Whether we are in offline mode.
	XOffline *wrapperspb.BoolValue `protobuf:"bytes,30,opt,name=_offline,json=Offline,proto3" json:"_offline,omitempty"`
	// Flag to indicate whether we are syncing a run from
	// the transaction log.
	XSync *wrapperspb.BoolValue `protobuf:"bytes,31,opt,name=x_sync,json=xSync,proto3" json:"x_sync,omitempty"`
	// Path to the transaction log file.
	SyncFile *wrapperspb.StringValue `protobuf:"bytes,134,opt,name=sync_file,json=syncFile,proto3" json:"sync_file,omitempty"`
	// Whether we are in shared mode.
	//
	// In "shared" mode, multiple processes can write to the same run,
	// for example from different machines.
	XShared *wrapperspb.BoolValue `protobuf:"bytes,162,opt,name=_shared,json=Shared,proto3" json:"_shared,omitempty"`
	// The ID of the run.
	RunId *wrapperspb.StringValue `protobuf:"bytes,107,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// The W&B URL where the run can be viewed.
	RunUrl *wrapperspb.StringValue `protobuf:"bytes,113,opt,name=run_url,json=runUrl,proto3" json:"run_url,omitempty"`
	// The W&B project ID.
	Project *wrapperspb.StringValue `protobuf:"bytes,97,opt,name=project,proto3" json:"project,omitempty"`
	// The W&B entity, like a user or a team.
	Entity *wrapperspb.StringValue `protobuf:"bytes,69,opt,name=entity,proto3" json:"entity,omitempty"`
	// The start time of the run in seconds since the Unix epoch.
	XStartTime *wrapperspb.DoubleValue `protobuf:"bytes,41,opt,name=x_start_time,json=xStartTime,proto3" json:"x_start_time,omitempty"`
	// The root directory that will be used to derive other paths.
	// Such as the wandb directory, and the run directory.
	//
	// By default, this is the current working directory.
	RootDir *wrapperspb.StringValue `protobuf:"bytes,105,opt,name=root_dir,json=rootDir,proto3" json:"root_dir,omitempty"`
	// The directory for storing log files.
	LogDir *wrapperspb.StringValue `protobuf:"bytes,85,opt,name=log_dir,json=logDir,proto3" json:"log_dir,omitempty"`
	// The path to the file to use for internal logs.
	LogInternal *wrapperspb.StringValue `protobuf:"bytes,86,opt,name=log_internal,json=logInternal,proto3" json:"log_internal,omitempty"`
	// Absolute path to the local directory where the run's files are stored.
	FilesDir *wrapperspb.StringValue `protobuf:"bytes,70,opt,name=files_dir,json=filesDir,proto3" json:"files_dir,omitempty"`
	// Internal override setting for the computed files_dir
	XFilesDir *wrapperspb.StringValue `protobuf:"bytes,180,opt,name=x_files_dir,json=xFilesDir,proto3" json:"x_files_dir,omitempty"`
	// Unix glob patterns relative to `files_dir` to not upload.
	IgnoreGlobs *ListStringValue `protobuf:"bytes,78,opt,name=ignore_globs,json=ignoreGlobs,proto3" json:"ignore_globs,omitempty"`
	// The URL for the W&B backend.
	//
	// Used for GraphQL and "filestream" operations.
	BaseUrl *wrapperspb.StringValue `protobuf:"bytes,57,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// An approximate maximum request size for the filestream API.
	//
	// This applies when wandb-core is enabled. Its purpose is to prevent
	// HTTP requests from failing due to containing too much data.
	//
	// This number is approximate: requests will be slightly larger.
	XFileStreamMaxBytes *wrapperspb.Int32Value `protobuf:"bytes,172,opt,name=x_file_stream_max_bytes,json=xFileStreamMaxBytes,proto3" json:"x_file_stream_max_bytes,omitempty"`
	// Interval in seconds between filestream transmissions.
	XFileStreamTransmitInterval *wrapperspb.DoubleValue `protobuf:"bytes,175,opt,name=x_file_stream_transmit_interval,json=xFileStreamTransmitInterval,proto3" json:"x_file_stream_transmit_interval,omitempty"`
	// Additional headers to add to all outgoing HTTP requests.
	XExtraHttpHeaders *MapStringKeyStringValue `protobuf:"bytes,14,opt,name=x_extra_http_headers,json=xExtraHttpHeaders,proto3" json:"x_extra_http_headers,omitempty"`
	// Maximum number of retries for filestream operations.
	XFileStreamRetryMax *wrapperspb.Int32Value `protobuf:"bytes,147,opt,name=x_file_stream_retry_max,json=xFileStreamRetryMax,proto3" json:"x_file_stream_retry_max,omitempty"`
	// Initial wait in-between filestream retries.
	XFileStreamRetryWaitMinSeconds *wrapperspb.DoubleValue `protobuf:"bytes,148,opt,name=x_file_stream_retry_wait_min_seconds,json=xFileStreamRetryWaitMinSeconds,proto3" json:"x_file_stream_retry_wait_min_seconds,omitempty"`
	// Final wait in-between filestream retries.
	XFileStreamRetryWaitMaxSeconds *wrapperspb.DoubleValue `protobuf:"bytes,149,opt,name=x_file_stream_retry_wait_max_seconds,json=xFileStreamRetryWaitMaxSeconds,proto3" json:"x_file_stream_retry_wait_max_seconds,omitempty"`
	// Per-retry timeout for filestream operations.
	XFileStreamTimeoutSeconds *wrapperspb.DoubleValue `protobuf:"bytes,15,opt,name=x_file_stream_timeout_seconds,json=xFileStreamTimeoutSeconds,proto3" json:"x_file_stream_timeout_seconds,omitempty"`
	// Maximum line length for filestream jsonl files, imposed by the back-end.
	//
	// Note: this value should not be set unless you have clear understanding of
	// the impact on the back-end.
	XFileStreamMaxLineBytes *wrapperspb.Int32Value `protobuf:"bytes,178,opt,name=x_file_stream_max_line_bytes,json=xFileStreamMaxLineBytes,proto3" json:"x_file_stream_max_line_bytes,omitempty"`
	// Maximum number of retries for file upload/download operations.
	XFileTransferRetryMax *wrapperspb.Int32Value `protobuf:"bytes,150,opt,name=x_file_transfer_retry_max,json=xFileTransferRetryMax,proto3" json:"x_file_transfer_retry_max,omitempty"`
	// Initial wait in-between file upload/download retries.
	XFileTransferRetryWaitMinSeconds *wrapperspb.DoubleValue `protobuf:"bytes,151,opt,name=x_file_transfer_retry_wait_min_seconds,json=xFileTransferRetryWaitMinSeconds,proto3" json:"x_file_transfer_retry_wait_min_seconds,omitempty"`
	// Final wait in-between file upload/download retries.
	XFileTransferRetryWaitMaxSeconds *wrapperspb.DoubleValue `protobuf:"bytes,152,opt,name=x_file_transfer_retry_wait_max_seconds,json=xFileTransferRetryWaitMaxSeconds,proto3" json:"x_file_transfer_retry_wait_max_seconds,omitempty"`
	// Per-retry timeout for file upload/download operations.
	XFileTransferTimeoutSeconds *wrapperspb.DoubleValue `protobuf:"bytes,153,opt,name=x_file_transfer_timeout_seconds,json=xFileTransferTimeoutSeconds,proto3" json:"x_file_transfer_timeout_seconds,omitempty"`
	// Maximum number of retries for GraphQL operations.
	XGraphqlRetryMax *wrapperspb.Int32Value `protobuf:"bytes,154,opt,name=x_graphql_retry_max,json=xGraphqlRetryMax,proto3" json:"x_graphql_retry_max,omitempty"`
	// Initial wait in-between GraphQL retries.
	XGraphqlRetryWaitMinSeconds *wrapperspb.DoubleValue `protobuf:"bytes,155,opt,name=x_graphql_retry_wait_min_seconds,json=xGraphqlRetryWaitMinSeconds,proto3" json:"x_graphql_retry_wait_min_seconds,omitempty"`
	// Final wait in-between GraphQL retries.
	XGraphqlRetryWaitMaxSeconds *wrapperspb.DoubleValue `protobuf:"bytes,156,opt,name=x_graphql_retry_wait_max_seconds,json=xGraphqlRetryWaitMaxSeconds,proto3" json:"x_graphql_retry_wait_max_seconds,omitempty"`
	// Per-retry timeout for GraphQL operations.
	XGraphqlTimeoutSeconds *wrapperspb.DoubleValue `protobuf:"bytes,157,opt,name=x_graphql_timeout_seconds,json=xGraphqlTimeoutSeconds,proto3" json:"x_graphql_timeout_seconds,omitempty"`
	// The custom proxy servers for http requests to W&B.
	HttpProxy *wrapperspb.StringValue `protobuf:"bytes,168,opt,name=http_proxy,json=httpProxy,proto3" json:"http_proxy,omitempty"`
	// The custom proxy servers for https requests to W&B.
	HttpsProxy *wrapperspb.StringValue `protobuf:"bytes,169,opt,name=https_proxy,json=httpsProxy,proto3" json:"https_proxy,omitempty"`
	// Custom proxy servers for the requests to W&B.
	//
	// The key is the protocol, e.g. "http", "https", "socks5".
	// The value is the proxy URL.
	// TODO: deprecated, use http_proxy and https_proxy instead.
	XProxies *MapStringKeyStringValue `protobuf:"bytes,200,opt,name=x_proxies,json=xProxies,proto3" json:"x_proxies,omitempty"`
	// Path to the script that created the run, if available.
	Program *wrapperspb.StringValue `protobuf:"bytes,95,opt,name=program,proto3" json:"program,omitempty"`
	// The relative path from the root repository directory to the script that
	// created the run.
	//
	// If the script is not in the root repository directory, this will be the
	// relative path from the current working directory to the script.
	//
	// For example, if the script is /home/user/project/example.py, and the root
	// repository directory is /home/user/project, then the relative path is
	// example.py.
	//
	// If couldn't find the relative path, this will be an empty string.
	ProgramRelpath *wrapperspb.StringValue `protobuf:"bytes,96,opt,name=program_relpath,json=programRelpath,proto3" json:"program_relpath,omitempty"`
	// The relative path from the current working directory to the code path.
	//
	// For example, if the code path is /home/user/project/example.py, and the
	// current working directory is /home/user/project, then the code path local
	// is example.py.
	//
	// If couldn't find the relative path, this will be an empty string.
	XCodePathLocal *wrapperspb.StringValue `protobuf:"bytes,163,opt,name=_code_path_local,json=CodePathLocal,proto3" json:"_code_path_local,omitempty"`
	// The absolute path from the root repository directory to the script that
	// created the run.
	//
	// Root repository directory is defined as the directory containing the
	// .git directory, if it exists. Otherwise, it's the current working directory.
	ProgramAbspath *wrapperspb.StringValue `protobuf:"bytes,159,opt,name=program_abspath,json=programAbspath,proto3" json:"program_abspath,omitempty"`
	// The arguments passed to the script that created the run, if available.
	XArgs *ListStringValue `protobuf:"bytes,1,opt,name=_args,json=Args,proto3" json:"_args,omitempty"`
	// The operating system of the machine running the script.
	XOs *wrapperspb.StringValue `protobuf:"bytes,32,opt,name=_os,json=Os,proto3" json:"_os,omitempty"`
	// The Docker image used to execute the script.
	Docker *wrapperspb.StringValue `protobuf:"bytes,67,opt,name=docker,proto3" json:"docker,omitempty"`
	// The executable used to execute the script.
	XExecutable *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=x_executable,json=xExecutable,proto3" json:"x_executable,omitempty"`
	// The Python version used to execute the script.
	XPython *wrapperspb.StringValue `protobuf:"bytes,34,opt,name=_python,json=Python,proto3" json:"_python,omitempty"`
	// The Colab URL, if available.
	ColabUrl *wrapperspb.StringValue `protobuf:"bytes,160,opt,name=colab_url,json=colabUrl,proto3" json:"colab_url,omitempty"`
	// The name of the host processor the run is running on.
	Host *wrapperspb.StringValue `protobuf:"bytes,77,opt,name=host,proto3" json:"host,omitempty"`
	// The W&B user name.
	Username *wrapperspb.StringValue `protobuf:"bytes,141,opt,name=username,proto3" json:"username,omitempty"`
	// The W&B user email.
	Email *wrapperspb.StringValue `protobuf:"bytes,68,opt,name=email,proto3" json:"email,omitempty"`
	// Specifies the resume behavior for the run. The available options are:
	//
	// "must": Resumes from an existing run with the same ID. If no such run exists,
	// it will result in failure.
	//
	// "allow": Attempts to resume from an existing run with the same ID. If none is
	// found, a new run will be created.
	//
	// "never": Always starts a new run. If a run with the same ID already exists,
	// it will result in failure.
	//
	// "auto": Automatically resumes from the most recent failed run on the same
	// machine.
	Resume *wrapperspb.StringValue `protobuf:"bytes,102,opt,name=resume,proto3" json:"resume,omitempty"`
	// ResumeFrom (or Rewind) information for the run.
	ResumeFrom *RunMoment `protobuf:"bytes,167,opt,name=resume_from,json=resumeFrom,proto3" json:"resume_from,omitempty"`
	// Fork information for the run.
	ForkFrom *RunMoment `protobuf:"bytes,164,opt,name=fork_from,json=forkFrom,proto3" json:"fork_from,omitempty"`
	// Whether to disable the creation of a job artifact for W&B Launch.
	DisableJobCreation *wrapperspb.BoolValue `protobuf:"bytes,65,opt,name=disable_job_creation,json=disableJobCreation,proto3" json:"disable_job_creation,omitempty"`
	// The W&B sweep URL.
	SweepUrl *wrapperspb.StringValue `protobuf:"bytes,131,opt,name=sweep_url,json=sweepUrl,proto3" json:"sweep_url,omitempty"`
	// Whether to disable check for latest version of wandb, from pypi.
	XDisableUpdateCheck *wrapperspb.BoolValue `protobuf:"bytes,165,opt,name=x_disable_update_check,json=xDisableUpdateCheck,proto3" json:"x_disable_update_check,omitempty"`
	// Whether to disable metadata collection.
	XDisableMeta *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=x_disable_meta,json=xDisableMeta,proto3" json:"x_disable_meta,omitempty"`
	// Whether to save the code used to create the run.
	SaveCode *wrapperspb.BoolValue `protobuf:"bytes,115,opt,name=save_code,json=saveCode,proto3" json:"save_code,omitempty"`
	// Whether to disable git capture and diff generation.
	DisableGit *wrapperspb.BoolValue `protobuf:"bytes,63,opt,name=disable_git,json=disableGit,proto3" json:"disable_git,omitempty"`
	// Whether to disable machine info collection, such as hostname and hardware
	// specs.
	XDisableMachineInfo *wrapperspb.BoolValue `protobuf:"bytes,158,opt,name=x_disable_machine_info,json=xDisableMachineInfo,proto3" json:"x_disable_machine_info,omitempty"`
	// Whether to disable system metrics collection.
	XDisableStats *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=x_disable_stats,json=xDisableStats,proto3" json:"x_disable_stats,omitempty"`
	// The size of the buffer for system metrics.
	XStatsBufferSize *wrapperspb.Int32Value `protobuf:"bytes,161,opt,name=x_stats_buffer_size,json=xStatsBufferSize,proto3" json:"x_stats_buffer_size,omitempty"`
	// The sampling interval for system metrics.
	XStatsSamplingInterval *wrapperspb.DoubleValue `protobuf:"bytes,174,opt,name=x_stats_sampling_interval,json=xStatsSamplingInterval,proto3" json:"x_stats_sampling_interval,omitempty"`
	// The PID to monitor for system metrics.
	XStatsPid *wrapperspb.Int32Value `protobuf:"bytes,42,opt,name=x_stats_pid,json=xStatsPid,proto3" json:"x_stats_pid,omitempty"`
	// The disk paths to monitor for system metrics.
	XStatsDiskPaths *ListStringValue `protobuf:"bytes,146,opt,name=x_stats_disk_paths,json=xStatsDiskPaths,proto3" json:"x_stats_disk_paths,omitempty"`
	// The path to the Neuron monitor config file.
	XStatsNeuronMonitorConfigPath *wrapperspb.StringValue `protobuf:"bytes,46,opt,name=x_stats_neuron_monitor_config_path,json=xStatsNeuronMonitorConfigPath,proto3" json:"x_stats_neuron_monitor_config_path,omitempty"`
	// The OpenMetrics endpoints to monitor.
	XStatsOpenMetricsEndpoints *MapStringKeyStringValue `protobuf:"bytes,47,opt,name=x_stats_open_metrics_endpoints,json=xStatsOpenMetricsEndpoints,proto3" json:"x_stats_open_metrics_endpoints,omitempty"`
	// The OpenMetrics filters for the endpoints.
	XStatsOpenMetricsFilters *OpenMetricsFilters `protobuf:"bytes,48,opt,name=x_stats_open_metrics_filters,json=xStatsOpenMetricsFilters,proto3" json:"x_stats_open_metrics_filters,omitempty"`
	// HTTP headers to add to OpenMetrics requests.
	XStatsOpenMetricsHttpHeaders *MapStringKeyStringValue `protobuf:"bytes,184,opt,name=x_stats_open_metrics_http_headers,json=xStatsOpenMetricsHttpHeaders,proto3" json:"x_stats_open_metrics_http_headers,omitempty"`
	// GPU device indices to monitor (e.g. [0, 1, 2]).
	//
	// If not set, captures metrics for all GPUs.
	// Assumes 0-based indexing matching CUDA/ROCm device enumeration.
	XStatsGpuDeviceIds *ListIntValue `protobuf:"bytes,186,opt,name=x_stats_gpu_device_ids,json=xStatsGpuDeviceIds,proto3" json:"x_stats_gpu_device_ids,omitempty"`
	// Label to assign to system metrics and console logs collected for the run
	// to group by on the frontend. Can be used to distinguish data from different
	// nodes in a distributed training job.
	XLabel *wrapperspb.StringValue `protobuf:"bytes,181,opt,name=x_label,json=xLabel,proto3" json:"x_label,omitempty"`
	// Explicitly require wandb-core to not be used.
	XRequireLegacyService *wrapperspb.BoolValue `protobuf:"bytes,173,opt,name=x_require_legacy_service,json=xRequireLegacyService,proto3" json:"x_require_legacy_service,omitempty"`
	// Feature flag controlling the rollout of an improved run.finish() UX.
	//
	// Remove after the feature is rolled out.
	XShowOperationStats *wrapperspb.BoolValue `protobuf:"bytes,176,opt,name=x_show_operation_stats,json=xShowOperationStats,proto3" json:"x_show_operation_stats,omitempty"`
	// Determines whether to save internal wandb files and metadata.
	//
	// In a distributed setting, this is useful for avoiding file overwrites on secondary nodes
	// when only system metrics and logs are needed, as the primary node handles the main logging.
	XPrimaryNode *wrapperspb.BoolValue `protobuf:"bytes,182,opt,name=x_primary_node,json=xPrimaryNode,proto3" json:"x_primary_node,omitempty"`
	// Controls whether this process can update the run's final state (finished/failed) on the server.
	//
	// Set to False in distributed training when only the main process should determine the final state.
	XUpdateFinishState *wrapperspb.BoolValue `protobuf:"bytes,183,opt,name=x_update_finish_state,json=xUpdateFinishState,proto3" json:"x_update_finish_state,omitempty"`
	// Flag to allow table artifacts to be synced in offline mode.
	//
	// By default, true, to revert to old behavior, set this to False.
	AllowOfflineArtifacts *wrapperspb.BoolValue `protobuf:"bytes,177,opt,name=allow_offline_artifacts,json=allowOfflineArtifacts,proto3" json:"allow_offline_artifacts,omitempty"`
	// Defines the type of console capture to be applied. Possible values are:
	//
	// "off" - Disables console capture.
	//
	// "redirect" - Redirects low-level file descriptors for capturing output.
	//
	// "wrap" - Overrides the write methods of sys.stdout/sys.stderr. Will be
	// mapped to either "wrap_raw" or "wrap_emu" based on the state of the system.
	//
	// "wrap_raw" - Same as "wrap" but captures raw output directly instead of
	// through an emulator.
	//
	// "wrap_emu" - Same as "wrap" but captures output through an emulator.
	Console *wrapperspb.StringValue `protobuf:"bytes,60,opt,name=console,proto3" json:"console,omitempty"`
	// Whether to capture console logs in multipart format.
	//
	// This is used to make sure we don't overwrite the console log file if it
	// already exists.
	//
	// The format is: logs/output_<optional:Settings.Label>_<timestamp>_<nanoseconds>.log
	ConsoleMultipart *wrapperspb.BoolValue `protobuf:"bytes,166,opt,name=console_multipart,json=consoleMultipart,proto3" json:"console_multipart,omitempty"`
	// Whether to sync TensorBoard logs to W&B.
	SyncTensorboard                 *wrapperspb.BoolValue    `protobuf:"bytes,179,opt,name=sync_tensorboard,json=syncTensorboard,proto3" json:"sync_tensorboard,omitempty"`
	XAwsLambda                      *wrapperspb.BoolValue    `protobuf:"bytes,2,opt,name=_aws_lambda,json=AwsLambda,proto3" json:"_aws_lambda,omitempty"`
	XCliOnlyMode                    *wrapperspb.BoolValue    `protobuf:"bytes,4,opt,name=x_cli_only_mode,json=xCliOnlyMode,proto3" json:"x_cli_only_mode,omitempty"`
	XColab                          *wrapperspb.BoolValue    `protobuf:"bytes,5,opt,name=_colab,json=Colab,proto3" json:"_colab,omitempty"`
	XDisableService                 *wrapperspb.BoolValue    `protobuf:"bytes,8,opt,name=x_disable_service,json=xDisableService,proto3" json:"x_disable_service,omitempty"`
	XDisableSetproctitle            *wrapperspb.BoolValue    `protobuf:"bytes,9,opt,name=x_disable_setproctitle,json=xDisableSetproctitle,proto3" json:"x_disable_setproctitle,omitempty"`
	XDisableViewer                  *wrapperspb.BoolValue    `protobuf:"bytes,11,opt,name=x_disable_viewer,json=xDisableViewer,proto3" json:"x_disable_viewer,omitempty"`
	XFlowControlCustom              *wrapperspb.BoolValue    `protobuf:"bytes,16,opt,name=x_flow_control_custom,json=xFlowControlCustom,proto3" json:"x_flow_control_custom,omitempty"`
	XFlowControlDisabled            *wrapperspb.BoolValue    `protobuf:"bytes,17,opt,name=x_flow_control_disabled,json=xFlowControlDisabled,proto3" json:"x_flow_control_disabled,omitempty"`
	XInternalCheckProcess           *wrapperspb.DoubleValue  `protobuf:"bytes,18,opt,name=x_internal_check_process,json=xInternalCheckProcess,proto3" json:"x_internal_check_process,omitempty"`
	XIpython                        *wrapperspb.BoolValue    `protobuf:"bytes,20,opt,name=_ipython,json=Ipython,proto3" json:"_ipython,omitempty"`
	XJupyter                        *wrapperspb.BoolValue    `protobuf:"bytes,21,opt,name=_jupyter,json=Jupyter,proto3" json:"_jupyter,omitempty"`
	XJupyterRoot                    *wrapperspb.StringValue  `protobuf:"bytes,22,opt,name=x_jupyter_root,json=xJupyterRoot,proto3" json:"x_jupyter_root,omitempty"`
	XKaggle                         *wrapperspb.BoolValue    `protobuf:"bytes,23,opt,name=_kaggle,json=Kaggle,proto3" json:"_kaggle,omitempty"`
	XLivePolicyRateLimit            *wrapperspb.Int32Value   `protobuf:"bytes,24,opt,name=x_live_policy_rate_limit,json=xLivePolicyRateLimit,proto3" json:"x_live_policy_rate_limit,omitempty"`
	XLivePolicyWaitTime             *wrapperspb.Int32Value   `protobuf:"bytes,25,opt,name=x_live_policy_wait_time,json=xLivePolicyWaitTime,proto3" json:"x_live_policy_wait_time,omitempty"`
	XLogLevel                       *wrapperspb.Int32Value   `protobuf:"bytes,26,opt,name=x_log_level,json=xLogLevel,proto3" json:"x_log_level,omitempty"`
	XNetworkBuffer                  *wrapperspb.Int32Value   `protobuf:"bytes,27,opt,name=x_network_buffer,json=xNetworkBuffer,proto3" json:"x_network_buffer,omitempty"`
	XNoop                           *wrapperspb.BoolValue    `protobuf:"bytes,28,opt,name=_noop,json=Noop,proto3" json:"_noop,omitempty"`
	XNotebook                       *wrapperspb.BoolValue    `protobuf:"bytes,29,opt,name=_notebook,json=Notebook,proto3" json:"_notebook,omitempty"`
	XPlatform                       *wrapperspb.StringValue  `protobuf:"bytes,33,opt,name=_platform,json=Platform,proto3" json:"_platform,omitempty"`
	XRunqueueItemId                 *wrapperspb.StringValue  `protobuf:"bytes,35,opt,name=x_runqueue_item_id,json=xRunqueueItemId,proto3" json:"x_runqueue_item_id,omitempty"`
	XSaveRequirements               *wrapperspb.BoolValue    `protobuf:"bytes,37,opt,name=x_save_requirements,json=xSaveRequirements,proto3" json:"x_save_requirements,omitempty"`
	XServiceTransport               *wrapperspb.StringValue  `protobuf:"bytes,38,opt,name=x_service_transport,json=xServiceTransport,proto3" json:"x_service_transport,omitempty"`
	XServiceWait                    *wrapperspb.DoubleValue  `protobuf:"bytes,39,opt,name=x_service_wait,json=xServiceWait,proto3" json:"x_service_wait,omitempty"`
	XStartDatetime                  *wrapperspb.StringValue  `protobuf:"bytes,40,opt,name=_start_datetime,json=StartDatetime,proto3" json:"_start_datetime,omitempty"`
	XTmpCodeDir                     *wrapperspb.StringValue  `protobuf:"bytes,49,opt,name=_tmp_code_dir,json=TmpCodeDir,proto3" json:"_tmp_code_dir,omitempty"`
	XWindows                        *wrapperspb.BoolValue    `protobuf:"bytes,52,opt,name=_windows,json=Windows,proto3" json:"_windows,omitempty"`
	AllowValChange                  *wrapperspb.BoolValue    `protobuf:"bytes,53,opt,name=allow_val_change,json=allowValChange,proto3" json:"allow_val_change,omitempty"`
	Anonymous                       *wrapperspb.StringValue  `protobuf:"bytes,54,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	AzureAccountUrlToAccessKey      *MapStringKeyStringValue `protobuf:"bytes,56,opt,name=azure_account_url_to_access_key,json=azureAccountUrlToAccessKey,proto3" json:"azure_account_url_to_access_key,omitempty"`
	CodeDir                         *wrapperspb.StringValue  `protobuf:"bytes,58,opt,name=code_dir,json=codeDir,proto3" json:"code_dir,omitempty"`
	ConfigPaths                     *ListStringValue         `protobuf:"bytes,59,opt,name=config_paths,json=configPaths,proto3" json:"config_paths,omitempty"`
	Deployment                      *wrapperspb.StringValue  `protobuf:"bytes,61,opt,name=deployment,proto3" json:"deployment,omitempty"`
	DisableCode                     *wrapperspb.BoolValue    `protobuf:"bytes,62,opt,name=disable_code,json=disableCode,proto3" json:"disable_code,omitempty"`
	DisableHints                    *wrapperspb.BoolValue    `protobuf:"bytes,64,opt,name=disable_hints,json=disableHints,proto3" json:"disable_hints,omitempty"`
	Disabled                        *wrapperspb.BoolValue    `protobuf:"bytes,66,opt,name=disabled,proto3" json:"disabled,omitempty"`
	Force                           *wrapperspb.BoolValue    `protobuf:"bytes,71,opt,name=force,proto3" json:"force,omitempty"`
	GitCommit                       *wrapperspb.StringValue  `protobuf:"bytes,72,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	GitRemote                       *wrapperspb.StringValue  `protobuf:"bytes,73,opt,name=git_remote,json=gitRemote,proto3" json:"git_remote,omitempty"`
	GitRemoteUrl                    *wrapperspb.StringValue  `protobuf:"bytes,74,opt,name=git_remote_url,json=gitRemoteUrl,proto3" json:"git_remote_url,omitempty"`
	GitRoot                         *wrapperspb.StringValue  `protobuf:"bytes,75,opt,name=git_root,json=gitRoot,proto3" json:"git_root,omitempty"`
	HeartbeatSeconds                *wrapperspb.Int32Value   `protobuf:"bytes,76,opt,name=heartbeat_seconds,json=heartbeatSeconds,proto3" json:"heartbeat_seconds,omitempty"`
	InitTimeout                     *wrapperspb.DoubleValue  `protobuf:"bytes,79,opt,name=init_timeout,json=initTimeout,proto3" json:"init_timeout,omitempty"`
	IsLocal                         *wrapperspb.BoolValue    `protobuf:"bytes,80,opt,name=is_local,json=isLocal,proto3" json:"is_local,omitempty"`
	JobSource                       *wrapperspb.StringValue  `protobuf:"bytes,81,opt,name=job_source,json=jobSource,proto3" json:"job_source,omitempty"`
	LabelDisable                    *wrapperspb.BoolValue    `protobuf:"bytes,82,opt,name=label_disable,json=labelDisable,proto3" json:"label_disable,omitempty"`
	Launch                          *wrapperspb.BoolValue    `protobuf:"bytes,83,opt,name=launch,proto3" json:"launch,omitempty"`
	LaunchConfigPath                *wrapperspb.StringValue  `protobuf:"bytes,84,opt,name=launch_config_path,json=launchConfigPath,proto3" json:"launch_config_path,omitempty"`
	LogSymlinkInternal              *wrapperspb.StringValue  `protobuf:"bytes,87,opt,name=log_symlink_internal,json=logSymlinkInternal,proto3" json:"log_symlink_internal,omitempty"`
	LogSymlinkUser                  *wrapperspb.StringValue  `protobuf:"bytes,88,opt,name=log_symlink_user,json=logSymlinkUser,proto3" json:"log_symlink_user,omitempty"`
	LogUser                         *wrapperspb.StringValue  `protobuf:"bytes,89,opt,name=log_user,json=logUser,proto3" json:"log_user,omitempty"`
	LoginTimeout                    *wrapperspb.DoubleValue  `protobuf:"bytes,90,opt,name=login_timeout,json=loginTimeout,proto3" json:"login_timeout,omitempty"`
	Mode                            *wrapperspb.StringValue  `protobuf:"bytes,92,opt,name=mode,proto3" json:"mode,omitempty"`
	NotebookName                    *wrapperspb.StringValue  `protobuf:"bytes,93,opt,name=notebook_name,json=notebookName,proto3" json:"notebook_name,omitempty"`
	ProjectUrl                      *wrapperspb.StringValue  `protobuf:"bytes,98,opt,name=project_url,json=projectUrl,proto3" json:"project_url,omitempty"`
	Quiet                           *wrapperspb.BoolValue    `protobuf:"bytes,99,opt,name=quiet,proto3" json:"quiet,omitempty"`
	Reinit                          *wrapperspb.BoolValue    `protobuf:"bytes,100,opt,name=reinit,proto3" json:"reinit,omitempty"`
	Relogin                         *wrapperspb.BoolValue    `protobuf:"bytes,101,opt,name=relogin,proto3" json:"relogin,omitempty"`
	ResumeFname                     *wrapperspb.StringValue  `protobuf:"bytes,103,opt,name=resume_fname,json=resumeFname,proto3" json:"resume_fname,omitempty"`
	Resumed                         *wrapperspb.BoolValue    `protobuf:"bytes,104,opt,name=resumed,proto3" json:"resumed,omitempty"`
	RunGroup                        *wrapperspb.StringValue  `protobuf:"bytes,106,opt,name=run_group,json=runGroup,proto3" json:"run_group,omitempty"`
	RunJobType                      *wrapperspb.StringValue  `protobuf:"bytes,108,opt,name=run_job_type,json=runJobType,proto3" json:"run_job_type,omitempty"`
	RunMode                         *wrapperspb.StringValue  `protobuf:"bytes,109,opt,name=run_mode,json=runMode,proto3" json:"run_mode,omitempty"`
	RunName                         *wrapperspb.StringValue  `protobuf:"bytes,110,opt,name=run_name,json=runName,proto3" json:"run_name,omitempty"`
	RunNotes                        *wrapperspb.StringValue  `protobuf:"bytes,111,opt,name=run_notes,json=runNotes,proto3" json:"run_notes,omitempty"`
	RunTags                         *ListStringValue         `protobuf:"bytes,112,opt,name=run_tags,json=runTags,proto3" json:"run_tags,omitempty"`
	SagemakerDisable                *wrapperspb.BoolValue    `protobuf:"bytes,114,opt,name=sagemaker_disable,json=sagemakerDisable,proto3" json:"sagemaker_disable,omitempty"`
	SettingsSystem                  *wrapperspb.StringValue  `protobuf:"bytes,116,opt,name=settings_system,json=settingsSystem,proto3" json:"settings_system,omitempty"`
	SettingsWorkspace               *wrapperspb.StringValue  `protobuf:"bytes,117,opt,name=settings_workspace,json=settingsWorkspace,proto3" json:"settings_workspace,omitempty"`
	ShowColors                      *wrapperspb.BoolValue    `protobuf:"bytes,118,opt,name=show_colors,json=showColors,proto3" json:"show_colors,omitempty"`
	ShowEmoji                       *wrapperspb.BoolValue    `protobuf:"bytes,119,opt,name=show_emoji,json=showEmoji,proto3" json:"show_emoji,omitempty"`
	ShowErrors                      *wrapperspb.BoolValue    `protobuf:"bytes,120,opt,name=show_errors,json=showErrors,proto3" json:"show_errors,omitempty"`
	ShowInfo                        *wrapperspb.BoolValue    `protobuf:"bytes,121,opt,name=show_info,json=showInfo,proto3" json:"show_info,omitempty"`
	ShowWarnings                    *wrapperspb.BoolValue    `protobuf:"bytes,122,opt,name=show_warnings,json=showWarnings,proto3" json:"show_warnings,omitempty"`
	Silent                          *wrapperspb.BoolValue    `protobuf:"bytes,123,opt,name=silent,proto3" json:"silent,omitempty"`
	StartMethod                     *wrapperspb.StringValue  `protobuf:"bytes,124,opt,name=start_method,json=startMethod,proto3" json:"start_method,omitempty"`
	Strict                          *wrapperspb.BoolValue    `protobuf:"bytes,125,opt,name=strict,proto3" json:"strict,omitempty"`
	SummaryErrors                   *wrapperspb.Int32Value   `protobuf:"bytes,126,opt,name=summary_errors,json=summaryErrors,proto3" json:"summary_errors,omitempty"`
	SummaryTimeout                  *wrapperspb.Int32Value   `protobuf:"bytes,127,opt,name=summary_timeout,json=summaryTimeout,proto3" json:"summary_timeout,omitempty"`
	SummaryWarnings                 *wrapperspb.Int32Value   `protobuf:"bytes,128,opt,name=summary_warnings,json=summaryWarnings,proto3" json:"summary_warnings,omitempty"`
	SweepId                         *wrapperspb.StringValue  `protobuf:"bytes,129,opt,name=sweep_id,json=sweepId,proto3" json:"sweep_id,omitempty"`
	SweepParamPath                  *wrapperspb.StringValue  `protobuf:"bytes,130,opt,name=sweep_param_path,json=sweepParamPath,proto3" json:"sweep_param_path,omitempty"`
	Symlink                         *wrapperspb.BoolValue    `protobuf:"bytes,132,opt,name=symlink,proto3" json:"symlink,omitempty"`
	SyncDir                         *wrapperspb.StringValue  `protobuf:"bytes,133,opt,name=sync_dir,json=syncDir,proto3" json:"sync_dir,omitempty"`
	SyncSymlinkLatest               *wrapperspb.StringValue  `protobuf:"bytes,135,opt,name=sync_symlink_latest,json=syncSymlinkLatest,proto3" json:"sync_symlink_latest,omitempty"`
	TableRaiseOnMaxRowLimitExceeded *wrapperspb.BoolValue    `protobuf:"bytes,138,opt,name=table_raise_on_max_row_limit_exceeded,json=tableRaiseOnMaxRowLimitExceeded,proto3" json:"table_raise_on_max_row_limit_exceeded,omitempty"`
	Timespec                        *wrapperspb.StringValue  `protobuf:"bytes,139,opt,name=timespec,proto3" json:"timespec,omitempty"`
	TmpDir                          *wrapperspb.StringValue  `protobuf:"bytes,140,opt,name=tmp_dir,json=tmpDir,proto3" json:"tmp_dir,omitempty"`
	WandbDir                        *wrapperspb.StringValue  `protobuf:"bytes,142,opt,name=wandb_dir,json=wandbDir,proto3" json:"wandb_dir,omitempty"`
	XJupyterName                    *wrapperspb.StringValue  `protobuf:"bytes,143,opt,name=x_jupyter_name,json=xJupyterName,proto3" json:"x_jupyter_name,omitempty"`
	XJupyterPath                    *wrapperspb.StringValue  `protobuf:"bytes,144,opt,name=x_jupyter_path,json=xJupyterPath,proto3" json:"x_jupyter_path,omitempty"`
	JobName                         *wrapperspb.StringValue  `protobuf:"bytes,145,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wandb_proto_wandb_settings_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_wandb_proto_wandb_settings_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_wandb_proto_wandb_settings_proto_rawDescGZIP(), []int{6}
}

func (x *Settings) GetApiKey() *wrapperspb.StringValue {
	if x != nil {
		return x.ApiKey
	}
	return nil
}

func (x *Settings) GetIdentityTokenFile() *wrapperspb.StringValue {
	if x != nil {
		return x.IdentityTokenFile
	}
	return nil
}

func (x *Settings) GetCredentialsFile() *wrapperspb.StringValue {
	if x != nil {
		return x.CredentialsFile
	}
	return nil
}

func (x *Settings) GetInsecureDisableSsl() *wrapperspb.BoolValue {
	if x != nil {
		return x.InsecureDisableSsl
	}
	return nil
}

func (x *Settings) GetXOffline() *wrapperspb.BoolValue {
	if x != nil {
		return x.XOffline
	}
	return nil
}

func (x *Settings) GetXSync() *wrapperspb.BoolValue {
	if x != nil {
		return x.XSync
	}
	return nil
}

func (x *Settings) GetSyncFile() *wrapperspb.StringValue {
	if x != nil {
		return x.SyncFile
	}
	return nil
}

func (x *Settings) GetXShared() *wrapperspb.BoolValue {
	if x != nil {
		return x.XShared
	}
	return nil
}

func (x *Settings) GetRunId() *wrapperspb.StringValue {
	if x != nil {
		return x.RunId
	}
	return nil
}

func (x *Settings) GetRunUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.RunUrl
	}
	return nil
}

func (x *Settings) GetProject() *wrapperspb.StringValue {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Settings) GetEntity() *wrapperspb.StringValue {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *Settings) GetXStartTime() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XStartTime
	}
	return nil
}

func (x *Settings) GetRootDir() *wrapperspb.StringValue {
	if x != nil {
		return x.RootDir
	}
	return nil
}

func (x *Settings) GetLogDir() *wrapperspb.StringValue {
	if x != nil {
		return x.LogDir
	}
	return nil
}

func (x *Settings) GetLogInternal() *wrapperspb.StringValue {
	if x != nil {
		return x.LogInternal
	}
	return nil
}

func (x *Settings) GetFilesDir() *wrapperspb.StringValue {
	if x != nil {
		return x.FilesDir
	}
	return nil
}

func (x *Settings) GetXFilesDir() *wrapperspb.StringValue {
	if x != nil {
		return x.XFilesDir
	}
	return nil
}

func (x *Settings) GetIgnoreGlobs() *ListStringValue {
	if x != nil {
		return x.IgnoreGlobs
	}
	return nil
}

func (x *Settings) GetBaseUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.BaseUrl
	}
	return nil
}

func (x *Settings) GetXFileStreamMaxBytes() *wrapperspb.Int32Value {
	if x != nil {
		return x.XFileStreamMaxBytes
	}
	return nil
}

func (x *Settings) GetXFileStreamTransmitInterval() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XFileStreamTransmitInterval
	}
	return nil
}

func (x *Settings) GetXExtraHttpHeaders() *MapStringKeyStringValue {
	if x != nil {
		return x.XExtraHttpHeaders
	}
	return nil
}

func (x *Settings) GetXFileStreamRetryMax() *wrapperspb.Int32Value {
	if x != nil {
		return x.XFileStreamRetryMax
	}
	return nil
}

func (x *Settings) GetXFileStreamRetryWaitMinSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XFileStreamRetryWaitMinSeconds
	}
	return nil
}

func (x *Settings) GetXFileStreamRetryWaitMaxSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XFileStreamRetryWaitMaxSeconds
	}
	return nil
}

func (x *Settings) GetXFileStreamTimeoutSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XFileStreamTimeoutSeconds
	}
	return nil
}

func (x *Settings) GetXFileStreamMaxLineBytes() *wrapperspb.Int32Value {
	if x != nil {
		return x.XFileStreamMaxLineBytes
	}
	return nil
}

func (x *Settings) GetXFileTransferRetryMax() *wrapperspb.Int32Value {
	if x != nil {
		return x.XFileTransferRetryMax
	}
	return nil
}

func (x *Settings) GetXFileTransferRetryWaitMinSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XFileTransferRetryWaitMinSeconds
	}
	return nil
}

func (x *Settings) GetXFileTransferRetryWaitMaxSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XFileTransferRetryWaitMaxSeconds
	}
	return nil
}

func (x *Settings) GetXFileTransferTimeoutSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XFileTransferTimeoutSeconds
	}
	return nil
}

func (x *Settings) GetXGraphqlRetryMax() *wrapperspb.Int32Value {
	if x != nil {
		return x.XGraphqlRetryMax
	}
	return nil
}

func (x *Settings) GetXGraphqlRetryWaitMinSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XGraphqlRetryWaitMinSeconds
	}
	return nil
}

func (x *Settings) GetXGraphqlRetryWaitMaxSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XGraphqlRetryWaitMaxSeconds
	}
	return nil
}

func (x *Settings) GetXGraphqlTimeoutSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XGraphqlTimeoutSeconds
	}
	return nil
}

func (x *Settings) GetHttpProxy() *wrapperspb.StringValue {
	if x != nil {
		return x.HttpProxy
	}
	return nil
}

func (x *Settings) GetHttpsProxy() *wrapperspb.StringValue {
	if x != nil {
		return x.HttpsProxy
	}
	return nil
}

func (x *Settings) GetXProxies() *MapStringKeyStringValue {
	if x != nil {
		return x.XProxies
	}
	return nil
}

func (x *Settings) GetProgram() *wrapperspb.StringValue {
	if x != nil {
		return x.Program
	}
	return nil
}

func (x *Settings) GetProgramRelpath() *wrapperspb.StringValue {
	if x != nil {
		return x.ProgramRelpath
	}
	return nil
}

func (x *Settings) GetXCodePathLocal() *wrapperspb.StringValue {
	if x != nil {
		return x.XCodePathLocal
	}
	return nil
}

func (x *Settings) GetProgramAbspath() *wrapperspb.StringValue {
	if x != nil {
		return x.ProgramAbspath
	}
	return nil
}

func (x *Settings) GetXArgs() *ListStringValue {
	if x != nil {
		return x.XArgs
	}
	return nil
}

func (x *Settings) GetXOs() *wrapperspb.StringValue {
	if x != nil {
		return x.XOs
	}
	return nil
}

func (x *Settings) GetDocker() *wrapperspb.StringValue {
	if x != nil {
		return x.Docker
	}
	return nil
}

func (x *Settings) GetXExecutable() *wrapperspb.StringValue {
	if x != nil {
		return x.XExecutable
	}
	return nil
}

func (x *Settings) GetXPython() *wrapperspb.StringValue {
	if x != nil {
		return x.XPython
	}
	return nil
}

func (x *Settings) GetColabUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.ColabUrl
	}
	return nil
}

func (x *Settings) GetHost() *wrapperspb.StringValue {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *Settings) GetUsername() *wrapperspb.StringValue {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *Settings) GetEmail() *wrapperspb.StringValue {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Settings) GetResume() *wrapperspb.StringValue {
	if x != nil {
		return x.Resume
	}
	return nil
}

func (x *Settings) GetResumeFrom() *RunMoment {
	if x != nil {
		return x.ResumeFrom
	}
	return nil
}

func (x *Settings) GetForkFrom() *RunMoment {
	if x != nil {
		return x.ForkFrom
	}
	return nil
}

func (x *Settings) GetDisableJobCreation() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableJobCreation
	}
	return nil
}

func (x *Settings) GetSweepUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.SweepUrl
	}
	return nil
}

func (x *Settings) GetXDisableUpdateCheck() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableUpdateCheck
	}
	return nil
}

func (x *Settings) GetXDisableMeta() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableMeta
	}
	return nil
}

func (x *Settings) GetSaveCode() *wrapperspb.BoolValue {
	if x != nil {
		return x.SaveCode
	}
	return nil
}

func (x *Settings) GetDisableGit() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableGit
	}
	return nil
}

func (x *Settings) GetXDisableMachineInfo() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableMachineInfo
	}
	return nil
}

func (x *Settings) GetXDisableStats() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableStats
	}
	return nil
}

func (x *Settings) GetXStatsBufferSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.XStatsBufferSize
	}
	return nil
}

func (x *Settings) GetXStatsSamplingInterval() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XStatsSamplingInterval
	}
	return nil
}

func (x *Settings) GetXStatsPid() *wrapperspb.Int32Value {
	if x != nil {
		return x.XStatsPid
	}
	return nil
}

func (x *Settings) GetXStatsDiskPaths() *ListStringValue {
	if x != nil {
		return x.XStatsDiskPaths
	}
	return nil
}

func (x *Settings) GetXStatsNeuronMonitorConfigPath() *wrapperspb.StringValue {
	if x != nil {
		return x.XStatsNeuronMonitorConfigPath
	}
	return nil
}

func (x *Settings) GetXStatsOpenMetricsEndpoints() *MapStringKeyStringValue {
	if x != nil {
		return x.XStatsOpenMetricsEndpoints
	}
	return nil
}

func (x *Settings) GetXStatsOpenMetricsFilters() *OpenMetricsFilters {
	if x != nil {
		return x.XStatsOpenMetricsFilters
	}
	return nil
}

func (x *Settings) GetXStatsOpenMetricsHttpHeaders() *MapStringKeyStringValue {
	if x != nil {
		return x.XStatsOpenMetricsHttpHeaders
	}
	return nil
}

func (x *Settings) GetXStatsGpuDeviceIds() *ListIntValue {
	if x != nil {
		return x.XStatsGpuDeviceIds
	}
	return nil
}

func (x *Settings) GetXLabel() *wrapperspb.StringValue {
	if x != nil {
		return x.XLabel
	}
	return nil
}

func (x *Settings) GetXRequireLegacyService() *wrapperspb.BoolValue {
	if x != nil {
		return x.XRequireLegacyService
	}
	return nil
}

func (x *Settings) GetXShowOperationStats() *wrapperspb.BoolValue {
	if x != nil {
		return x.XShowOperationStats
	}
	return nil
}

func (x *Settings) GetXPrimaryNode() *wrapperspb.BoolValue {
	if x != nil {
		return x.XPrimaryNode
	}
	return nil
}

func (x *Settings) GetXUpdateFinishState() *wrapperspb.BoolValue {
	if x != nil {
		return x.XUpdateFinishState
	}
	return nil
}

func (x *Settings) GetAllowOfflineArtifacts() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowOfflineArtifacts
	}
	return nil
}

func (x *Settings) GetConsole() *wrapperspb.StringValue {
	if x != nil {
		return x.Console
	}
	return nil
}

func (x *Settings) GetConsoleMultipart() *wrapperspb.BoolValue {
	if x != nil {
		return x.ConsoleMultipart
	}
	return nil
}

func (x *Settings) GetSyncTensorboard() *wrapperspb.BoolValue {
	if x != nil {
		return x.SyncTensorboard
	}
	return nil
}

func (x *Settings) GetXAwsLambda() *wrapperspb.BoolValue {
	if x != nil {
		return x.XAwsLambda
	}
	return nil
}

func (x *Settings) GetXCliOnlyMode() *wrapperspb.BoolValue {
	if x != nil {
		return x.XCliOnlyMode
	}
	return nil
}

func (x *Settings) GetXColab() *wrapperspb.BoolValue {
	if x != nil {
		return x.XColab
	}
	return nil
}

func (x *Settings) GetXDisableService() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableService
	}
	return nil
}

func (x *Settings) GetXDisableSetproctitle() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableSetproctitle
	}
	return nil
}

func (x *Settings) GetXDisableViewer() *wrapperspb.BoolValue {
	if x != nil {
		return x.XDisableViewer
	}
	return nil
}

func (x *Settings) GetXFlowControlCustom() *wrapperspb.BoolValue {
	if x != nil {
		return x.XFlowControlCustom
	}
	return nil
}

func (x *Settings) GetXFlowControlDisabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.XFlowControlDisabled
	}
	return nil
}

func (x *Settings) GetXInternalCheckProcess() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XInternalCheckProcess
	}
	return nil
}

func (x *Settings) GetXIpython() *wrapperspb.BoolValue {
	if x != nil {
		return x.XIpython
	}
	return nil
}

func (x *Settings) GetXJupyter() *wrapperspb.BoolValue {
	if x != nil {
		return x.XJupyter
	}
	return nil
}

func (x *Settings) GetXJupyterRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.XJupyterRoot
	}
	return nil
}

func (x *Settings) GetXKaggle() *wrapperspb.BoolValue {
	if x != nil {
		return x.XKaggle
	}
	return nil
}

func (x *Settings) GetXLivePolicyRateLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.XLivePolicyRateLimit
	}
	return nil
}

func (x *Settings) GetXLivePolicyWaitTime() *wrapperspb.Int32Value {
	if x != nil {
		return x.XLivePolicyWaitTime
	}
	return nil
}

func (x *Settings) GetXLogLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.XLogLevel
	}
	return nil
}

func (x *Settings) GetXNetworkBuffer() *wrapperspb.Int32Value {
	if x != nil {
		return x.XNetworkBuffer
	}
	return nil
}

func (x *Settings) GetXNoop() *wrapperspb.BoolValue {
	if x != nil {
		return x.XNoop
	}
	return nil
}

func (x *Settings) GetXNotebook() *wrapperspb.BoolValue {
	if x != nil {
		return x.XNotebook
	}
	return nil
}

func (x *Settings) GetXPlatform() *wrapperspb.StringValue {
	if x != nil {
		return x.XPlatform
	}
	return nil
}

func (x *Settings) GetXRunqueueItemId() *wrapperspb.StringValue {
	if x != nil {
		return x.XRunqueueItemId
	}
	return nil
}

func (x *Settings) GetXSaveRequirements() *wrapperspb.BoolValue {
	if x != nil {
		return x.XSaveRequirements
	}
	return nil
}

func (x *Settings) GetXServiceTransport() *wrapperspb.StringValue {
	if x != nil {
		return x.XServiceTransport
	}
	return nil
}

func (x *Settings) GetXServiceWait() *wrapperspb.DoubleValue {
	if x != nil {
		return x.XServiceWait
	}
	return nil
}

func (x *Settings) GetXStartDatetime() *wrapperspb.StringValue {
	if x != nil {
		return x.XStartDatetime
	}
	return nil
}

func (x *Settings) GetXTmpCodeDir() *wrapperspb.StringValue {
	if x != nil {
		return x.XTmpCodeDir
	}
	return nil
}

func (x *Settings) GetXWindows() *wrapperspb.BoolValue {
	if x != nil {
		return x.XWindows
	}
	return nil
}

func (x *Settings) GetAllowValChange() *wrapperspb.BoolValue {
	if x != nil {
		return x.AllowValChange
	}
	return nil
}

func (x *Settings) GetAnonymous() *wrapperspb.StringValue {
	if x != nil {
		return x.Anonymous
	}
	return nil
}

func (x *Settings) GetAzureAccountUrlToAccessKey() *MapStringKeyStringValue {
	if x != nil {
		return x.AzureAccountUrlToAccessKey
	}
	return nil
}

func (x *Settings) GetCodeDir() *wrapperspb.StringValue {
	if x != nil {
		return x.CodeDir
	}
	return nil
}

func (x *Settings) GetConfigPaths() *ListStringValue {
	if x != nil {
		return x.ConfigPaths
	}
	return nil
}

func (x *Settings) GetDeployment() *wrapperspb.StringValue {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *Settings) GetDisableCode() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableCode
	}
	return nil
}

func (x *Settings) GetDisableHints() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableHints
	}
	return nil
}

func (x *Settings) GetDisabled() *wrapperspb.BoolValue {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *Settings) GetForce() *wrapperspb.BoolValue {
	if x != nil {
		return x.Force
	}
	return nil
}

func (x *Settings) GetGitCommit() *wrapperspb.StringValue {
	if x != nil {
		return x.GitCommit
	}
	return nil
}

func (x *Settings) GetGitRemote() *wrapperspb.StringValue {
	if x != nil {
		return x.GitRemote
	}
	return nil
}

func (x *Settings) GetGitRemoteUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.GitRemoteUrl
	}
	return nil
}

func (x *Settings) GetGitRoot() *wrapperspb.StringValue {
	if x != nil {
		return x.GitRoot
	}
	return nil
}

func (x *Settings) GetHeartbeatSeconds() *wrapperspb.Int32Value {
	if x != nil {
		return x.HeartbeatSeconds
	}
	return nil
}

func (x *Settings) GetInitTimeout() *wrapperspb.DoubleValue {
	if x != nil {
		return x.InitTimeout
	}
	return nil
}

func (x *Settings) GetIsLocal() *wrapperspb.BoolValue {
	if x != nil {
		return x.IsLocal
	}
	return nil
}

func (x *Settings) GetJobSource() *wrapperspb.StringValue {
	if x != nil {
		return x.JobSource
	}
	return nil
}

func (x *Settings) GetLabelDisable() *wrapperspb.BoolValue {
	if x != nil {
		return x.LabelDisable
	}
	return nil
}

func (x *Settings) GetLaunch() *wrapperspb.BoolValue {
	if x != nil {
		return x.Launch
	}
	return nil
}

func (x *Settings) GetLaunchConfigPath() *wrapperspb.StringValue {
	if x != nil {
		return x.LaunchConfigPath
	}
	return nil
}

func (x *Settings) GetLogSymlinkInternal() *wrapperspb.StringValue {
	if x != nil {
		return x.LogSymlinkInternal
	}
	return nil
}

func (x *Settings) GetLogSymlinkUser() *wrapperspb.StringValue {
	if x != nil {
		return x.LogSymlinkUser
	}
	return nil
}

func (x *Settings) GetLogUser() *wrapperspb.StringValue {
	if x != nil {
		return x.LogUser
	}
	return nil
}

func (x *Settings) GetLoginTimeout() *wrapperspb.DoubleValue {
	if x != nil {
		return x.LoginTimeout
	}
	return nil
}

func (x *Settings) GetMode() *wrapperspb.StringValue {
	if x != nil {
		return x.Mode
	}
	return nil
}

func (x *Settings) GetNotebookName() *wrapperspb.StringValue {
	if x != nil {
		return x.NotebookName
	}
	return nil
}

func (x *Settings) GetProjectUrl() *wrapperspb.StringValue {
	if x != nil {
		return x.ProjectUrl
	}
	return nil
}

func (x *Settings) GetQuiet() *wrapperspb.BoolValue {
	if x != nil {
		return x.Quiet
	}
	return nil
}

func (x *Settings) GetReinit() *wrapperspb.BoolValue {
	if x != nil {
		return x.Reinit
	}
	return nil
}

func (x *Settings) GetRelogin() *wrapperspb.BoolValue {
	if x != nil {
		return x.Relogin
	}
	return nil
}

func (x *Settings) GetResumeFname() *wrapperspb.StringValue {
	if x != nil {
		return x.ResumeFname
	}
	return nil
}

func (x *Settings) GetResumed() *wrapperspb.BoolValue {
	if x != nil {
		return x.Resumed
	}
	return nil
}

func (x *Settings) GetRunGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.RunGroup
	}
	return nil
}

func (x *Settings) GetRunJobType() *wrapperspb.StringValue {
	if x != nil {
		return x.RunJobType
	}
	return nil
}

func (x *Settings) GetRunMode() *wrapperspb.StringValue {
	if x != nil {
		return x.RunMode
	}
	return nil
}

func (x *Settings) GetRunName() *wrapperspb.StringValue {
	if x != nil {
		return x.RunName
	}
	return nil
}

func (x *Settings) GetRunNotes() *wrapperspb.StringValue {
	if x != nil {
		return x.RunNotes
	}
	return nil
}

func (x *Settings) GetRunTags() *ListStringValue {
	if x != nil {
		return x.RunTags
	}
	return nil
}

func (x *Settings) GetSagemakerDisable() *wrapperspb.BoolValue {
	if x != nil {
		return x.SagemakerDisable
	}
	return nil
}

func (x *Settings) GetSettingsSystem() *wrapperspb.StringValue {
	if x != nil {
		return x.SettingsSystem
	}
	return nil
}

func (x *Settings) GetSettingsWorkspace() *wrapperspb.StringValue {
	if x != nil {
		return x.SettingsWorkspace
	}
	return nil
}

func (x *Settings) GetShowColors() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowColors
	}
	return nil
}

func (x *Settings) GetShowEmoji() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowEmoji
	}
	return nil
}

func (x *Settings) GetShowErrors() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowErrors
	}
	return nil
}

func (x *Settings) GetShowInfo() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowInfo
	}
	return nil
}

func (x *Settings) GetShowWarnings() *wrapperspb.BoolValue {
	if x != nil {
		return x.ShowWarnings
	}
	return nil
}

func (x *Settings) GetSilent() *wrapperspb.BoolValue {
	if x != nil {
		return x.Silent
	}
	return nil
}

func (x *Settings) GetStartMethod() *wrapperspb.StringValue {
	if x != nil {
		return x.StartMethod
	}
	return nil
}

func (x *Settings) GetStrict() *wrapperspb.BoolValue {
	if x != nil {
		return x.Strict
	}
	return nil
}

func (x *Settings) GetSummaryErrors() *wrapperspb.Int32Value {
	if x != nil {
		return x.SummaryErrors
	}
	return nil
}

func (x *Settings) GetSummaryTimeout() *wrapperspb.Int32Value {
	if x != nil {
		return x.SummaryTimeout
	}
	return nil
}

func (x *Settings) GetSummaryWarnings() *wrapperspb.Int32Value {
	if x != nil {
		return x.SummaryWarnings
	}
	return nil
}

func (x *Settings) GetSweepId() *wrapperspb.StringValue {
	if x != nil {
		return x.SweepId
	}
	return nil
}

func (x *Settings) GetSweepParamPath() *wrapperspb.StringValue {
	if x != nil {
		return x.SweepParamPath
	}
	return nil
}

func (x *Settings) GetSymlink() *wrapperspb.BoolValue {
	if x != nil {
		return x.Symlink
	}
	return nil
}

func (x *Settings) GetSyncDir() *wrapperspb.StringValue {
	if x != nil {
		return x.SyncDir
	}
	return nil
}

func (x *Settings) GetSyncSymlinkLatest() *wrapperspb.StringValue {
	if x != nil {
		return x.SyncSymlinkLatest
	}
	return nil
}

func (x *Settings) GetTableRaiseOnMaxRowLimitExceeded() *wrapperspb.BoolValue {
	if x != nil {
		return x.TableRaiseOnMaxRowLimitExceeded
	}
	return nil
}

func (x *Settings) GetTimespec() *wrapperspb.StringValue {
	if x != nil {
		return x.Timespec
	}
	return nil
}

func (x *Settings) GetTmpDir() *wrapperspb.StringValue {
	if x != nil {
		return x.TmpDir
	}
	return nil
}

func (x *Settings) GetWandbDir() *wrapperspb.StringValue {
	if x != nil {
		return x.WandbDir
	}
	return nil
}

func (x *Settings) GetXJupyterName() *wrapperspb.StringValue {
	if x != nil {
		return x.XJupyterName
	}
	return nil
}

func (x *Settings) GetXJupyterPath() *wrapperspb.StringValue {
	if x != nil {
		return x.XJupyterPath
	}
	return nil
}

func (x *Settings) GetJobName() *wrapperspb.StringValue {
	if x != nil {
		return x.JobName
	}
	return nil
}

var File_wandb_proto_wandb_settings_proto protoreflect.FileDescriptor

var file_wandb_proto_wandb_settings_proto_rawDesc = []byte{
	0x0a, 0x20, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x48, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77,
	0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xde, 0x01, 0x0a, 0x23, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x61, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xad, 0x01, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x4b, 0x0a, 0x09, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x75,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22,
	0xee, 0x5d, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x13, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x14,
	0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x73, 0x6c, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x73, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x5f,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x78, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x78, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0xa2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x75, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x61,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x6c, 0x6f,
	0x67, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x44, 0x69,
	0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x72, 0x12, 0x3d, 0x0a,
	0x0b, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x18, 0xb4, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x44, 0x69, 0x72, 0x12, 0x42, 0x0a, 0x0c,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x73,
	0x12, 0x37, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x52, 0x0a, 0x17, 0x78, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x63, 0x0a,
	0x1f, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x58, 0x0a, 0x14, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x78, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x17,
	0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x78, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78,
	0x12, 0x6b, 0x0a, 0x24, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x69, 0x6e,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x78,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57,
	0x61, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x6b, 0x0a,
	0x24, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x78, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57, 0x61, 0x69, 0x74,
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x5e, 0x0a, 0x1d, 0x78, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x19, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x1c, 0x78, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17,
	0x78, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x78, 0x4c, 0x69,
	0x6e, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x78, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x12,
	0x6f, 0x0a, 0x26, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x20,
	0x78, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x6f, 0x0a, 0x26, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x20, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x63, 0x0a, 0x1f, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x78, 0x46, 0x69, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x9a, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x78, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x4d, 0x61, 0x78, 0x12, 0x64, 0x0a, 0x20, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1b, 0x78, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x4d,
	0x69, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x64, 0x0a, 0x20, 0x78, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x9c, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1b, 0x78, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x57, 0x61, 0x69, 0x74, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x58, 0x0a, 0x19, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x9d, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x16, 0x78, 0x47, 0x72, 0x61, 0x70, 0x68, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x68, 0x74, 0x74,
	0x70, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x68, 0x74,
	0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x3e, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x45, 0x0a, 0x09, 0x78, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x69, 0x65, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x61,
	0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x45, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x70, 0x61, 0x74, 0x68, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x6c, 0x70, 0x61, 0x74, 0x68, 0x12, 0x46, 0x0a,
	0x10, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x5f, 0x61, 0x62, 0x73, 0x70, 0x61, 0x74, 0x68, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x62, 0x73, 0x70, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a,
	0x05, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77,
	0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x41,
	0x72, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x5f, 0x6f, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x4f, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x43, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x78, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x78, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x5f, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x61, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x61, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x34, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x4d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x37, 0x0a, 0x09, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0xa4, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x08, 0x66, 0x6f, 0x72, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x4c, 0x0a, 0x14, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x77, 0x65, 0x65, 0x70,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x77, 0x65, 0x65, 0x70,
	0x55, 0x72, 0x6c, 0x12, 0x50, 0x0a, 0x16, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0xa5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x13, 0x78, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x0e, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x78, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x69, 0x74, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x69, 0x74, 0x12, 0x50, 0x0a,
	0x16, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x78, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x42, 0x0a, 0x0f, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x78, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x58, 0x0a, 0x19, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0xae, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x16, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x78, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x50, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x12, 0x78, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x92, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x67, 0x0a, 0x22, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x5f, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1d, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x6b, 0x0a, 0x1e, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x62, 0x0a, 0x1c,
	0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x52, 0x18, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x71, 0x0a, 0x21, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x77,
	0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x67,
	0x70, 0x75, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xba, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x47, 0x70, 0x75, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x78, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x78, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x54,
	0x0a, 0x18, 0x78, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x78, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xb0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x13, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x78, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x78, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x36,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x18, 0xa6, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74,
	0x12, 0x46, 0x0a, 0x10, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x5f, 0x61, 0x77, 0x73,
	0x5f, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x41, 0x77, 0x73, 0x4c, 0x61,
	0x6d, 0x62, 0x64, 0x61, 0x12, 0x41, 0x0a, 0x0f, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x78, 0x43, 0x6c, 0x69, 0x4f,
	0x6e, 0x6c, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x61,
	0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x61, 0x62, 0x12, 0x46, 0x0a, 0x11, 0x78, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x78, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x63, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14,
	0x78, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x63, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x78, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x15, 0x78, 0x5f,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x51, 0x0a, 0x17, 0x78, 0x5f, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x78, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x18,
	0x78, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x78, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x5f, 0x69, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x49, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x5f, 0x6a,
	0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x0e, 0x78, 0x5f, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x5f, 0x72,
	0x6f, 0x6f, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x78, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x5f, 0x6b, 0x61, 0x67, 0x67, 0x6c, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x4b, 0x61, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x18, 0x78, 0x5f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x78, 0x4c, 0x69, 0x76, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x51, 0x0a, 0x17, 0x78, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x78,
	0x4c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x78, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x78, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x45, 0x0a, 0x10, 0x78, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x78, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x05, 0x5f, 0x6e, 0x6f, 0x6f, 0x70, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x4e, 0x6f, 0x6f, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x12, 0x39, 0x0a, 0x09, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x49, 0x0a, 0x12, 0x78,
	0x5f, 0x72, 0x75, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x78, 0x52, 0x75, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x13, 0x78, 0x5f, 0x73, 0x61, 0x76, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x11, 0x78, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x78, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x78,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x42, 0x0a, 0x0e, 0x78, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x57, 0x61, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x5f, 0x74,
	0x6d, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x54, 0x6d, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x56,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x1f, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x69, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12,
	0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x0e, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x67, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x37, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x67, 0x69, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x48,
	0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x3b, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x51,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a,
	0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x52,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x12, 0x4a, 0x0a, 0x12, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4e,
	0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x53,
	0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x12, 0x46,
	0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x53, 0x79, 0x6d, 0x6c, 0x69,
	0x6e, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x71, 0x75, 0x69, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x69, 0x6e,
	0x69, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x07,
	0x72, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x66, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x46, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x75, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x4a, 0x6f, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72,
	0x75, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x77, 0x61, 0x6e, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x54, 0x61, 0x67, 0x73, 0x12, 0x47, 0x0a,
	0x11, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x61, 0x67, 0x65, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4b, 0x0a,
	0x12, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x6d, 0x6f,
	0x6a, 0x69, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x37, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x79, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x68, 0x6f,
	0x77, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x69, 0x6c,
	0x65, 0x6e, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x7c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x32,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x47, 0x0a, 0x10,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x77, 0x65, 0x65, 0x70, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x10, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x77, 0x65, 0x65, 0x70, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x38, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x85, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x44, 0x69, 0x72, 0x12, 0x4d, 0x0a, 0x13, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x79, 0x6d, 0x6c, 0x69,
	0x6e, 0x6b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x25, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x61, 0x69, 0x73, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x6f, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x61, 0x69, 0x73, 0x65,
	0x4f, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x36, 0x0a, 0x07, 0x74, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x74, 0x6d, 0x70, 0x44, 0x69, 0x72, 0x12, 0x3a, 0x0a, 0x09, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x61, 0x6e, 0x64,
	0x62, 0x44, 0x69, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x78, 0x5f, 0x6a, 0x75, 0x70, 0x79, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x78, 0x4a, 0x75,
	0x70, 0x79, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x78, 0x5f, 0x6a,
	0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x90, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x78, 0x4a, 0x75, 0x70, 0x79, 0x74, 0x65, 0x72, 0x50, 0x61, 0x74, 0x68, 0x12, 0x38,
	0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04,
	0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14,
	0x4a, 0x04, 0x08, 0x24, 0x10, 0x25, 0x4a, 0x04, 0x08, 0x2b, 0x10, 0x2c, 0x4a, 0x04, 0x08, 0x2c,
	0x10, 0x2d, 0x4a, 0x04, 0x08, 0x2d, 0x10, 0x2e, 0x4a, 0x04, 0x08, 0x32, 0x10, 0x33, 0x4a, 0x04,
	0x08, 0x33, 0x10, 0x34, 0x4a, 0x04, 0x08, 0x5b, 0x10, 0x5c, 0x4a, 0x04, 0x08, 0x5e, 0x10, 0x5f,
	0x4a, 0x06, 0x08, 0x88, 0x01, 0x10, 0x89, 0x01, 0x4a, 0x06, 0x08, 0x89, 0x01, 0x10, 0x8a, 0x01,
	0x42, 0x1b, 0x5a, 0x19, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wandb_proto_wandb_settings_proto_rawDescOnce sync.Once
	file_wandb_proto_wandb_settings_proto_rawDescData = file_wandb_proto_wandb_settings_proto_rawDesc
)

func file_wandb_proto_wandb_settings_proto_rawDescGZIP() []byte {
	file_wandb_proto_wandb_settings_proto_rawDescOnce.Do(func() {
		file_wandb_proto_wandb_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_wandb_proto_wandb_settings_proto_rawDescData)
	})
	return file_wandb_proto_wandb_settings_proto_rawDescData
}

var file_wandb_proto_wandb_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_wandb_proto_wandb_settings_proto_goTypes = []interface{}{
	(*ListStringValue)(nil),                     // 0: wandb_internal.ListStringValue
	(*ListIntValue)(nil),                        // 1: wandb_internal.ListIntValue
	(*MapStringKeyStringValue)(nil),             // 2: wandb_internal.MapStringKeyStringValue
	(*MapStringKeyMapStringKeyStringValue)(nil), // 3: wandb_internal.MapStringKeyMapStringKeyStringValue
	(*OpenMetricsFilters)(nil),                  // 4: wandb_internal.OpenMetricsFilters
	(*RunMoment)(nil),                           // 5: wandb_internal.RunMoment
	(*Settings)(nil),                            // 6: wandb_internal.Settings
	nil,                                         // 7: wandb_internal.MapStringKeyStringValue.ValueEntry
	nil,                                         // 8: wandb_internal.MapStringKeyMapStringKeyStringValue.ValueEntry
	(*wrapperspb.StringValue)(nil),              // 9: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),                // 10: google.protobuf.BoolValue
	(*wrapperspb.DoubleValue)(nil),              // 11: google.protobuf.DoubleValue
	(*wrapperspb.Int32Value)(nil),               // 12: google.protobuf.Int32Value
}
var file_wandb_proto_wandb_settings_proto_depIdxs = []int32{
	7,   // 0: wandb_internal.MapStringKeyStringValue.value:type_name -> wandb_internal.MapStringKeyStringValue.ValueEntry
	8,   // 1: wandb_internal.MapStringKeyMapStringKeyStringValue.value:type_name -> wandb_internal.MapStringKeyMapStringKeyStringValue.ValueEntry
	0,   // 2: wandb_internal.OpenMetricsFilters.sequence:type_name -> wandb_internal.ListStringValue
	3,   // 3: wandb_internal.OpenMetricsFilters.mapping:type_name -> wandb_internal.MapStringKeyMapStringKeyStringValue
	9,   // 4: wandb_internal.Settings.api_key:type_name -> google.protobuf.StringValue
	9,   // 5: wandb_internal.Settings.identity_token_file:type_name -> google.protobuf.StringValue
	9,   // 6: wandb_internal.Settings.credentials_file:type_name -> google.protobuf.StringValue
	10,  // 7: wandb_internal.Settings.insecure_disable_ssl:type_name -> google.protobuf.BoolValue
	10,  // 8: wandb_internal.Settings._offline:type_name -> google.protobuf.BoolValue
	10,  // 9: wandb_internal.Settings.x_sync:type_name -> google.protobuf.BoolValue
	9,   // 10: wandb_internal.Settings.sync_file:type_name -> google.protobuf.StringValue
	10,  // 11: wandb_internal.Settings._shared:type_name -> google.protobuf.BoolValue
	9,   // 12: wandb_internal.Settings.run_id:type_name -> google.protobuf.StringValue
	9,   // 13: wandb_internal.Settings.run_url:type_name -> google.protobuf.StringValue
	9,   // 14: wandb_internal.Settings.project:type_name -> google.protobuf.StringValue
	9,   // 15: wandb_internal.Settings.entity:type_name -> google.protobuf.StringValue
	11,  // 16: wandb_internal.Settings.x_start_time:type_name -> google.protobuf.DoubleValue
	9,   // 17: wandb_internal.Settings.root_dir:type_name -> google.protobuf.StringValue
	9,   // 18: wandb_internal.Settings.log_dir:type_name -> google.protobuf.StringValue
	9,   // 19: wandb_internal.Settings.log_internal:type_name -> google.protobuf.StringValue
	9,   // 20: wandb_internal.Settings.files_dir:type_name -> google.protobuf.StringValue
	9,   // 21: wandb_internal.Settings.x_files_dir:type_name -> google.protobuf.StringValue
	0,   // 22: wandb_internal.Settings.ignore_globs:type_name -> wandb_internal.ListStringValue
	9,   // 23: wandb_internal.Settings.base_url:type_name -> google.protobuf.StringValue
	12,  // 24: wandb_internal.Settings.x_file_stream_max_bytes:type_name -> google.protobuf.Int32Value
	11,  // 25: wandb_internal.Settings.x_file_stream_transmit_interval:type_name -> google.protobuf.DoubleValue
	2,   // 26: wandb_internal.Settings.x_extra_http_headers:type_name -> wandb_internal.MapStringKeyStringValue
	12,  // 27: wandb_internal.Settings.x_file_stream_retry_max:type_name -> google.protobuf.Int32Value
	11,  // 28: wandb_internal.Settings.x_file_stream_retry_wait_min_seconds:type_name -> google.protobuf.DoubleValue
	11,  // 29: wandb_internal.Settings.x_file_stream_retry_wait_max_seconds:type_name -> google.protobuf.DoubleValue
	11,  // 30: wandb_internal.Settings.x_file_stream_timeout_seconds:type_name -> google.protobuf.DoubleValue
	12,  // 31: wandb_internal.Settings.x_file_stream_max_line_bytes:type_name -> google.protobuf.Int32Value
	12,  // 32: wandb_internal.Settings.x_file_transfer_retry_max:type_name -> google.protobuf.Int32Value
	11,  // 33: wandb_internal.Settings.x_file_transfer_retry_wait_min_seconds:type_name -> google.protobuf.DoubleValue
	11,  // 34: wandb_internal.Settings.x_file_transfer_retry_wait_max_seconds:type_name -> google.protobuf.DoubleValue
	11,  // 35: wandb_internal.Settings.x_file_transfer_timeout_seconds:type_name -> google.protobuf.DoubleValue
	12,  // 36: wandb_internal.Settings.x_graphql_retry_max:type_name -> google.protobuf.Int32Value
	11,  // 37: wandb_internal.Settings.x_graphql_retry_wait_min_seconds:type_name -> google.protobuf.DoubleValue
	11,  // 38: wandb_internal.Settings.x_graphql_retry_wait_max_seconds:type_name -> google.protobuf.DoubleValue
	11,  // 39: wandb_internal.Settings.x_graphql_timeout_seconds:type_name -> google.protobuf.DoubleValue
	9,   // 40: wandb_internal.Settings.http_proxy:type_name -> google.protobuf.StringValue
	9,   // 41: wandb_internal.Settings.https_proxy:type_name -> google.protobuf.StringValue
	2,   // 42: wandb_internal.Settings.x_proxies:type_name -> wandb_internal.MapStringKeyStringValue
	9,   // 43: wandb_internal.Settings.program:type_name -> google.protobuf.StringValue
	9,   // 44: wandb_internal.Settings.program_relpath:type_name -> google.protobuf.StringValue
	9,   // 45: wandb_internal.Settings._code_path_local:type_name -> google.protobuf.StringValue
	9,   // 46: wandb_internal.Settings.program_abspath:type_name -> google.protobuf.StringValue
	0,   // 47: wandb_internal.Settings._args:type_name -> wandb_internal.ListStringValue
	9,   // 48: wandb_internal.Settings._os:type_name -> google.protobuf.StringValue
	9,   // 49: wandb_internal.Settings.docker:type_name -> google.protobuf.StringValue
	9,   // 50: wandb_internal.Settings.x_executable:type_name -> google.protobuf.StringValue
	9,   // 51: wandb_internal.Settings._python:type_name -> google.protobuf.StringValue
	9,   // 52: wandb_internal.Settings.colab_url:type_name -> google.protobuf.StringValue
	9,   // 53: wandb_internal.Settings.host:type_name -> google.protobuf.StringValue
	9,   // 54: wandb_internal.Settings.username:type_name -> google.protobuf.StringValue
	9,   // 55: wandb_internal.Settings.email:type_name -> google.protobuf.StringValue
	9,   // 56: wandb_internal.Settings.resume:type_name -> google.protobuf.StringValue
	5,   // 57: wandb_internal.Settings.resume_from:type_name -> wandb_internal.RunMoment
	5,   // 58: wandb_internal.Settings.fork_from:type_name -> wandb_internal.RunMoment
	10,  // 59: wandb_internal.Settings.disable_job_creation:type_name -> google.protobuf.BoolValue
	9,   // 60: wandb_internal.Settings.sweep_url:type_name -> google.protobuf.StringValue
	10,  // 61: wandb_internal.Settings.x_disable_update_check:type_name -> google.protobuf.BoolValue
	10,  // 62: wandb_internal.Settings.x_disable_meta:type_name -> google.protobuf.BoolValue
	10,  // 63: wandb_internal.Settings.save_code:type_name -> google.protobuf.BoolValue
	10,  // 64: wandb_internal.Settings.disable_git:type_name -> google.protobuf.BoolValue
	10,  // 65: wandb_internal.Settings.x_disable_machine_info:type_name -> google.protobuf.BoolValue
	10,  // 66: wandb_internal.Settings.x_disable_stats:type_name -> google.protobuf.BoolValue
	12,  // 67: wandb_internal.Settings.x_stats_buffer_size:type_name -> google.protobuf.Int32Value
	11,  // 68: wandb_internal.Settings.x_stats_sampling_interval:type_name -> google.protobuf.DoubleValue
	12,  // 69: wandb_internal.Settings.x_stats_pid:type_name -> google.protobuf.Int32Value
	0,   // 70: wandb_internal.Settings.x_stats_disk_paths:type_name -> wandb_internal.ListStringValue
	9,   // 71: wandb_internal.Settings.x_stats_neuron_monitor_config_path:type_name -> google.protobuf.StringValue
	2,   // 72: wandb_internal.Settings.x_stats_open_metrics_endpoints:type_name -> wandb_internal.MapStringKeyStringValue
	4,   // 73: wandb_internal.Settings.x_stats_open_metrics_filters:type_name -> wandb_internal.OpenMetricsFilters
	2,   // 74: wandb_internal.Settings.x_stats_open_metrics_http_headers:type_name -> wandb_internal.MapStringKeyStringValue
	1,   // 75: wandb_internal.Settings.x_stats_gpu_device_ids:type_name -> wandb_internal.ListIntValue
	9,   // 76: wandb_internal.Settings.x_label:type_name -> google.protobuf.StringValue
	10,  // 77: wandb_internal.Settings.x_require_legacy_service:type_name -> google.protobuf.BoolValue
	10,  // 78: wandb_internal.Settings.x_show_operation_stats:type_name -> google.protobuf.BoolValue
	10,  // 79: wandb_internal.Settings.x_primary_node:type_name -> google.protobuf.BoolValue
	10,  // 80: wandb_internal.Settings.x_update_finish_state:type_name -> google.protobuf.BoolValue
	10,  // 81: wandb_internal.Settings.allow_offline_artifacts:type_name -> google.protobuf.BoolValue
	9,   // 82: wandb_internal.Settings.console:type_name -> google.protobuf.StringValue
	10,  // 83: wandb_internal.Settings.console_multipart:type_name -> google.protobuf.BoolValue
	10,  // 84: wandb_internal.Settings.sync_tensorboard:type_name -> google.protobuf.BoolValue
	10,  // 85: wandb_internal.Settings._aws_lambda:type_name -> google.protobuf.BoolValue
	10,  // 86: wandb_internal.Settings.x_cli_only_mode:type_name -> google.protobuf.BoolValue
	10,  // 87: wandb_internal.Settings._colab:type_name -> google.protobuf.BoolValue
	10,  // 88: wandb_internal.Settings.x_disable_service:type_name -> google.protobuf.BoolValue
	10,  // 89: wandb_internal.Settings.x_disable_setproctitle:type_name -> google.protobuf.BoolValue
	10,  // 90: wandb_internal.Settings.x_disable_viewer:type_name -> google.protobuf.BoolValue
	10,  // 91: wandb_internal.Settings.x_flow_control_custom:type_name -> google.protobuf.BoolValue
	10,  // 92: wandb_internal.Settings.x_flow_control_disabled:type_name -> google.protobuf.BoolValue
	11,  // 93: wandb_internal.Settings.x_internal_check_process:type_name -> google.protobuf.DoubleValue
	10,  // 94: wandb_internal.Settings._ipython:type_name -> google.protobuf.BoolValue
	10,  // 95: wandb_internal.Settings._jupyter:type_name -> google.protobuf.BoolValue
	9,   // 96: wandb_internal.Settings.x_jupyter_root:type_name -> google.protobuf.StringValue
	10,  // 97: wandb_internal.Settings._kaggle:type_name -> google.protobuf.BoolValue
	12,  // 98: wandb_internal.Settings.x_live_policy_rate_limit:type_name -> google.protobuf.Int32Value
	12,  // 99: wandb_internal.Settings.x_live_policy_wait_time:type_name -> google.protobuf.Int32Value
	12,  // 100: wandb_internal.Settings.x_log_level:type_name -> google.protobuf.Int32Value
	12,  // 101: wandb_internal.Settings.x_network_buffer:type_name -> google.protobuf.Int32Value
	10,  // 102: wandb_internal.Settings._noop:type_name -> google.protobuf.BoolValue
	10,  // 103: wandb_internal.Settings._notebook:type_name -> google.protobuf.BoolValue
	9,   // 104: wandb_internal.Settings._platform:type_name -> google.protobuf.StringValue
	9,   // 105: wandb_internal.Settings.x_runqueue_item_id:type_name -> google.protobuf.StringValue
	10,  // 106: wandb_internal.Settings.x_save_requirements:type_name -> google.protobuf.BoolValue
	9,   // 107: wandb_internal.Settings.x_service_transport:type_name -> google.protobuf.StringValue
	11,  // 108: wandb_internal.Settings.x_service_wait:type_name -> google.protobuf.DoubleValue
	9,   // 109: wandb_internal.Settings._start_datetime:type_name -> google.protobuf.StringValue
	9,   // 110: wandb_internal.Settings._tmp_code_dir:type_name -> google.protobuf.StringValue
	10,  // 111: wandb_internal.Settings._windows:type_name -> google.protobuf.BoolValue
	10,  // 112: wandb_internal.Settings.allow_val_change:type_name -> google.protobuf.BoolValue
	9,   // 113: wandb_internal.Settings.anonymous:type_name -> google.protobuf.StringValue
	2,   // 114: wandb_internal.Settings.azure_account_url_to_access_key:type_name -> wandb_internal.MapStringKeyStringValue
	9,   // 115: wandb_internal.Settings.code_dir:type_name -> google.protobuf.StringValue
	0,   // 116: wandb_internal.Settings.config_paths:type_name -> wandb_internal.ListStringValue
	9,   // 117: wandb_internal.Settings.deployment:type_name -> google.protobuf.StringValue
	10,  // 118: wandb_internal.Settings.disable_code:type_name -> google.protobuf.BoolValue
	10,  // 119: wandb_internal.Settings.disable_hints:type_name -> google.protobuf.BoolValue
	10,  // 120: wandb_internal.Settings.disabled:type_name -> google.protobuf.BoolValue
	10,  // 121: wandb_internal.Settings.force:type_name -> google.protobuf.BoolValue
	9,   // 122: wandb_internal.Settings.git_commit:type_name -> google.protobuf.StringValue
	9,   // 123: wandb_internal.Settings.git_remote:type_name -> google.protobuf.StringValue
	9,   // 124: wandb_internal.Settings.git_remote_url:type_name -> google.protobuf.StringValue
	9,   // 125: wandb_internal.Settings.git_root:type_name -> google.protobuf.StringValue
	12,  // 126: wandb_internal.Settings.heartbeat_seconds:type_name -> google.protobuf.Int32Value
	11,  // 127: wandb_internal.Settings.init_timeout:type_name -> google.protobuf.DoubleValue
	10,  // 128: wandb_internal.Settings.is_local:type_name -> google.protobuf.BoolValue
	9,   // 129: wandb_internal.Settings.job_source:type_name -> google.protobuf.StringValue
	10,  // 130: wandb_internal.Settings.label_disable:type_name -> google.protobuf.BoolValue
	10,  // 131: wandb_internal.Settings.launch:type_name -> google.protobuf.BoolValue
	9,   // 132: wandb_internal.Settings.launch_config_path:type_name -> google.protobuf.StringValue
	9,   // 133: wandb_internal.Settings.log_symlink_internal:type_name -> google.protobuf.StringValue
	9,   // 134: wandb_internal.Settings.log_symlink_user:type_name -> google.protobuf.StringValue
	9,   // 135: wandb_internal.Settings.log_user:type_name -> google.protobuf.StringValue
	11,  // 136: wandb_internal.Settings.login_timeout:type_name -> google.protobuf.DoubleValue
	9,   // 137: wandb_internal.Settings.mode:type_name -> google.protobuf.StringValue
	9,   // 138: wandb_internal.Settings.notebook_name:type_name -> google.protobuf.StringValue
	9,   // 139: wandb_internal.Settings.project_url:type_name -> google.protobuf.StringValue
	10,  // 140: wandb_internal.Settings.quiet:type_name -> google.protobuf.BoolValue
	10,  // 141: wandb_internal.Settings.reinit:type_name -> google.protobuf.BoolValue
	10,  // 142: wandb_internal.Settings.relogin:type_name -> google.protobuf.BoolValue
	9,   // 143: wandb_internal.Settings.resume_fname:type_name -> google.protobuf.StringValue
	10,  // 144: wandb_internal.Settings.resumed:type_name -> google.protobuf.BoolValue
	9,   // 145: wandb_internal.Settings.run_group:type_name -> google.protobuf.StringValue
	9,   // 146: wandb_internal.Settings.run_job_type:type_name -> google.protobuf.StringValue
	9,   // 147: wandb_internal.Settings.run_mode:type_name -> google.protobuf.StringValue
	9,   // 148: wandb_internal.Settings.run_name:type_name -> google.protobuf.StringValue
	9,   // 149: wandb_internal.Settings.run_notes:type_name -> google.protobuf.StringValue
	0,   // 150: wandb_internal.Settings.run_tags:type_name -> wandb_internal.ListStringValue
	10,  // 151: wandb_internal.Settings.sagemaker_disable:type_name -> google.protobuf.BoolValue
	9,   // 152: wandb_internal.Settings.settings_system:type_name -> google.protobuf.StringValue
	9,   // 153: wandb_internal.Settings.settings_workspace:type_name -> google.protobuf.StringValue
	10,  // 154: wandb_internal.Settings.show_colors:type_name -> google.protobuf.BoolValue
	10,  // 155: wandb_internal.Settings.show_emoji:type_name -> google.protobuf.BoolValue
	10,  // 156: wandb_internal.Settings.show_errors:type_name -> google.protobuf.BoolValue
	10,  // 157: wandb_internal.Settings.show_info:type_name -> google.protobuf.BoolValue
	10,  // 158: wandb_internal.Settings.show_warnings:type_name -> google.protobuf.BoolValue
	10,  // 159: wandb_internal.Settings.silent:type_name -> google.protobuf.BoolValue
	9,   // 160: wandb_internal.Settings.start_method:type_name -> google.protobuf.StringValue
	10,  // 161: wandb_internal.Settings.strict:type_name -> google.protobuf.BoolValue
	12,  // 162: wandb_internal.Settings.summary_errors:type_name -> google.protobuf.Int32Value
	12,  // 163: wandb_internal.Settings.summary_timeout:type_name -> google.protobuf.Int32Value
	12,  // 164: wandb_internal.Settings.summary_warnings:type_name -> google.protobuf.Int32Value
	9,   // 165: wandb_internal.Settings.sweep_id:type_name -> google.protobuf.StringValue
	9,   // 166: wandb_internal.Settings.sweep_param_path:type_name -> google.protobuf.StringValue
	10,  // 167: wandb_internal.Settings.symlink:type_name -> google.protobuf.BoolValue
	9,   // 168: wandb_internal.Settings.sync_dir:type_name -> google.protobuf.StringValue
	9,   // 169: wandb_internal.Settings.sync_symlink_latest:type_name -> google.protobuf.StringValue
	10,  // 170: wandb_internal.Settings.table_raise_on_max_row_limit_exceeded:type_name -> google.protobuf.BoolValue
	9,   // 171: wandb_internal.Settings.timespec:type_name -> google.protobuf.StringValue
	9,   // 172: wandb_internal.Settings.tmp_dir:type_name -> google.protobuf.StringValue
	9,   // 173: wandb_internal.Settings.wandb_dir:type_name -> google.protobuf.StringValue
	9,   // 174: wandb_internal.Settings.x_jupyter_name:type_name -> google.protobuf.StringValue
	9,   // 175: wandb_internal.Settings.x_jupyter_path:type_name -> google.protobuf.StringValue
	9,   // 176: wandb_internal.Settings.job_name:type_name -> google.protobuf.StringValue
	2,   // 177: wandb_internal.MapStringKeyMapStringKeyStringValue.ValueEntry.value:type_name -> wandb_internal.MapStringKeyStringValue
	178, // [178:178] is the sub-list for method output_type
	178, // [178:178] is the sub-list for method input_type
	178, // [178:178] is the sub-list for extension type_name
	178, // [178:178] is the sub-list for extension extendee
	0,   // [0:178] is the sub-list for field type_name
}

func init() { file_wandb_proto_wandb_settings_proto_init() }
func file_wandb_proto_wandb_settings_proto_init() {
	if File_wandb_proto_wandb_settings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wandb_proto_wandb_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_proto_wandb_settings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIntValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_proto_wandb_settings_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringKeyStringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_proto_wandb_settings_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringKeyMapStringKeyStringValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_proto_wandb_settings_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenMetricsFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_proto_wandb_settings_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunMoment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wandb_proto_wandb_settings_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wandb_proto_wandb_settings_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*OpenMetricsFilters_Sequence)(nil),
		(*OpenMetricsFilters_Mapping)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wandb_proto_wandb_settings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wandb_proto_wandb_settings_proto_goTypes,
		DependencyIndexes: file_wandb_proto_wandb_settings_proto_depIdxs,
		MessageInfos:      file_wandb_proto_wandb_settings_proto_msgTypes,
	}.Build()
	File_wandb_proto_wandb_settings_proto = out.File
	file_wandb_proto_wandb_settings_proto_rawDesc = nil
	file_wandb_proto_wandb_settings_proto_goTypes = nil
	file_wandb_proto_wandb_settings_proto_depIdxs = nil
}
