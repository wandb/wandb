//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

DATA LCDATA1<>+0x000(SB)/8, $0x7fffffff7fffffff
DATA LCDATA1<>+0x008(SB)/8, $0x3fffffff3fffffff
DATA LCDATA1<>+0x010(SB)/8, $0x1fffffff1fffffff
DATA LCDATA1<>+0x018(SB)/8, $0x0fffffff0fffffff
DATA LCDATA1<>+0x020(SB)/8, $0x07ffffff07ffffff
DATA LCDATA1<>+0x028(SB)/8, $0x03ffffff03ffffff
DATA LCDATA1<>+0x030(SB)/8, $0x0000000a00000010
DATA LCDATA1<>+0x038(SB)/8, $0x0000001600000010
DATA LCDATA1<>+0x040(SB)/8, $0x01ffffff01ffffff
DATA LCDATA1<>+0x048(SB)/8, $0x007fffff007fffff
DATA LCDATA1<>+0x050(SB)/8, $0x003fffff003fffff
DATA LCDATA1<>+0x058(SB)/8, $0x001fffff001fffff
DATA LCDATA1<>+0x060(SB)/8, $0x000fffff000fffff
DATA LCDATA1<>+0x068(SB)/8, $0x0007ffff0007ffff
DATA LCDATA1<>+0x070(SB)/8, $0x0003ffff0003ffff
DATA LCDATA1<>+0x078(SB)/8, $0x0001ffff0001ffff
DATA LCDATA1<>+0x080(SB)/8, $0x0000001000000000
DATA LCDATA1<>+0x088(SB)/8, $0x00007fff00007fff
DATA LCDATA1<>+0x090(SB)/8, $0x00003fff00003fff
DATA LCDATA1<>+0x098(SB)/8, $0x00001fff00001fff
DATA LCDATA1<>+0x0a0(SB)/8, $0x00000fff00000fff
DATA LCDATA1<>+0x0a8(SB)/8, $0x000007ff000007ff
DATA LCDATA1<>+0x0b0(SB)/8, $0x000003ff000003ff
DATA LCDATA1<>+0x0b8(SB)/8, $0x000001ff000001ff
DATA LCDATA1<>+0x0c0(SB)/8, $0x0000007f0000007f
DATA LCDATA1<>+0x0c8(SB)/8, $0x0000003f0000003f
DATA LCDATA1<>+0x0d0(SB)/8, $0x0000001f0000001f
DATA LCDATA1<>+0x0d8(SB)/8, $0x0000000f0000000f
DATA LCDATA1<>+0x0e0(SB)/8, $0x0000000700000007
DATA LCDATA1<>+0x0e8(SB)/8, $0x0000000300000003
DATA LCDATA1<>+0x0f0(SB)/8, $0x0000000100000001
DATA LCDATA1<>+0x0f8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x100(SB)/8, $0x0000001700000018
DATA LCDATA1<>+0x108(SB)/8, $0x0000001500000016
DATA LCDATA1<>+0x110(SB)/8, $0x0000001300000014
DATA LCDATA1<>+0x118(SB)/8, $0x0000001100000012
DATA LCDATA1<>+0x120(SB)/8, $0x0000000900000008
DATA LCDATA1<>+0x128(SB)/8, $0x0000000b0000000a
DATA LCDATA1<>+0x130(SB)/8, $0x0000000d0000000c
DATA LCDATA1<>+0x138(SB)/8, $0x0000000f0000000e
DATA LCDATA1<>+0x140(SB)/8, $0x0000000f00000010
DATA LCDATA1<>+0x148(SB)/8, $0x0000000d0000000e
DATA LCDATA1<>+0x150(SB)/8, $0x0000000b0000000c
DATA LCDATA1<>+0x158(SB)/8, $0x000000090000000a
DATA LCDATA1<>+0x160(SB)/8, $0x0000001100000010
DATA LCDATA1<>+0x168(SB)/8, $0x0000001300000012
DATA LCDATA1<>+0x170(SB)/8, $0x0000001500000014
DATA LCDATA1<>+0x178(SB)/8, $0x0000001700000016
DATA LCDATA1<>+0x180(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x188(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x190(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x198(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x1a0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1a8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1b0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1b8(SB)/8, $0x0000000200000000
DATA LCDATA1<>+0x1c0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1c8(SB)/8, $0x0000000000000002
DATA LCDATA1<>+0x1d0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1d8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1e0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1e8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x1f0(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x1f8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x200(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x208(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x210(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x218(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x220(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x228(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x230(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x238(SB)/8, $0x0000000400000000
DATA LCDATA1<>+0x240(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x248(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x250(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x258(SB)/8, $0x0000000000000002
DATA LCDATA1<>+0x260(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x268(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x270(SB)/8, $0x0000000000000004
DATA LCDATA1<>+0x278(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x280(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x288(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x290(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x298(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x2a0(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x2a8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x2b0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x2b8(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x2c0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x2c8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x2d0(SB)/8, $0x0000000200000000
DATA LCDATA1<>+0x2d8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x2e0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x2e8(SB)/8, $0x0000000000000004
DATA LCDATA1<>+0x2f0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x2f8(SB)/8, $0x0000000600000000
DATA LCDATA1<>+0x300(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x308(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x310(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x318(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x320(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x328(SB)/8, $0x0000000000000002
DATA LCDATA1<>+0x330(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x338(SB)/8, $0x0000000000000006
DATA LCDATA1<>+0x340(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x348(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x350(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x358(SB)/8, $0x0000000700000000
DATA LCDATA1<>+0x360(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x368(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x370(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x378(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x380(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x388(SB)/8, $0x0000000000000006
DATA LCDATA1<>+0x390(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x398(SB)/8, $0x0000000000000002
DATA LCDATA1<>+0x3a0(SB)/8, $0x0000000700000000
DATA LCDATA1<>+0x3a8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x3b0(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x3b8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x3c0(SB)/8, $0x0000000000000008
DATA LCDATA1<>+0x3c8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x3d0(SB)/8, $0x0000000000000004
DATA LCDATA1<>+0x3d8(SB)/8, $0x0000000900000000
DATA LCDATA1<>+0x3e0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x3e8(SB)/8, $0x0000000200000000
DATA LCDATA1<>+0x3f0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x3f8(SB)/8, $0x0000000000000004
DATA LCDATA1<>+0x400(SB)/8, $0x0000000600000000
DATA LCDATA1<>+0x408(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x410(SB)/8, $0x0000000000000008
DATA LCDATA1<>+0x418(SB)/8, $0x0000000a00000000
DATA LCDATA1<>+0x420(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x428(SB)/8, $0x000000000000000a
DATA LCDATA1<>+0x430(SB)/8, $0x0000000900000000
DATA LCDATA1<>+0x438(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x440(SB)/8, $0x0000000000000008
DATA LCDATA1<>+0x448(SB)/8, $0x0000000700000000
DATA LCDATA1<>+0x450(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x458(SB)/8, $0x0000000000000006
DATA LCDATA1<>+0x460(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x468(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x470(SB)/8, $0x0000000000000004
DATA LCDATA1<>+0x478(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x480(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x488(SB)/8, $0x0000000000000002
DATA LCDATA1<>+0x490(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x498(SB)/8, $0x0000000b00000000
DATA LCDATA1<>+0x4a0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x4a8(SB)/8, $0x0000000000000008
DATA LCDATA1<>+0x4b0(SB)/8, $0x0000000400000000
DATA LCDATA1<>+0x4b8(SB)/8, $0x0000000c00000000
DATA LCDATA1<>+0x4c0(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x4c8(SB)/8, $0x0000000000000006
DATA LCDATA1<>+0x4d0(SB)/8, $0x000000000000000c
DATA LCDATA1<>+0x4d8(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x4e0(SB)/8, $0x0000000b00000000
DATA LCDATA1<>+0x4e8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x4f0(SB)/8, $0x0000000000000004
DATA LCDATA1<>+0x4f8(SB)/8, $0x000000000000000a
DATA LCDATA1<>+0x500(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x508(SB)/8, $0x0000000900000000
DATA LCDATA1<>+0x510(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x518(SB)/8, $0x0000000000000002
DATA LCDATA1<>+0x520(SB)/8, $0x0000000000000008
DATA LCDATA1<>+0x528(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x530(SB)/8, $0x0000000700000000
DATA LCDATA1<>+0x538(SB)/8, $0x0000000d00000000
DATA LCDATA1<>+0x540(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x548(SB)/8, $0x0000000000000004
DATA LCDATA1<>+0x550(SB)/8, $0x0000000000000008
DATA LCDATA1<>+0x558(SB)/8, $0x000000000000000c
DATA LCDATA1<>+0x560(SB)/8, $0x0000000200000000
DATA LCDATA1<>+0x568(SB)/8, $0x0000000600000000
DATA LCDATA1<>+0x570(SB)/8, $0x0000000a00000000
DATA LCDATA1<>+0x578(SB)/8, $0x0000000e00000000
DATA LCDATA1<>+0x580(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0x588(SB)/8, $0x0000000000000002
DATA LCDATA1<>+0x590(SB)/8, $0x0000000000000004
DATA LCDATA1<>+0x598(SB)/8, $0x0000000000000006
DATA LCDATA1<>+0x5a0(SB)/8, $0x0000000000000008
DATA LCDATA1<>+0x5a8(SB)/8, $0x000000000000000a
DATA LCDATA1<>+0x5b0(SB)/8, $0x000000000000000c
DATA LCDATA1<>+0x5b8(SB)/8, $0x000000000000000e
DATA LCDATA1<>+0x5c0(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x5c8(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x5d0(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x5d8(SB)/8, $0x0000000700000000
DATA LCDATA1<>+0x5e0(SB)/8, $0x0000000900000000
DATA LCDATA1<>+0x5e8(SB)/8, $0x0000000b00000000
DATA LCDATA1<>+0x5f0(SB)/8, $0x0000000d00000000
DATA LCDATA1<>+0x5f8(SB)/8, $0x0000000f00000000
DATA LCDATA1<>+0x600(SB)/8, $0x0000000f00000000
DATA LCDATA1<>+0x608(SB)/8, $0x0000000d00000000
DATA LCDATA1<>+0x610(SB)/8, $0x0000000b00000000
DATA LCDATA1<>+0x618(SB)/8, $0x0000000900000000
DATA LCDATA1<>+0x620(SB)/8, $0x0000000700000000
DATA LCDATA1<>+0x628(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x630(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x638(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x640(SB)/8, $0x0000000000000010
DATA LCDATA1<>+0x648(SB)/8, $0x000000000000000e
DATA LCDATA1<>+0x650(SB)/8, $0x000000000000000c
DATA LCDATA1<>+0x658(SB)/8, $0x000000000000000a
DATA LCDATA1<>+0x660(SB)/8, $0x0000000000000008
DATA LCDATA1<>+0x668(SB)/8, $0x0000000000000006
DATA LCDATA1<>+0x670(SB)/8, $0x0000000000000004
DATA LCDATA1<>+0x678(SB)/8, $0x0000001100000002
DATA LCDATA1<>+0x680(SB)/8, $0x0000000e00000000
DATA LCDATA1<>+0x688(SB)/8, $0x0000000a00000000
DATA LCDATA1<>+0x690(SB)/8, $0x0000000600000000
DATA LCDATA1<>+0x698(SB)/8, $0x0000000200000000
DATA LCDATA1<>+0x6a0(SB)/8, $0x0000000000000010
DATA LCDATA1<>+0x6a8(SB)/8, $0x000000000000000c
DATA LCDATA1<>+0x6b0(SB)/8, $0x0000000000000008
DATA LCDATA1<>+0x6b8(SB)/8, $0x0000001200000004
DATA LCDATA1<>+0x6c0(SB)/8, $0x0000000d00000000
DATA LCDATA1<>+0x6c8(SB)/8, $0x0000000700000000
DATA LCDATA1<>+0x6d0(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x6d8(SB)/8, $0x000000000000000e
DATA LCDATA1<>+0x6e0(SB)/8, $0x0000000000000008
DATA LCDATA1<>+0x6e8(SB)/8, $0x0000000f00000002
DATA LCDATA1<>+0x6f0(SB)/8, $0x0000000900000000
DATA LCDATA1<>+0x6f8(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x700(SB)/8, $0x0000000000000010
DATA LCDATA1<>+0x708(SB)/8, $0x000000000000000a
DATA LCDATA1<>+0x710(SB)/8, $0x0000001100000004
DATA LCDATA1<>+0x718(SB)/8, $0x0000000b00000000
DATA LCDATA1<>+0x720(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x728(SB)/8, $0x0000000000000012
DATA LCDATA1<>+0x730(SB)/8, $0x000000000000000c
DATA LCDATA1<>+0x738(SB)/8, $0x0000001300000006
DATA LCDATA1<>+0x740(SB)/8, $0x0000000c00000000
DATA LCDATA1<>+0x748(SB)/8, $0x0000000400000000
DATA LCDATA1<>+0x750(SB)/8, $0x0000000000000010
DATA LCDATA1<>+0x758(SB)/8, $0x0000001400000008
DATA LCDATA1<>+0x760(SB)/8, $0x0000000b00000000
DATA LCDATA1<>+0x768(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x770(SB)/8, $0x000000000000000c
DATA LCDATA1<>+0x778(SB)/8, $0x0000000d00000002
DATA LCDATA1<>+0x780(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x788(SB)/8, $0x000000000000000e
DATA LCDATA1<>+0x790(SB)/8, $0x0000000f00000004
DATA LCDATA1<>+0x798(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x7a0(SB)/8, $0x0000000000000010
DATA LCDATA1<>+0x7a8(SB)/8, $0x0000001100000006
DATA LCDATA1<>+0x7b0(SB)/8, $0x0000000700000000
DATA LCDATA1<>+0x7b8(SB)/8, $0x0000000000000012
DATA LCDATA1<>+0x7c0(SB)/8, $0x0000001300000008
DATA LCDATA1<>+0x7c8(SB)/8, $0x0000000900000000
DATA LCDATA1<>+0x7d0(SB)/8, $0x0000000000000014
DATA LCDATA1<>+0x7d8(SB)/8, $0x000000150000000a
DATA LCDATA1<>+0x7e0(SB)/8, $0x0000000a00000000
DATA LCDATA1<>+0x7e8(SB)/8, $0x0000000000000014
DATA LCDATA1<>+0x7f0(SB)/8, $0x0000001200000008
DATA LCDATA1<>+0x7f8(SB)/8, $0x0000000600000000
DATA LCDATA1<>+0x800(SB)/8, $0x0000000000000010
DATA LCDATA1<>+0x808(SB)/8, $0x0000000e00000004
DATA LCDATA1<>+0x810(SB)/8, $0x0000000200000000
DATA LCDATA1<>+0x818(SB)/8, $0x000000160000000c
DATA LCDATA1<>+0x820(SB)/8, $0x0000000900000000
DATA LCDATA1<>+0x828(SB)/8, $0x0000000000000012
DATA LCDATA1<>+0x830(SB)/8, $0x0000000d00000004
DATA LCDATA1<>+0x838(SB)/8, $0x0000000000000016
DATA LCDATA1<>+0x840(SB)/8, $0x0000001100000008
DATA LCDATA1<>+0x848(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x850(SB)/8, $0x000000150000000c
DATA LCDATA1<>+0x858(SB)/8, $0x0000000700000000
DATA LCDATA1<>+0x860(SB)/8, $0x0000000000000010
DATA LCDATA1<>+0x868(SB)/8, $0x0000000b00000002
DATA LCDATA1<>+0x870(SB)/8, $0x0000000000000014
DATA LCDATA1<>+0x878(SB)/8, $0x0000000f00000006
DATA LCDATA1<>+0x880(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x888(SB)/8, $0x000000130000000a
DATA LCDATA1<>+0x890(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x898(SB)/8, $0x000000170000000e
DATA LCDATA1<>+0x8a0(SB)/8, $0x0000000700000000
DATA LCDATA1<>+0x8a8(SB)/8, $0x000000150000000e
DATA LCDATA1<>+0x8b0(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x8b8(SB)/8, $0x000000110000000a
DATA LCDATA1<>+0x8c0(SB)/8, $0x0000000000000018
DATA LCDATA1<>+0x8c8(SB)/8, $0x0000000d00000006
DATA LCDATA1<>+0x8d0(SB)/8, $0x0000000000000014
DATA LCDATA1<>+0x8d8(SB)/8, $0x0000000900000002
DATA LCDATA1<>+0x8e0(SB)/8, $0x0000001700000010
DATA LCDATA1<>+0x8e8(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x8f0(SB)/8, $0x000000130000000c
DATA LCDATA1<>+0x8f8(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x900(SB)/8, $0x0000000f00000008
DATA LCDATA1<>+0x908(SB)/8, $0x0000000000000016
DATA LCDATA1<>+0x910(SB)/8, $0x0000000b00000004
DATA LCDATA1<>+0x918(SB)/8, $0x0000001900000012
DATA LCDATA1<>+0x920(SB)/8, $0x0000000600000000
DATA LCDATA1<>+0x928(SB)/8, $0x000000120000000c
DATA LCDATA1<>+0x930(SB)/8, $0x0000000000000018
DATA LCDATA1<>+0x938(SB)/8, $0x0000000a00000004
DATA LCDATA1<>+0x940(SB)/8, $0x0000001600000010
DATA LCDATA1<>+0x948(SB)/8, $0x0000000200000000
DATA LCDATA1<>+0x950(SB)/8, $0x0000000e00000008
DATA LCDATA1<>+0x958(SB)/8, $0x0000001a00000014
DATA LCDATA1<>+0x960(SB)/8, $0x0000000500000000
DATA LCDATA1<>+0x968(SB)/8, $0x0000000f0000000a
DATA LCDATA1<>+0x970(SB)/8, $0x0000001900000014
DATA LCDATA1<>+0x978(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0x980(SB)/8, $0x0000000d00000008
DATA LCDATA1<>+0x988(SB)/8, $0x0000001700000012
DATA LCDATA1<>+0x990(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0x998(SB)/8, $0x0000000b00000006
DATA LCDATA1<>+0x9a0(SB)/8, $0x0000001500000010
DATA LCDATA1<>+0x9a8(SB)/8, $0x000000000000001a
DATA LCDATA1<>+0x9b0(SB)/8, $0x0000000900000004
DATA LCDATA1<>+0x9b8(SB)/8, $0x000000130000000e
DATA LCDATA1<>+0x9c0(SB)/8, $0x0000000000000018
DATA LCDATA1<>+0x9c8(SB)/8, $0x0000000700000002
DATA LCDATA1<>+0x9d0(SB)/8, $0x000000110000000c
DATA LCDATA1<>+0x9d8(SB)/8, $0x0000001b00000016
DATA LCDATA1<>+0x9e0(SB)/8, $0x0000000400000000
DATA LCDATA1<>+0x9e8(SB)/8, $0x0000000c00000008
DATA LCDATA1<>+0x9f0(SB)/8, $0x0000001400000010
DATA LCDATA1<>+0x9f8(SB)/8, $0x0000001c00000018
DATA LCDATA1<>+0xa00(SB)/8, $0x0000000300000000
DATA LCDATA1<>+0xa08(SB)/8, $0x0000000900000006
DATA LCDATA1<>+0xa10(SB)/8, $0x0000000f0000000c
DATA LCDATA1<>+0xa18(SB)/8, $0x0000001500000012
DATA LCDATA1<>+0xa20(SB)/8, $0x0000001b00000018
DATA LCDATA1<>+0xa28(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0xa30(SB)/8, $0x0000000700000004
DATA LCDATA1<>+0xa38(SB)/8, $0x0000000d0000000a
DATA LCDATA1<>+0xa40(SB)/8, $0x0000001300000010
DATA LCDATA1<>+0xa48(SB)/8, $0x0000001900000016
DATA LCDATA1<>+0xa50(SB)/8, $0x000000000000001c
DATA LCDATA1<>+0xa58(SB)/8, $0x0000000500000002
DATA LCDATA1<>+0xa60(SB)/8, $0x0000000b00000008
DATA LCDATA1<>+0xa68(SB)/8, $0x000000110000000e
DATA LCDATA1<>+0xa70(SB)/8, $0x0000001700000014
DATA LCDATA1<>+0xa78(SB)/8, $0x0000001d0000001a
DATA LCDATA1<>+0xa80(SB)/8, $0x0000000200000000
DATA LCDATA1<>+0xa88(SB)/8, $0x0000000600000004
DATA LCDATA1<>+0xa90(SB)/8, $0x0000000a00000008
DATA LCDATA1<>+0xa98(SB)/8, $0x0000000e0000000c
DATA LCDATA1<>+0xaa0(SB)/8, $0x0000001200000010
DATA LCDATA1<>+0xaa8(SB)/8, $0x0000001600000014
DATA LCDATA1<>+0xab0(SB)/8, $0x0000001a00000018
DATA LCDATA1<>+0xab8(SB)/8, $0x0000001e0000001c
DATA LCDATA1<>+0xac0(SB)/8, $0x0000000100000000
DATA LCDATA1<>+0xac8(SB)/8, $0x0000000300000002
DATA LCDATA1<>+0xad0(SB)/8, $0x0000000500000004
DATA LCDATA1<>+0xad8(SB)/8, $0x0000000700000006
DATA LCDATA1<>+0xae0(SB)/8, $0x0000001900000018
DATA LCDATA1<>+0xae8(SB)/8, $0x0000001b0000001a
DATA LCDATA1<>+0xaf0(SB)/8, $0x0000001d0000001c
DATA LCDATA1<>+0xaf8(SB)/8, $0x0000001f0000001e
DATA LCDATA1<>+0xb00(SB)/8, $0x0000000700000008
DATA LCDATA1<>+0xb08(SB)/8, $0x0000000500000006
DATA LCDATA1<>+0xb10(SB)/8, $0x0000001900000018
DATA LCDATA1<>+0xb18(SB)/8, $0x0000001b0000001a
DATA LCDATA1<>+0xb20(SB)/8, $0x0000000e00000010
DATA LCDATA1<>+0xb28(SB)/8, $0x0000000a0000000c
DATA LCDATA1<>+0xb30(SB)/8, $0x0000001200000010
DATA LCDATA1<>+0xb38(SB)/8, $0x0000001600000014
DATA LCDATA1<>+0xb40(SB)/8, $0x0000000500000008
DATA LCDATA1<>+0xb48(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xb50(SB)/8, $0x0000001b00000018
DATA LCDATA1<>+0xb58(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xb60(SB)/8, $0x0000000d00000010
DATA LCDATA1<>+0xb68(SB)/8, $0x000000070000000a
DATA LCDATA1<>+0xb70(SB)/8, $0x0000001300000010
DATA LCDATA1<>+0xb78(SB)/8, $0x0000001900000016
DATA LCDATA1<>+0xb80(SB)/8, $0x0000001500000018
DATA LCDATA1<>+0xb88(SB)/8, $0x0000000f00000012
DATA LCDATA1<>+0xb90(SB)/8, $0x0000000b00000008
DATA LCDATA1<>+0xb98(SB)/8, $0x000000110000000e
DATA LCDATA1<>+0xba0(SB)/8, $0x0000001300000018
DATA LCDATA1<>+0xba8(SB)/8, $0x000000090000000e
DATA LCDATA1<>+0xbb0(SB)/8, $0x0000000d00000008
DATA LCDATA1<>+0xbb8(SB)/8, $0x0000001700000012
DATA LCDATA1<>+0xbc0(SB)/8, $0x0000000b00000010
DATA LCDATA1<>+0xbc8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xbd0(SB)/8, $0x0000001500000010
DATA LCDATA1<>+0xbd8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xbe0(SB)/8, $0x0000000900000010
DATA LCDATA1<>+0xbe8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xbf0(SB)/8, $0x0000001700000010
DATA LCDATA1<>+0xbf8(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xc00(SB)/8, $0x0000001100000018
DATA LCDATA1<>+0xc08(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xc10(SB)/8, $0x0000000f00000008
DATA LCDATA1<>+0xc18(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xc20(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xc28(SB)/8, $0x0000000800000000
DATA LCDATA1<>+0xc30(SB)/8, $0x0000000f00000018
DATA LCDATA1<>+0xc38(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xc40(SB)/8, $0x0000001100000008
DATA LCDATA1<>+0xc48(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xc50(SB)/8, $0x0000000d00000018
DATA LCDATA1<>+0xc58(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xc60(SB)/8, $0x0000001300000008
DATA LCDATA1<>+0xc68(SB)/8, $0x0000000000000000
DATA LCDATA1<>+0xc70(SB)/8, $0x0000000800000000
DATA LCDATA1<>+0xc78(SB)/8, $0x0000001800000010
DATA LCDATA1<>+0xc80(SB)/8, $0x000000ff00ffffff
GLOBL LCDATA1<>(SB), 8, $3208

TEXT ·_unpack32_avx2(SB), $24-40

	MOVQ in+0(FP), DI
	MOVQ out+8(FP), SI
	MOVQ batchSize+16(FP), DX
	MOVQ nbits+24(FP), CX
	MOVQ SP, BP
	ADDQ $16, SP
	ANDQ $-16, SP
	MOVQ BP, 0(SP)
	LEAQ LCDATA1<>(SB), BP

	WORD $0x8949; BYTE $0xf7 // mov    r15, rsi
	WORD $0x8948; BYTE $0xfb // mov    rbx, rdi
	LONG $0x1f728d44         // lea    r14d, [rdx + 31]
	WORD $0xd285             // test    edx, edx
	LONG $0xf2490f44         // cmovns    r14d, edx
	LONG $0x05fec141         // sar    r14d, 5
	WORD $0xf983; BYTE $0x0f // cmp    ecx, 15
	JLE  LBB0_1
	WORD $0xf983; BYTE $0x17 // cmp    ecx, 23
	JLE  LBB0_49
	WORD $0xf983; BYTE $0x1b // cmp    ecx, 27
	JLE  LBB0_73
	WORD $0xf983; BYTE $0x1d // cmp    ecx, 29
	JLE  LBB0_85
	WORD $0xf983; BYTE $0x1e // cmp    ecx, 30
	JE   LBB0_99
	WORD $0xf983; BYTE $0x1f // cmp    ecx, 31
	JE   LBB0_96
	WORD $0xf983; BYTE $0x20 // cmp    ecx, 32
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20 // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf4 // mov    r12d, r14d

LBB0_95:
	LONG $0x000080ba; BYTE $0x00 // mov    edx, 128
	WORD $0x894c; BYTE $0xff     // mov    rdi, r15
	WORD $0x8948; BYTE $0xde     // mov    rsi, rbx
	CALL clib·_memcpy(SB)
	LONG $0x80eb8348             // sub    rbx, -128
	LONG $0x80ef8349             // sub    r15, -128
	LONG $0xffc48349             // add    r12, -1
	JNE  LBB0_95
	JMP  LBB0_147

LBB0_1:
	WORD $0xf983; BYTE $0x07             // cmp    ecx, 7
	JG   LBB0_25
	WORD $0xf983; BYTE $0x03             // cmp    ecx, 3
	JG   LBB0_14
	WORD $0xf983; BYTE $0x01             // cmp    ecx, 1
	JG   LBB0_9
	WORD $0xc985                         // test    ecx, ecx
	JE   LBB0_144
	WORD $0xf983; BYTE $0x01             // cmp    ecx, 1
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8944; BYTE $0xf0             // mov    eax, r14d
	LONG $0x60c78349                     // add    r15, 96
	WORD $0xc931                         // xor    ecx, ecx
	QUAD $0x0000f085597de2c4; BYTE $0x00 // vpbroadcastq    ymm0, qword 240[rbp] /* [rip + .LCPI0_135] */
	QUAD $0x00000ac08d6ffdc5             // vmovdqa    ymm1, yword 2752[rbp] /* [rip + .LCPI0_134] */
	QUAD $0x00000120956ffdc5             // vmovdqa    ymm2, yword 288[rbp] /* [rip + .LCPI0_2] */
	QUAD $0x000001609d6ffdc5             // vmovdqa    ymm3, yword 352[rbp] /* [rip + .LCPI0_4] */
	QUAD $0x00000ae0a56ffdc5             // vmovdqa    ymm4, yword 2784[rbp] /* [rip + .LCPI0_136] */

LBB0_8:
	LONG $0x587de2c4; WORD $0x8b2c // vpbroadcastd    ymm5, dword [rbx + 4*rcx]
	LONG $0x4555e2c4; BYTE $0xe9   // vpsrlvd    ymm5, ymm5, ymm1
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	LONG $0x587de2c4; WORD $0x8b2c // vpbroadcastd    ymm5, dword [rbx + 4*rcx]
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	LONG $0x587de2c4; WORD $0x8b2c // vpbroadcastd    ymm5, dword [rbx + 4*rcx]
	LONG $0x4555e2c4; BYTE $0xeb   // vpsrlvd    ymm5, ymm5, ymm3
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	LONG $0x587de2c4; WORD $0x8b2c // vpbroadcastd    ymm5, dword [rbx + 4*rcx]
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x01c18348               // add    rcx, 1
	LONG $0x80ef8349               // sub    r15, -128
	WORD $0x3948; BYTE $0xc8       // cmp    rax, rcx
	JNE  LBB0_8
	JMP  LBB0_147

LBB0_49:
	WORD $0xf983; BYTE $0x13       // cmp    ecx, 19
	JG   LBB0_61
	WORD $0xf983; BYTE $0x11       // cmp    ecx, 17
	JG   LBB0_56
	WORD $0xf983; BYTE $0x10       // cmp    ecx, 16
	JE   LBB0_120
	WORD $0xf983; BYTE $0x11       // cmp    ecx, 17
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x40c38348               // add    rbx, 64
	LONG $0x597de2c4; WORD $0x7845 // vpbroadcastq    ymm0, qword 120[rbp] /* [rip + .LCPI0_76] */
	QUAD $0x000005808d6ffdc5       // vmovdqa    ymm1, yword 1408[rbp] /* [rip + .LCPI0_75] */
	QUAD $0x000005a0956ffdc5       // vmovdqa    ymm2, yword 1440[rbp] /* [rip + .LCPI0_77] */
	QUAD $0x000005c09d6ffdc5       // vmovdqa    ymm3, yword 1472[rbp] /* [rip + .LCPI0_78] */
	QUAD $0x000005e0a56ffdc5       // vmovdqa    ymm4, yword 1504[rbp] /* [rip + .LCPI0_79] */

LBB0_55:
	WORD $0x4b8b; BYTE $0xcc       // mov    ecx, dword [rbx - 52]
	LONG $0xd0538b44               // mov    r10d, dword [rbx - 48]
	LONG $0xcaa40f41; BYTE $0x09   // shld    r10d, ecx, 9
	WORD $0x738b; BYTE $0xc8       // mov    esi, dword [rbx - 56]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0x0bf7a40f               // shld    edi, esi, 11
	LONG $0xc04b8b44               // mov    r9d, dword [rbx - 64]
	WORD $0x538b; BYTE $0xc4       // mov    edx, dword [rbx - 60]
	WORD $0xd089                   // mov    eax, edx
	LONG $0xc8a40f44; BYTE $0x0f   // shld    eax, r9d, 15
	LONG $0xee6ef9c5               // vmovd    xmm5, esi
	LONG $0x0dd6a40f               // shld    esi, edx, 13
	LONG $0x2251e3c4; WORD $0x01ef // vpinsrd    xmm5, xmm5, edi, 1
	LONG $0x2251e3c4; WORD $0x02e9 // vpinsrd    xmm5, xmm5, ecx, 2
	LONG $0x2251c3c4; WORD $0x03ea // vpinsrd    xmm5, xmm5, r10d, 3
	LONG $0x6e79c1c4; BYTE $0xf1   // vmovd    xmm6, r9d
	LONG $0x2249e3c4; WORD $0x01f0 // vpinsrd    xmm6, xmm6, eax, 1
	LONG $0x2249e3c4; WORD $0x02f2 // vpinsrd    xmm6, xmm6, edx, 2
	LONG $0x2249e3c4; WORD $0x03f6 // vpinsrd    xmm6, xmm6, esi, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xe9   // vpsrlvd    ymm5, ymm5, ymm1
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	WORD $0x438b; BYTE $0xdc       // mov    eax, dword [rbx - 36]
	LONG $0xe0538b44               // mov    r10d, dword [rbx - 32]
	LONG $0xc2a40f41; BYTE $0x01   // shld    r10d, eax, 1
	WORD $0x538b; BYTE $0xd8       // mov    edx, dword [rbx - 40]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x03d6a40f               // shld    esi, edx, 3
	LONG $0xd04b8b44               // mov    r9d, dword [rbx - 48]
	WORD $0x4b8b; BYTE $0xd4       // mov    ecx, dword [rbx - 44]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0xcfa40f44; BYTE $0x07   // shld    edi, r9d, 7
	LONG $0xea6ef9c5               // vmovd    xmm5, edx
	LONG $0x05caa40f               // shld    edx, ecx, 5
	LONG $0x2251e3c4; WORD $0x01ee // vpinsrd    xmm5, xmm5, esi, 1
	LONG $0x2251e3c4; WORD $0x02e8 // vpinsrd    xmm5, xmm5, eax, 2
	LONG $0x2251c3c4; WORD $0x03ea // vpinsrd    xmm5, xmm5, r10d, 3
	LONG $0x6e79c1c4; BYTE $0xf1   // vmovd    xmm6, r9d
	LONG $0x2249e3c4; WORD $0x01f7 // vpinsrd    xmm6, xmm6, edi, 1
	LONG $0x2249e3c4; WORD $0x02f1 // vpinsrd    xmm6, xmm6, ecx, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	LONG $0xf04b8b44               // mov    r9d, dword [rbx - 16]
	LONG $0xec5b8b44               // mov    r11d, dword [rbx - 20]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0xdaa40f44; BYTE $0x0a   // shld    edx, r11d, 10
	LONG $0xe8538b44               // mov    r10d, dword [rbx - 24]
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0xd7a40f44; BYTE $0x0c   // shld    edi, r10d, 12
	WORD $0x438b; BYTE $0xe4       // mov    eax, dword [rbx - 28]
	WORD $0x8944; BYTE $0xd6       // mov    esi, r10d
	LONG $0x0ec6a40f               // shld    esi, eax, 14
	WORD $0x4b8b; BYTE $0xe0       // mov    ecx, dword [rbx - 32]
	LONG $0x10c1ac0f               // shrd    ecx, eax, 16
	LONG $0xef6ef9c5               // vmovd    xmm5, edi
	LONG $0x2251c3c4; WORD $0x01eb // vpinsrd    xmm5, xmm5, r11d, 1
	LONG $0x2251e3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, edx, 2
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0xf16ef9c5               // vmovd    xmm6, ecx
	LONG $0x2249e3c4; WORD $0x01f0 // vpinsrd    xmm6, xmm6, eax, 1
	LONG $0x2249e3c4; WORD $0x02f6 // vpinsrd    xmm6, xmm6, esi, 2
	LONG $0x2249c3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, r10d, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xeb   // vpsrlvd    ymm5, ymm5, ymm3
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	LONG $0xfc5b8b44               // mov    r11d, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0xdaa40f44; BYTE $0x02   // shld    edx, r11d, 2
	LONG $0xf8538b44               // mov    r10d, dword [rbx - 8]
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0xd7a40f44; BYTE $0x04   // shld    edi, r10d, 4
	WORD $0x438b; BYTE $0xf0       // mov    eax, dword [rbx - 16]
	WORD $0x738b; BYTE $0xf4       // mov    esi, dword [rbx - 12]
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	LONG $0x06f1a40f               // shld    ecx, esi, 6
	LONG $0x18f0ac0f               // shrd    eax, esi, 24
	LONG $0xef6ef9c5               // vmovd    xmm5, edi
	LONG $0x2251c3c4; WORD $0x01eb // vpinsrd    xmm5, xmm5, r11d, 1
	LONG $0x2251e3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, edx, 2
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0xf06ef9c5               // vmovd    xmm6, eax
	LONG $0x2249e3c4; WORD $0x01f6 // vpinsrd    xmm6, xmm6, esi, 1
	LONG $0x2249e3c4; WORD $0x02f1 // vpinsrd    xmm6, xmm6, ecx, 2
	LONG $0x2249c3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, r10d, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x44c38348               // add    rbx, 68
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_55
	JMP  LBB0_147

LBB0_25:
	WORD $0xf983; BYTE $0x0b             // cmp    ecx, 11
	JG   LBB0_37
	WORD $0xf983; BYTE $0x09             // cmp    ecx, 9
	JG   LBB0_32
	WORD $0xf983; BYTE $0x08             // cmp    ecx, 8
	JE   LBB0_132
	WORD $0xf983; BYTE $0x09             // cmp    ecx, 9
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0             // mov    r8d, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x20c38348                     // add    rbx, 32
	QUAD $0x0000b885597de2c4; BYTE $0x00 // vpbroadcastq    ymm0, qword 184[rbp] /* [rip + .LCPI0_105] */
	QUAD $0x000008208d6ffdc5             // vmovdqa    ymm1, yword 2080[rbp] /* [rip + .LCPI0_104] */
	QUAD $0x00000840956ffdc5             // vmovdqa    ymm2, yword 2112[rbp] /* [rip + .LCPI0_106] */
	QUAD $0x000008609d6ffdc5             // vmovdqa    ymm3, yword 2144[rbp] /* [rip + .LCPI0_107] */
	QUAD $0x00000880a56ffdc5             // vmovdqa    ymm4, yword 2176[rbp] /* [rip + .LCPI0_108] */

LBB0_31:
	WORD $0x4b8b; BYTE $0xe0       // mov    ecx, dword [rbx - 32]
	WORD $0x538b; BYTE $0xe4       // mov    edx, dword [rbx - 28]
	WORD $0x738b; BYTE $0xe8       // mov    esi, dword [rbx - 24]
	LONG $0x01d6a40f               // shld    esi, edx, 1
	LONG $0xea6ef9c5               // vmovd    xmm5, edx
	LONG $0x2251e3c4; WORD $0x01ea // vpinsrd    xmm5, xmm5, edx, 1
	LONG $0x2251e3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, edx, 2
	LONG $0x05caa40f               // shld    edx, ecx, 5
	LONG $0x2251e3c4; WORD $0x03ee // vpinsrd    xmm5, xmm5, esi, 3
	LONG $0xf16ef9c5               // vmovd    xmm6, ecx
	LONG $0x2249e3c4; WORD $0x01f1 // vpinsrd    xmm6, xmm6, ecx, 1
	LONG $0x2249e3c4; WORD $0x02f1 // vpinsrd    xmm6, xmm6, ecx, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xe9   // vpsrlvd    ymm5, ymm5, ymm1
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	WORD $0x4b8b; BYTE $0xf0       // mov    ecx, dword [rbx - 16]
	WORD $0x538b; BYTE $0xe8       // mov    edx, dword [rbx - 24]
	WORD $0x738b; BYTE $0xec       // mov    esi, dword [rbx - 20]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0x02f7a40f               // shld    edi, esi, 2
	WORD $0xf089                   // mov    eax, esi
	LONG $0x06d0a40f               // shld    eax, edx, 6
	LONG $0xee6ef9c5               // vmovd    xmm5, esi
	LONG $0x2251e3c4; WORD $0x01ee // vpinsrd    xmm5, xmm5, esi, 1
	LONG $0x2251e3c4; WORD $0x02ef // vpinsrd    xmm5, xmm5, edi, 2
	LONG $0x2251e3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, ecx, 3
	LONG $0xf26ef9c5               // vmovd    xmm6, edx
	LONG $0x2249e3c4; WORD $0x01f2 // vpinsrd    xmm6, xmm6, edx, 1
	LONG $0x2249e3c4; WORD $0x02f0 // vpinsrd    xmm6, xmm6, eax, 2
	LONG $0x2249e3c4; WORD $0x03f6 // vpinsrd    xmm6, xmm6, esi, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	WORD $0x438b; BYTE $0xf8       // mov    eax, dword [rbx - 8]
	WORD $0x4b8b; BYTE $0xf0       // mov    ecx, dword [rbx - 16]
	WORD $0x538b; BYTE $0xf4       // mov    edx, dword [rbx - 12]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x03d6a40f               // shld    esi, edx, 3
	WORD $0xd789                   // mov    edi, edx
	LONG $0x07cfa40f               // shld    edi, ecx, 7
	LONG $0xea6ef9c5               // vmovd    xmm5, edx
	LONG $0x2251e3c4; WORD $0x01ee // vpinsrd    xmm5, xmm5, esi, 1
	LONG $0x2251e3c4; WORD $0x02e8 // vpinsrd    xmm5, xmm5, eax, 2
	LONG $0x2251e3c4; WORD $0x03e8 // vpinsrd    xmm5, xmm5, eax, 3
	LONG $0xf16ef9c5               // vmovd    xmm6, ecx
	LONG $0x2249e3c4; WORD $0x01f7 // vpinsrd    xmm6, xmm6, edi, 1
	LONG $0x2249e3c4; WORD $0x02f2 // vpinsrd    xmm6, xmm6, edx, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xeb   // vpsrlvd    ymm5, ymm5, ymm3
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	WORD $0x038b                   // mov    eax, dword [rbx]
	WORD $0x4b8b; BYTE $0xf8       // mov    ecx, dword [rbx - 8]
	WORD $0x538b; BYTE $0xfc       // mov    edx, dword [rbx - 4]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x04d6a40f               // shld    esi, edx, 4
	LONG $0x18d1ac0f               // shrd    ecx, edx, 24
	LONG $0xee6ef9c5               // vmovd    xmm5, esi
	LONG $0x2251e3c4; WORD $0x01e8 // vpinsrd    xmm5, xmm5, eax, 1
	LONG $0x2251e3c4; WORD $0x02e8 // vpinsrd    xmm5, xmm5, eax, 2
	LONG $0x2251e3c4; WORD $0x03e8 // vpinsrd    xmm5, xmm5, eax, 3
	LONG $0xf16ef9c5               // vmovd    xmm6, ecx
	LONG $0x2249e3c4; WORD $0x01f2 // vpinsrd    xmm6, xmm6, edx, 1
	LONG $0x2249e3c4; WORD $0x02f2 // vpinsrd    xmm6, xmm6, edx, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x24c38348               // add    rbx, 36
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_31
	JMP  LBB0_147

LBB0_73:
	WORD $0xf983; BYTE $0x19       // cmp    ecx, 25
	JG   LBB0_79
	WORD $0xf983; BYTE $0x18       // cmp    ecx, 24
	JE   LBB0_108
	WORD $0xf983; BYTE $0x19       // cmp    ecx, 25
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x60c38348               // add    rbx, 96
	LONG $0x597de2c4; WORD $0x4045 // vpbroadcastq    ymm0, qword 64[rbp] /* [rip + .LCPI0_38] */
	QUAD $0x000002608d6f7dc5       // vmovdqa    ymm9, yword 608[rbp] /* [rip + .LCPI0_28] */
	QUAD $0x00000300956f7dc5       // vmovdqa    ymm10, yword 768[rbp] /* [rip + .LCPI0_39] */
	QUAD $0x00000be09d6f79c5       // vmovdqa    xmm11, oword 3040[rbp] /* [rip + .LCPI0_40] */
	QUAD $0x00000bf0a56ff9c5       // vmovdqa    xmm4, oword 3056[rbp] /* [rip + .LCPI0_41] */
	QUAD $0x00000320ad6ffdc5       // vmovdqa    ymm5, yword 800[rbp] /* [rip + .LCPI0_42] */
	QUAD $0x00000c00b56ff9c5       // vmovdqa    xmm6, oword 3072[rbp] /* [rip + .LCPI0_43] */
	QUAD $0x00000c10bd6ff9c5       // vmovdqa    xmm7, oword 3088[rbp] /* [rip + .LCPI0_44] */
	QUAD $0x00000340856f7dc5       // vmovdqa    ymm8, yword 832[rbp] /* [rip + .LCPI0_45] */

LBB0_78:
	WORD $0x4b8b; BYTE $0xb4       // mov    ecx, dword [rbx - 76]
	LONG $0xb84b8b44               // mov    r9d, dword [rbx - 72]
	LONG $0xc9a40f41; BYTE $0x11   // shld    r9d, ecx, 17
	WORD $0x738b; BYTE $0xb0       // mov    esi, dword [rbx - 80]
	LONG $0x0af1a40f               // shld    ecx, esi, 10
	WORD $0x7b8b; BYTE $0xac       // mov    edi, dword [rbx - 84]
	LONG $0x03fea40f               // shld    esi, edi, 3
	WORD $0x438b; BYTE $0xa8       // mov    eax, dword [rbx - 88]
	LONG $0xcf6ef9c5               // vmovd    xmm1, edi
	LONG $0x15c7a40f               // shld    edi, eax, 21
	LONG $0xa0538b44               // mov    r10d, dword [rbx - 96]
	WORD $0x538b; BYTE $0xa4       // mov    edx, dword [rbx - 92]
	LONG $0x0ed0a40f               // shld    eax, edx, 14
	LONG $0xd2a40f44; BYTE $0x07   // shld    edx, r10d, 7
	LONG $0x2271e3c4; WORD $0x01ce // vpinsrd    xmm1, xmm1, esi, 1
	LONG $0x6e79c1c4; BYTE $0xd2   // vmovd    xmm2, r10d
	LONG $0x2271e3c4; WORD $0x02c9 // vpinsrd    xmm1, xmm1, ecx, 2
	LONG $0x2269e3c4; WORD $0x01d2 // vpinsrd    xmm2, xmm2, edx, 1
	LONG $0x2271c3c4; WORD $0x03c9 // vpinsrd    xmm1, xmm1, r9d, 3
	LONG $0x2269e3c4; WORD $0x02d0 // vpinsrd    xmm2, xmm2, eax, 2
	LONG $0x2269e3c4; WORD $0x03d7 // vpinsrd    xmm2, xmm2, edi, 3
	LONG $0x386de3c4; WORD $0x01c9 // vinserti128    ymm1, ymm2, xmm1, 1
	LONG $0x4575c2c4; BYTE $0xc9   // vpsrlvd    ymm1, ymm1, ymm9
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; WORD $0xa04f // vmovdqu    yword [r15 - 96], ymm1
	LONG $0xcc5b8b44               // mov    r11d, dword [rbx - 52]
	LONG $0xd04b8b44               // mov    r9d, dword [rbx - 48]
	LONG $0xd9a40f45; BYTE $0x09   // shld    r9d, r11d, 9
	LONG $0xc8538b44               // mov    r10d, dword [rbx - 56]
	LONG $0xd3a40f45; BYTE $0x02   // shld    r11d, r10d, 2
	WORD $0x738b; BYTE $0xc4       // mov    esi, dword [rbx - 60]
	WORD $0x8944; BYTE $0xd7       // mov    edi, r10d
	WORD $0x4b8b; BYTE $0xc0       // mov    ecx, dword [rbx - 64]
	LONG $0x14f7a40f               // shld    edi, esi, 20
	WORD $0x538b; BYTE $0xb8       // mov    edx, dword [rbx - 72]
	WORD $0x438b; BYTE $0xbc       // mov    eax, dword [rbx - 68]
	LONG $0x0dcea40f               // shld    esi, ecx, 13
	LONG $0x08c2ac0f               // shrd    edx, eax, 8
	LONG $0x06c1a40f               // shld    ecx, eax, 6
	LONG $0xcf6ef9c5               // vmovd    xmm1, edi
	LONG $0x2271c3c4; WORD $0x01ca // vpinsrd    xmm1, xmm1, r10d, 1
	LONG $0xd26ef9c5               // vmovd    xmm2, edx
	LONG $0x2271c3c4; WORD $0x02cb // vpinsrd    xmm1, xmm1, r11d, 2
	LONG $0x2269e3c4; WORD $0x01d0 // vpinsrd    xmm2, xmm2, eax, 1
	LONG $0x2271c3c4; WORD $0x03c9 // vpinsrd    xmm1, xmm1, r9d, 3
	LONG $0x2269e3c4; WORD $0x02d1 // vpinsrd    xmm2, xmm2, ecx, 2
	LONG $0x2269e3c4; WORD $0x03d6 // vpinsrd    xmm2, xmm2, esi, 3
	LONG $0x386de3c4; WORD $0x01c9 // vinserti128    ymm1, ymm2, xmm1, 1
	LONG $0x4575c2c4; BYTE $0xca   // vpsrlvd    ymm1, ymm1, ymm10
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; WORD $0xc04f // vmovdqu    yword [r15 - 64], ymm1
	WORD $0x438b; BYTE $0xe4       // mov    eax, dword [rbx - 28]
	LONG $0xe84b8b44               // mov    r9d, dword [rbx - 24]
	LONG $0xc1a40f41; BYTE $0x01   // shld    r9d, eax, 1
	WORD $0x538b; BYTE $0xe0       // mov    edx, dword [rbx - 32]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x13d6a40f               // shld    esi, edx, 19
	WORD $0x7b8b; BYTE $0xd8       // mov    edi, dword [rbx - 40]
	WORD $0x4b8b; BYTE $0xdc       // mov    ecx, dword [rbx - 36]
	LONG $0x0ccaa40f               // shld    edx, ecx, 12
	LONG $0x05f9a40f               // shld    ecx, edi, 5
	LONG $0x4b7efac5; BYTE $0xd0   // vmovq    xmm1, qword [rbx - 48]
	LONG $0x4571c2c4; BYTE $0xd3   // vpsrlvd    xmm2, xmm1, xmm11
	LONG $0xc970f9c5; BYTE $0xe5   // vpshufd    xmm1, xmm1, 229
	LONG $0x2271e3c4; WORD $0x01cf // vpinsrd    xmm1, xmm1, edi, 1
	LONG $0x4771e2c4; BYTE $0xcc   // vpsllvd    xmm1, xmm1, xmm4
	LONG $0xc9ebe9c5               // vpor    xmm1, xmm2, xmm1
	LONG $0xd26ef9c5               // vmovd    xmm2, edx
	LONG $0x2269e3c4; WORD $0x01d6 // vpinsrd    xmm2, xmm2, esi, 1
	LONG $0x2269e3c4; WORD $0x02d0 // vpinsrd    xmm2, xmm2, eax, 2
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x2271e3c4; WORD $0x02cf // vpinsrd    xmm1, xmm1, edi, 2
	LONG $0x2271e3c4; WORD $0x03c9 // vpinsrd    xmm1, xmm1, ecx, 3
	LONG $0x3875e3c4; WORD $0x01ca // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0x4575e2c4; BYTE $0xcd   // vpsrlvd    ymm1, ymm1, ymm5
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; WORD $0xe04f // vmovdqu    yword [r15 - 32], ymm1
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x12caa40f               // shld    edx, ecx, 18
	WORD $0x738b; BYTE $0xf8       // mov    esi, dword [rbx - 8]
	LONG $0x0bf1a40f               // shld    ecx, esi, 11
	LONG $0xf0538b44               // mov    r10d, dword [rbx - 16]
	WORD $0x7b8b; BYTE $0xf4       // mov    edi, dword [rbx - 12]
	LONG $0x04fea40f               // shld    esi, edi, 4
	WORD $0xf889                   // mov    eax, edi
	LONG $0xd0a40f44; BYTE $0x16   // shld    eax, r10d, 22
	LONG $0x4b7efac5; BYTE $0xe8   // vmovq    xmm1, qword [rbx - 24]
	LONG $0x4571e2c4; BYTE $0xd6   // vpsrlvd    xmm2, xmm1, xmm6
	LONG $0xc970f9c5; BYTE $0xe5   // vpshufd    xmm1, xmm1, 229
	LONG $0x2271c3c4; WORD $0x01ca // vpinsrd    xmm1, xmm1, r10d, 1
	LONG $0x4771e2c4; BYTE $0xcf   // vpsllvd    xmm1, xmm1, xmm7
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0xc9ebe9c5               // vpor    xmm1, xmm2, xmm1
	LONG $0x2261e3c4; WORD $0x02d2 // vpinsrd    xmm2, xmm3, edx, 2
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x2271e3c4; WORD $0x02c8 // vpinsrd    xmm1, xmm1, eax, 2
	LONG $0x2271e3c4; WORD $0x03cf // vpinsrd    xmm1, xmm1, edi, 3
	LONG $0x3875e3c4; WORD $0x01ca // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0x4575c2c4; BYTE $0xc8   // vpsrlvd    ymm1, ymm1, ymm8
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; BYTE $0x0f   // vmovdqu    yword [r15], ymm1
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x64c38348               // add    rbx, 100
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_78
	JMP  LBB0_147

LBB0_14:
	WORD $0xf983; BYTE $0x05             // cmp    ecx, 5
	JG   LBB0_20
	WORD $0xf983; BYTE $0x04             // cmp    ecx, 4
	JE   LBB0_138
	WORD $0xf983; BYTE $0x05             // cmp    ecx, 5
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8944; BYTE $0xf0             // mov    eax, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x10c38348                     // add    rbx, 16
	QUAD $0x0000d085597de2c4; BYTE $0x00 // vpbroadcastq    ymm0, qword 208[rbp] /* [rip + .LCPI0_120] */
	QUAD $0x000009608d6ffdc5             // vmovdqa    ymm1, yword 2400[rbp] /* [rip + .LCPI0_119] */
	QUAD $0x00000980956ffdc5             // vmovdqa    ymm2, yword 2432[rbp] /* [rip + .LCPI0_121] */
	QUAD $0x000009a09d6ffdc5             // vmovdqa    ymm3, yword 2464[rbp] /* [rip + .LCPI0_122] */
	QUAD $0x000009c0a56ffdc5             // vmovdqa    ymm4, yword 2496[rbp] /* [rip + .LCPI0_123] */

LBB0_19:
	WORD $0x4b8b; BYTE $0xf0       // mov    ecx, dword [rbx - 16]
	WORD $0x538b; BYTE $0xf4       // mov    edx, dword [rbx - 12]
	WORD $0xd689                   // mov    esi, edx
	LONG $0x02cea40f               // shld    esi, ecx, 2
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0x5879e2c4; BYTE $0xf5   // vpbroadcastd    xmm6, xmm5
	LONG $0x2251e3c4; WORD $0x01e9 // vpinsrd    xmm5, xmm5, ecx, 1
	LONG $0x2251e3c4; WORD $0x02ee // vpinsrd    xmm5, xmm5, esi, 2
	LONG $0x2251e3c4; WORD $0x03ea // vpinsrd    xmm5, xmm5, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xe9   // vpsrlvd    ymm5, ymm5, ymm1
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	WORD $0x4b8b; BYTE $0xf4       // mov    ecx, dword [rbx - 12]
	WORD $0x538b; BYTE $0xf8       // mov    edx, dword [rbx - 8]
	WORD $0xd689                   // mov    esi, edx
	LONG $0x04cea40f               // shld    esi, ecx, 4
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0x5879e2c4; BYTE $0xed   // vpbroadcastd    xmm5, xmm5
	LONG $0xf66ef9c5               // vmovd    xmm6, esi
	LONG $0x2249e3c4; WORD $0x01f2 // vpinsrd    xmm6, xmm6, edx, 1
	LONG $0x2249e3c4; WORD $0x02f2 // vpinsrd    xmm6, xmm6, edx, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x3855e3c4; WORD $0x01ee // vinserti128    ymm5, ymm5, xmm6, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	WORD $0x4b8b; BYTE $0xf8       // mov    ecx, dword [rbx - 8]
	WORD $0x538b; BYTE $0xfc       // mov    edx, dword [rbx - 4]
	LONG $0xea6ef9c5               // vmovd    xmm5, edx
	LONG $0x01caa40f               // shld    edx, ecx, 1
	LONG $0xf16ef9c5               // vmovd    xmm6, ecx
	LONG $0x2249e3c4; WORD $0x01f1 // vpinsrd    xmm6, xmm6, ecx, 1
	LONG $0x2249e3c4; WORD $0x02f1 // vpinsrd    xmm6, xmm6, ecx, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x5879e2c4; BYTE $0xed   // vpbroadcastd    xmm5, xmm5
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xeb   // vpsrlvd    ymm5, ymm5, ymm3
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0x138b                   // mov    edx, dword [rbx]
	WORD $0xd689                   // mov    esi, edx
	LONG $0x03cea40f               // shld    esi, ecx, 3
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0x2251e3c4; WORD $0x01ee // vpinsrd    xmm5, xmm5, esi, 1
	LONG $0x2251e3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, edx, 2
	LONG $0x2251e3c4; WORD $0x03ea // vpinsrd    xmm5, xmm5, edx, 3
	LONG $0xf26ef9c5               // vmovd    xmm6, edx
	LONG $0x5879e2c4; BYTE $0xf6   // vpbroadcastd    xmm6, xmm6
	LONG $0x3855e3c4; WORD $0x01ee // vinserti128    ymm5, ymm5, xmm6, 1
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x14c38348               // add    rbx, 20
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_19
	JMP  LBB0_147

LBB0_61:
	WORD $0xf983; BYTE $0x15       // cmp    ecx, 21
	JG   LBB0_67
	WORD $0xf983; BYTE $0x14       // cmp    ecx, 20
	JE   LBB0_114
	WORD $0xf983; BYTE $0x15       // cmp    ecx, 21
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x50c38348               // add    rbx, 80
	QUAD $0x00000420856f7dc5       // vmovdqa    ymm8, yword 1056[rbp] /* [rip + .LCPI0_58] */
	LONG $0x597de2c4; WORD $0x584d // vpbroadcastq    ymm1, qword 88[rbp] /* [rip + .LCPI0_59] */
	QUAD $0x00000440956ffdc5       // vmovdqa    ymm2, yword 1088[rbp] /* [rip + .LCPI0_60] */
	QUAD $0x000004609d6ffdc5       // vmovdqa    ymm3, yword 1120[rbp] /* [rip + .LCPI0_61] */
	QUAD $0x00000c50a56ff9c5       // vmovdqa    xmm4, oword 3152[rbp] /* [rip + .LCPI0_62] */
	QUAD $0x00000c60ad6ff9c5       // vmovdqa    xmm5, oword 3168[rbp] /* [rip + .LCPI0_63] */
	QUAD $0x00000480b56ffdc5       // vmovdqa    ymm6, yword 1152[rbp] /* [rip + .LCPI0_64] */

LBB0_66:
	WORD $0x4b8b; BYTE $0xc0       // mov    ecx, dword [rbx - 64]
	LONG $0xc44b8b44               // mov    r9d, dword [rbx - 60]
	LONG $0xc9a40f41; BYTE $0x0d   // shld    r9d, ecx, 13
	LONG $0xbc5b8b44               // mov    r11d, dword [rbx - 68]
	LONG $0xd9a40f44; BYTE $0x02   // shld    ecx, r11d, 2
	WORD $0x7b8b; BYTE $0xb8       // mov    edi, dword [rbx - 72]
	WORD $0x8944; BYTE $0xde       // mov    esi, r11d
	LONG $0x0cfea40f               // shld    esi, edi, 12
	LONG $0xb0538b44               // mov    r10d, dword [rbx - 80]
	WORD $0x438b; BYTE $0xb4       // mov    eax, dword [rbx - 76]
	LONG $0x01c7a40f               // shld    edi, eax, 1
	WORD $0xc289                   // mov    edx, eax
	LONG $0xd2a40f44; BYTE $0x0b   // shld    edx, r10d, 11
	LONG $0x6e79c1c4; BYTE $0xfa   // vmovd    xmm7, r10d
	LONG $0xc66ef9c5               // vmovd    xmm0, esi
	LONG $0x2241e3c4; WORD $0x01fa // vpinsrd    xmm7, xmm7, edx, 1
	LONG $0x2279c3c4; WORD $0x01c3 // vpinsrd    xmm0, xmm0, r11d, 1
	LONG $0x2241e3c4; WORD $0x02f8 // vpinsrd    xmm7, xmm7, eax, 2
	LONG $0x2279e3c4; WORD $0x02c1 // vpinsrd    xmm0, xmm0, ecx, 2
	LONG $0x2241e3c4; WORD $0x03ff // vpinsrd    xmm7, xmm7, edi, 3
	LONG $0x2279c3c4; WORD $0x03c1 // vpinsrd    xmm0, xmm0, r9d, 3
	LONG $0x3845e3c4; WORD $0x01c0 // vinserti128    ymm0, ymm7, xmm0, 1
	LONG $0x457dc2c4; BYTE $0xc0   // vpsrlvd    ymm0, ymm0, ymm8
	LONG $0xc1dbfdc5               // vpand    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xa047 // vmovdqu    yword [r15 - 96], ymm0
	LONG $0xd4538b44               // mov    r10d, dword [rbx - 44]
	LONG $0xd84b8b44               // mov    r9d, dword [rbx - 40]
	LONG $0xd1a40f45; BYTE $0x05   // shld    r9d, r10d, 5
	WORD $0x538b; BYTE $0xd0       // mov    edx, dword [rbx - 48]
	WORD $0x8944; BYTE $0xd6       // mov    esi, r10d
	LONG $0x0fd6a40f               // shld    esi, edx, 15
	WORD $0x4b8b; BYTE $0xcc       // mov    ecx, dword [rbx - 52]
	LONG $0x04caa40f               // shld    edx, ecx, 4
	LONG $0xc45b8b44               // mov    r11d, dword [rbx - 60]
	WORD $0x438b; BYTE $0xc8       // mov    eax, dword [rbx - 56]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0x0ec7a40f               // shld    edi, eax, 14
	LONG $0xd8a40f44; BYTE $0x03   // shld    eax, r11d, 3
	LONG $0x6e79c1c4; BYTE $0xc3   // vmovd    xmm0, r11d
	LONG $0xfa6ef9c5               // vmovd    xmm7, edx
	LONG $0x2279e3c4; WORD $0x01c0 // vpinsrd    xmm0, xmm0, eax, 1
	LONG $0x2241e3c4; WORD $0x01fe // vpinsrd    xmm7, xmm7, esi, 1
	LONG $0x2279e3c4; WORD $0x02c7 // vpinsrd    xmm0, xmm0, edi, 2
	LONG $0x2241c3c4; WORD $0x02fa // vpinsrd    xmm7, xmm7, r10d, 2
	LONG $0x2279e3c4; WORD $0x03c1 // vpinsrd    xmm0, xmm0, ecx, 3
	LONG $0x2241c3c4; WORD $0x03f9 // vpinsrd    xmm7, xmm7, r9d, 3
	LONG $0x387de3c4; WORD $0x01c7 // vinserti128    ymm0, ymm0, xmm7, 1
	LONG $0x457de2c4; BYTE $0xc2   // vpsrlvd    ymm0, ymm0, ymm2
	LONG $0xc1dbfdc5               // vpand    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xc047 // vmovdqu    yword [r15 - 64], ymm0
	LONG $0xec4b8b44               // mov    r9d, dword [rbx - 20]
	WORD $0x4b8b; BYTE $0xe8       // mov    ecx, dword [rbx - 24]
	WORD $0x8945; BYTE $0xca       // mov    r10d, r9d
	LONG $0xcaa40f41; BYTE $0x12   // shld    r10d, ecx, 18
	WORD $0x738b; BYTE $0xe4       // mov    esi, dword [rbx - 28]
	LONG $0x07f1a40f               // shld    ecx, esi, 7
	WORD $0x7b8b; BYTE $0xe0       // mov    edi, dword [rbx - 32]
	LONG $0xc66ef9c5               // vmovd    xmm0, esi
	LONG $0x11fea40f               // shld    esi, edi, 17
	WORD $0x438b; BYTE $0xd8       // mov    eax, dword [rbx - 40]
	WORD $0x538b; BYTE $0xdc       // mov    edx, dword [rbx - 36]
	LONG $0x06d7a40f               // shld    edi, edx, 6
	LONG $0x10d0ac0f               // shrd    eax, edx, 16
	LONG $0x2279e3c4; WORD $0x01c1 // vpinsrd    xmm0, xmm0, ecx, 1
	LONG $0xf86ef9c5               // vmovd    xmm7, eax
	LONG $0x2279c3c4; WORD $0x02c2 // vpinsrd    xmm0, xmm0, r10d, 2
	LONG $0x2241e3c4; WORD $0x01fa // vpinsrd    xmm7, xmm7, edx, 1
	LONG $0x2279c3c4; WORD $0x03c1 // vpinsrd    xmm0, xmm0, r9d, 3
	LONG $0x2241e3c4; WORD $0x02ff // vpinsrd    xmm7, xmm7, edi, 2
	LONG $0x2241e3c4; WORD $0x03fe // vpinsrd    xmm7, xmm7, esi, 3
	LONG $0x3845e3c4; WORD $0x01c0 // vinserti128    ymm0, ymm7, xmm0, 1
	LONG $0x457de2c4; BYTE $0xc3   // vpsrlvd    ymm0, ymm0, ymm3
	LONG $0xc1dbfdc5               // vpand    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xe047 // vmovdqu    yword [r15 - 32], ymm0
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	WORD $0x438b; BYTE $0xfc       // mov    eax, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x0ac2a40f               // shld    edx, eax, 10
	WORD $0x738b; BYTE $0xf4       // mov    esi, dword [rbx - 12]
	WORD $0x7b8b; BYTE $0xf8       // mov    edi, dword [rbx - 8]
	WORD $0xc189                   // mov    ecx, eax
	LONG $0x14f9a40f               // shld    ecx, edi, 20
	LONG $0x09f7a40f               // shld    edi, esi, 9
	LONG $0x437efac5; BYTE $0xec   // vmovq    xmm0, qword [rbx - 20]
	LONG $0x4579e2c4; BYTE $0xfc   // vpsrlvd    xmm7, xmm0, xmm4
	LONG $0xc070f9c5; BYTE $0xe5   // vpshufd    xmm0, xmm0, 229
	LONG $0x2279e3c4; WORD $0x01c6 // vpinsrd    xmm0, xmm0, esi, 1
	LONG $0x4779e2c4; BYTE $0xc5   // vpsllvd    xmm0, xmm0, xmm5
	LONG $0xc0ebc1c5               // vpor    xmm0, xmm7, xmm0
	LONG $0xf96ef9c5               // vmovd    xmm7, ecx
	LONG $0x2241e3c4; WORD $0x01f8 // vpinsrd    xmm7, xmm7, eax, 1
	LONG $0x2241e3c4; WORD $0x02fa // vpinsrd    xmm7, xmm7, edx, 2
	LONG $0x2241c3c4; WORD $0x03f9 // vpinsrd    xmm7, xmm7, r9d, 3
	LONG $0x2279e3c4; WORD $0x02c6 // vpinsrd    xmm0, xmm0, esi, 2
	LONG $0x2279e3c4; WORD $0x03c7 // vpinsrd    xmm0, xmm0, edi, 3
	LONG $0x387de3c4; WORD $0x01c7 // vinserti128    ymm0, ymm0, xmm7, 1
	LONG $0x457de2c4; BYTE $0xc6   // vpsrlvd    ymm0, ymm0, ymm6
	LONG $0xc1dbfdc5               // vpand    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; BYTE $0x07   // vmovdqu    yword [r15], ymm0
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x54c38348               // add    rbx, 84
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_66
	JMP  LBB0_147

LBB0_37:
	WORD $0xf983; BYTE $0x0d             // cmp    ecx, 13
	JG   LBB0_43
	WORD $0xf983; BYTE $0x0c             // cmp    ecx, 12
	JE   LBB0_126
	WORD $0xf983; BYTE $0x0d             // cmp    ecx, 13
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0             // mov    r8d, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x30c38348                     // add    rbx, 48
	QUAD $0x00009885597de2c4; BYTE $0x00 // vpbroadcastq    ymm0, qword 152[rbp] /* [rip + .LCPI0_90] */
	QUAD $0x000006c08d6ffdc5             // vmovdqa    ymm1, yword 1728[rbp] /* [rip + .LCPI0_89] */
	QUAD $0x000006e0956ffdc5             // vmovdqa    ymm2, yword 1760[rbp] /* [rip + .LCPI0_91] */
	QUAD $0x000007009d6ffdc5             // vmovdqa    ymm3, yword 1792[rbp] /* [rip + .LCPI0_92] */
	QUAD $0x00000720a56ffdc5             // vmovdqa    ymm4, yword 1824[rbp] /* [rip + .LCPI0_93] */

LBB0_42:
	WORD $0x438b; BYTE $0xd8       // mov    eax, dword [rbx - 40]
	LONG $0xdc4b8b44               // mov    r9d, dword [rbx - 36]
	LONG $0xc1a40f41; BYTE $0x05   // shld    r9d, eax, 5
	WORD $0x738b; BYTE $0xd0       // mov    esi, dword [rbx - 48]
	WORD $0x538b; BYTE $0xd4       // mov    edx, dword [rbx - 44]
	WORD $0xc189                   // mov    ecx, eax
	LONG $0x0cd1a40f               // shld    ecx, edx, 12
	WORD $0xd789                   // mov    edi, edx
	LONG $0x06f7a40f               // shld    edi, esi, 6
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0x2251e3c4; WORD $0x01e8 // vpinsrd    xmm5, xmm5, eax, 1
	LONG $0x2251e3c4; WORD $0x02e8 // vpinsrd    xmm5, xmm5, eax, 2
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0xf66ef9c5               // vmovd    xmm6, esi
	LONG $0x2249e3c4; WORD $0x01f6 // vpinsrd    xmm6, xmm6, esi, 1
	LONG $0x2249e3c4; WORD $0x02f7 // vpinsrd    xmm6, xmm6, edi, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xe9   // vpsrlvd    ymm5, ymm5, ymm1
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	LONG $0xe84b8b44               // mov    r9d, dword [rbx - 24]
	WORD $0x4b8b; BYTE $0xe4       // mov    ecx, dword [rbx - 28]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x0acaa40f               // shld    edx, ecx, 10
	WORD $0x738b; BYTE $0xe0       // mov    esi, dword [rbx - 32]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0x04f7a40f               // shld    edi, esi, 4
	LONG $0xdc538b44               // mov    r10d, dword [rbx - 36]
	WORD $0xf089                   // mov    eax, esi
	LONG $0xd0a40f44; BYTE $0x0b   // shld    eax, r10d, 11
	LONG $0xef6ef9c5               // vmovd    xmm5, edi
	LONG $0x2251e3c4; WORD $0x01e9 // vpinsrd    xmm5, xmm5, ecx, 1
	LONG $0x2251e3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, edx, 2
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0x6e79c1c4; BYTE $0xf2   // vmovd    xmm6, r10d
	LONG $0x2249e3c4; WORD $0x01f0 // vpinsrd    xmm6, xmm6, eax, 1
	LONG $0x2249e3c4; WORD $0x02f6 // vpinsrd    xmm6, xmm6, esi, 2
	LONG $0x2249e3c4; WORD $0x03f6 // vpinsrd    xmm6, xmm6, esi, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	LONG $0xf44b8b44               // mov    r9d, dword [rbx - 12]
	WORD $0x4b8b; BYTE $0xf0       // mov    ecx, dword [rbx - 16]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x02caa40f               // shld    edx, ecx, 2
	WORD $0x738b; BYTE $0xe8       // mov    esi, dword [rbx - 24]
	WORD $0x438b; BYTE $0xec       // mov    eax, dword [rbx - 20]
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0x2251e3c4; WORD $0x01e9 // vpinsrd    xmm5, xmm5, ecx, 1
	LONG $0x09c1a40f               // shld    ecx, eax, 9
	WORD $0xc789                   // mov    edi, eax
	LONG $0x03f7a40f               // shld    edi, esi, 3
	LONG $0x2251e3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, edx, 2
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0xf66ef9c5               // vmovd    xmm6, esi
	LONG $0x2249e3c4; WORD $0x01f7 // vpinsrd    xmm6, xmm6, edi, 1
	LONG $0x2249e3c4; WORD $0x02f0 // vpinsrd    xmm6, xmm6, eax, 2
	LONG $0x2249e3c4; WORD $0x03f1 // vpinsrd    xmm6, xmm6, ecx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xeb   // vpsrlvd    ymm5, ymm5, ymm3
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	WORD $0x038b                   // mov    eax, dword [rbx]
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0xc289                   // mov    edx, eax
	LONG $0x07caa40f               // shld    edx, ecx, 7
	WORD $0x738b; BYTE $0xf8       // mov    esi, dword [rbx - 8]
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0x01f1a40f               // shld    ecx, esi, 1
	WORD $0x7b8b; BYTE $0xf4       // mov    edi, dword [rbx - 12]
	LONG $0x18f7ac0f               // shrd    edi, esi, 24
	LONG $0xf76ef9c5               // vmovd    xmm6, edi
	LONG $0x2249e3c4; WORD $0x01f6 // vpinsrd    xmm6, xmm6, esi, 1
	LONG $0x2249e3c4; WORD $0x02f6 // vpinsrd    xmm6, xmm6, esi, 2
	LONG $0x2249e3c4; WORD $0x03f1 // vpinsrd    xmm6, xmm6, ecx, 3
	LONG $0x2251e3c4; WORD $0x01ea // vpinsrd    xmm5, xmm5, edx, 1
	LONG $0x2251e3c4; WORD $0x02e8 // vpinsrd    xmm5, xmm5, eax, 2
	LONG $0x2251e3c4; WORD $0x03e8 // vpinsrd    xmm5, xmm5, eax, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x34c38348               // add    rbx, 52
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_42
	JMP  LBB0_147

LBB0_85:
	WORD $0xf983; BYTE $0x1c       // cmp    ecx, 28
	JE   LBB0_102
	WORD $0xf983; BYTE $0x1d       // cmp    ecx, 29
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x597de2c4; WORD $0x1045 // vpbroadcastq    ymm0, qword 16[rbp] /* [rip + .LCPI0_12] */
	QUAD $0x00000b40856f79c5       // vmovdqa    xmm8, oword 2880[rbp] /* [rip + .LCPI0_13] */
	QUAD $0x00000b50956f79c5       // vmovdqa    xmm10, oword 2896[rbp] /* [rip + .LCPI0_14] */
	QUAD $0x000001c09d6f7dc5       // vmovdqa    ymm11, yword 448[rbp] /* [rip + .LCPI0_15] */
	QUAD $0x00000b60a56f79c5       // vmovdqa    xmm12, oword 2912[rbp] /* [rip + .LCPI0_16] */
	QUAD $0x00000b70ad6ff9c5       // vmovdqa    xmm5, oword 2928[rbp] /* [rip + .LCPI0_17] */
	QUAD $0x000001e0b56ffdc5       // vmovdqa    ymm6, yword 480[rbp] /* [rip + .LCPI0_18] */
	QUAD $0x00000b80bd6ff9c5       // vmovdqa    xmm7, oword 2944[rbp] /* [rip + .LCPI0_19] */
	QUAD $0x00000b908d6ff9c5       // vmovdqa    xmm1, oword 2960[rbp] /* [rip + .LCPI0_20] */
	QUAD $0x000002008d6f7dc5       // vmovdqa    ymm9, yword 512[rbp] /* [rip + .LCPI0_21] */

LBB0_89:
	LONG $0x185b8b44               // mov    r11d, dword [rbx + 24]
	LONG $0x1c4b8b44               // mov    r9d, dword [rbx + 28]
	LONG $0xd9a40f45; BYTE $0x15   // shld    r9d, r11d, 21
	WORD $0x738b; BYTE $0x14       // mov    esi, dword [rbx + 20]
	LONG $0xf3a40f41; BYTE $0x12   // shld    r11d, esi, 18
	WORD $0x7b8b; BYTE $0x10       // mov    edi, dword [rbx + 16]
	LONG $0x0ffea40f               // shld    esi, edi, 15
	WORD $0x438b; BYTE $0x0c       // mov    eax, dword [rbx + 12]
	LONG $0x0cc7a40f               // shld    edi, eax, 12
	WORD $0x538b; BYTE $0x08       // mov    edx, dword [rbx + 8]
	LONG $0x09d0a40f               // shld    eax, edx, 9
	WORD $0x8b44; BYTE $0x13       // mov    r10d, dword [rbx]
	WORD $0x4b8b; BYTE $0x04       // mov    ecx, dword [rbx + 4]
	LONG $0x06caa40f               // shld    edx, ecx, 6
	LONG $0xd1a40f44; BYTE $0x03   // shld    ecx, r10d, 3
	LONG $0x6e79c1c4; BYTE $0xd2   // vmovd    xmm2, r10d
	LONG $0xdf6ef9c5               // vmovd    xmm3, edi
	LONG $0x2269e3c4; WORD $0x01d1 // vpinsrd    xmm2, xmm2, ecx, 1
	LONG $0x2261e3c4; WORD $0x01de // vpinsrd    xmm3, xmm3, esi, 1
	LONG $0x2269e3c4; WORD $0x02d2 // vpinsrd    xmm2, xmm2, edx, 2
	LONG $0x2261c3c4; WORD $0x02db // vpinsrd    xmm3, xmm3, r11d, 2
	LONG $0x2269e3c4; WORD $0x03d0 // vpinsrd    xmm2, xmm2, eax, 3
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0x386de3c4; WORD $0x01d3 // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0xd0dbedc5               // vpand    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0xa057 // vmovdqu    yword [r15 - 96], ymm2
	WORD $0x438b; BYTE $0x34       // mov    eax, dword [rbx + 52]
	LONG $0x384b8b44               // mov    r9d, dword [rbx + 56]
	LONG $0xc1a40f41; BYTE $0x0d   // shld    r9d, eax, 13
	WORD $0x538b; BYTE $0x30       // mov    edx, dword [rbx + 48]
	LONG $0x0ad0a40f               // shld    eax, edx, 10
	WORD $0x738b; BYTE $0x2c       // mov    esi, dword [rbx + 44]
	LONG $0x07f2a40f               // shld    edx, esi, 7
	WORD $0x7b8b; BYTE $0x24       // mov    edi, dword [rbx + 36]
	WORD $0x4b8b; BYTE $0x28       // mov    ecx, dword [rbx + 40]
	LONG $0x04cea40f               // shld    esi, ecx, 4
	LONG $0x01f9a40f               // shld    ecx, edi, 1
	LONG $0x537efac5; BYTE $0x1c   // vmovq    xmm2, qword [rbx + 28]
	LONG $0x4569c2c4; BYTE $0xd8   // vpsrlvd    xmm3, xmm2, xmm8
	LONG $0xd270f9c5; BYTE $0xe5   // vpshufd    xmm2, xmm2, 229
	LONG $0x2269e3c4; WORD $0x01d7 // vpinsrd    xmm2, xmm2, edi, 1
	LONG $0x4769c2c4; BYTE $0xd2   // vpsllvd    xmm2, xmm2, xmm10
	LONG $0xd2ebe1c5               // vpor    xmm2, xmm3, xmm2
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x2261e3c4; WORD $0x01da // vpinsrd    xmm3, xmm3, edx, 1
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0x2269e3c4; WORD $0x02d7 // vpinsrd    xmm2, xmm2, edi, 2
	LONG $0x2269e3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, ecx, 3
	LONG $0x386de3c4; WORD $0x01d3 // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0x456dc2c4; BYTE $0xd3   // vpsrlvd    ymm2, ymm2, ymm11
	LONG $0xd0dbedc5               // vpand    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0xc057 // vmovdqu    yword [r15 - 64], ymm2
	WORD $0x438b; BYTE $0x50       // mov    eax, dword [rbx + 80]
	WORD $0x4b8b; BYTE $0x54       // mov    ecx, dword [rbx + 84]
	LONG $0x05c1a40f               // shld    ecx, eax, 5
	WORD $0x538b; BYTE $0x4c       // mov    edx, dword [rbx + 76]
	WORD $0x738b; BYTE $0x48       // mov    esi, dword [rbx + 72]
	LONG $0x02d0a40f               // shld    eax, edx, 2
	WORD $0xd789                   // mov    edi, edx
	LONG $0x1cf7a40f               // shld    edi, esi, 28
	LONG $0x536ffac5; BYTE $0x38   // vmovdqu    xmm2, oword [rbx + 56]
	LONG $0x4569c2c4; BYTE $0xdc   // vpsrlvd    xmm3, xmm2, xmm12
	LONG $0xd270f9c5; BYTE $0xf9   // vpshufd    xmm2, xmm2, 249
	LONG $0x2269e3c4; WORD $0x03d6 // vpinsrd    xmm2, xmm2, esi, 3
	LONG $0xe76ef9c5               // vmovd    xmm4, edi
	LONG $0x2259e3c4; WORD $0x01e2 // vpinsrd    xmm4, xmm4, edx, 1
	LONG $0x2259e3c4; WORD $0x02e0 // vpinsrd    xmm4, xmm4, eax, 2
	LONG $0x4769e2c4; BYTE $0xd5   // vpsllvd    xmm2, xmm2, xmm5
	LONG $0x2259e3c4; WORD $0x03e1 // vpinsrd    xmm4, xmm4, ecx, 3
	LONG $0xd2ebe1c5               // vpor    xmm2, xmm3, xmm2
	LONG $0x386de3c4; WORD $0x01d4 // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x456de2c4; BYTE $0xd6   // vpsrlvd    ymm2, ymm2, ymm6
	LONG $0xd0dbedc5               // vpand    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; WORD $0xe057 // vmovdqu    yword [r15 - 32], ymm2
	WORD $0x438b; BYTE $0x70       // mov    eax, dword [rbx + 112]
	WORD $0x4b8b; BYTE $0x6c       // mov    ecx, dword [rbx + 108]
	WORD $0xc289                   // mov    edx, eax
	LONG $0x1acaa40f               // shld    edx, ecx, 26
	WORD $0x738b; BYTE $0x68       // mov    esi, dword [rbx + 104]
	LONG $0x17f1a40f               // shld    ecx, esi, 23
	WORD $0x7b8b; BYTE $0x64       // mov    edi, dword [rbx + 100]
	LONG $0x536ffac5; BYTE $0x54   // vmovdqu    xmm2, oword [rbx + 84]
	LONG $0x14fea40f               // shld    esi, edi, 20
	LONG $0x4569e2c4; BYTE $0xdf   // vpsrlvd    xmm3, xmm2, xmm7
	LONG $0xd270f9c5; BYTE $0xf9   // vpshufd    xmm2, xmm2, 249
	LONG $0x2269e3c4; WORD $0x03d7 // vpinsrd    xmm2, xmm2, edi, 3
	LONG $0xe66ef9c5               // vmovd    xmm4, esi
	LONG $0x2259e3c4; WORD $0x01e1 // vpinsrd    xmm4, xmm4, ecx, 1
	LONG $0x4769e2c4; BYTE $0xd1   // vpsllvd    xmm2, xmm2, xmm1
	LONG $0x2259e3c4; WORD $0x02e2 // vpinsrd    xmm4, xmm4, edx, 2
	LONG $0x2259e3c4; WORD $0x03e0 // vpinsrd    xmm4, xmm4, eax, 3
	LONG $0xd2ebe1c5               // vpor    xmm2, xmm3, xmm2
	LONG $0x386de3c4; WORD $0x01d4 // vinserti128    ymm2, ymm2, xmm4, 1
	LONG $0x456dc2c4; BYTE $0xd1   // vpsrlvd    ymm2, ymm2, ymm9
	LONG $0xd0dbedc5               // vpand    ymm2, ymm2, ymm0
	LONG $0x7f7ec1c4; BYTE $0x17   // vmovdqu    yword [r15], ymm2
	LONG $0x74c38348               // add    rbx, 116
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_89
	JMP  LBB0_147

LBB0_9:
	WORD $0xf983; BYTE $0x02             // cmp    ecx, 2
	JE   LBB0_141
	WORD $0xf983; BYTE $0x03             // cmp    ecx, 3
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8944; BYTE $0xf0             // mov    eax, r14d
	LONG $0x60c78349                     // add    r15, 96
	QUAD $0x0000e085597de2c4; BYTE $0x00 // vpbroadcastq    ymm0, qword 224[rbp] /* [rip + .LCPI0_127] */
	QUAD $0x00000a008d6ffdc5             // vmovdqa    ymm1, yword 2560[rbp] /* [rip + .LCPI0_126] */
	QUAD $0x00000a20956ffdc5             // vmovdqa    ymm2, yword 2592[rbp] /* [rip + .LCPI0_128] */
	QUAD $0x00000a409d6ffdc5             // vmovdqa    ymm3, yword 2624[rbp] /* [rip + .LCPI0_129] */
	QUAD $0x00000a60a56ffdc5             // vmovdqa    ymm4, yword 2656[rbp] /* [rip + .LCPI0_130] */

LBB0_13:
	LONG $0x587de2c4; BYTE $0x2b   // vpbroadcastd    ymm5, dword [rbx]
	LONG $0x4555e2c4; BYTE $0xe9   // vpsrlvd    ymm5, ymm5, ymm1
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	WORD $0x0b8b                   // mov    ecx, dword [rbx]
	WORD $0x538b; BYTE $0x04       // mov    edx, dword [rbx + 4]
	WORD $0xd689                   // mov    esi, edx
	LONG $0x02cea40f               // shld    esi, ecx, 2
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0x2251e3c4; WORD $0x01e9 // vpinsrd    xmm5, xmm5, ecx, 1
	LONG $0x2251e3c4; WORD $0x02ee // vpinsrd    xmm5, xmm5, esi, 2
	LONG $0x2251e3c4; WORD $0x03ea // vpinsrd    xmm5, xmm5, edx, 3
	LONG $0xf26ef9c5               // vmovd    xmm6, edx
	LONG $0x5879e2c4; BYTE $0xf6   // vpbroadcastd    xmm6, xmm6
	LONG $0x3855e3c4; WORD $0x01ee // vinserti128    ymm5, ymm5, xmm6, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	WORD $0x4b8b; BYTE $0x04       // mov    ecx, dword [rbx + 4]
	WORD $0x538b; BYTE $0x08       // mov    edx, dword [rbx + 8]
	WORD $0xd689                   // mov    esi, edx
	LONG $0x01cea40f               // shld    esi, ecx, 1
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0x5879e2c4; BYTE $0xf5   // vpbroadcastd    xmm6, xmm5
	LONG $0x2251e3c4; WORD $0x01ee // vpinsrd    xmm5, xmm5, esi, 1
	LONG $0x2251e3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, edx, 2
	LONG $0x2251e3c4; WORD $0x03ea // vpinsrd    xmm5, xmm5, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xeb   // vpsrlvd    ymm5, ymm5, ymm3
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	LONG $0x587de2c4; WORD $0x086b // vpbroadcastd    ymm5, dword [rbx + 8]
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x0cc38348               // add    rbx, 12
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_13
	JMP  LBB0_147

LBB0_56:
	WORD $0xf983; BYTE $0x12       // cmp    ecx, 18
	JE   LBB0_117
	WORD $0xf983; BYTE $0x13       // cmp    ecx, 19
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x48c38348               // add    rbx, 72
	LONG $0x597de2c4; WORD $0x6845 // vpbroadcastq    ymm0, qword 104[rbp] /* [rip + .LCPI0_68] */
	QUAD $0x000004c08d6ffdc5       // vmovdqa    ymm1, yword 1216[rbp] /* [rip + .LCPI0_67] */
	QUAD $0x000004e0956ffdc5       // vmovdqa    ymm2, yword 1248[rbp] /* [rip + .LCPI0_69] */
	QUAD $0x000005009d6ffdc5       // vmovdqa    ymm3, yword 1280[rbp] /* [rip + .LCPI0_70] */
	QUAD $0x00000520a56ffdc5       // vmovdqa    ymm4, yword 1312[rbp] /* [rip + .LCPI0_71] */

LBB0_60:
	LONG $0xc84b8b44               // mov    r9d, dword [rbx - 56]
	WORD $0x538b; BYTE $0xc4       // mov    edx, dword [rbx - 60]
	WORD $0x8944; BYTE $0xce       // mov    esi, r9d
	LONG $0x0ed6a40f               // shld    esi, edx, 14
	WORD $0x7b8b; BYTE $0xc0       // mov    edi, dword [rbx - 64]
	LONG $0xb8538b44               // mov    r10d, dword [rbx - 72]
	LONG $0x01faa40f               // shld    edx, edi, 1
	WORD $0x438b; BYTE $0xbc       // mov    eax, dword [rbx - 68]
	WORD $0xc189                   // mov    ecx, eax
	LONG $0xd1a40f44; BYTE $0x0d   // shld    ecx, r10d, 13
	LONG $0xef6ef9c5               // vmovd    xmm5, edi
	LONG $0x07c7a40f               // shld    edi, eax, 7
	LONG $0x2251e3c4; WORD $0x01ea // vpinsrd    xmm5, xmm5, edx, 1
	LONG $0x6e79c1c4; BYTE $0xf2   // vmovd    xmm6, r10d
	LONG $0x2251e3c4; WORD $0x02ee // vpinsrd    xmm5, xmm5, esi, 2
	LONG $0x2249e3c4; WORD $0x01f1 // vpinsrd    xmm6, xmm6, ecx, 1
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0x2249e3c4; WORD $0x02f0 // vpinsrd    xmm6, xmm6, eax, 2
	LONG $0x2249e3c4; WORD $0x03f7 // vpinsrd    xmm6, xmm6, edi, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xe9   // vpsrlvd    ymm5, ymm5, ymm1
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	LONG $0xd8538b44               // mov    r10d, dword [rbx - 40]
	LONG $0xdc4b8b44               // mov    r9d, dword [rbx - 36]
	LONG $0xd1a40f45; BYTE $0x03   // shld    r9d, r10d, 3
	WORD $0x538b; BYTE $0xd4       // mov    edx, dword [rbx - 44]
	WORD $0x8944; BYTE $0xd6       // mov    esi, r10d
	LONG $0x09d6a40f               // shld    esi, edx, 9
	WORD $0x7b8b; BYTE $0xd0       // mov    edi, dword [rbx - 48]
	LONG $0xea6ef9c5               // vmovd    xmm5, edx
	LONG $0x0ffaa40f               // shld    edx, edi, 15
	WORD $0x4b8b; BYTE $0xc8       // mov    ecx, dword [rbx - 56]
	WORD $0x438b; BYTE $0xcc       // mov    eax, dword [rbx - 52]
	LONG $0x02c7a40f               // shld    edi, eax, 2
	LONG $0x18c1ac0f               // shrd    ecx, eax, 24
	LONG $0x2251e3c4; WORD $0x01ee // vpinsrd    xmm5, xmm5, esi, 1
	LONG $0xf16ef9c5               // vmovd    xmm6, ecx
	LONG $0x2251c3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, r10d, 2
	LONG $0x2249e3c4; WORD $0x01f0 // vpinsrd    xmm6, xmm6, eax, 1
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0x2249e3c4; WORD $0x02f7 // vpinsrd    xmm6, xmm6, edi, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	LONG $0xec538b44               // mov    r10d, dword [rbx - 20]
	LONG $0xf04b8b44               // mov    r9d, dword [rbx - 16]
	LONG $0xd1a40f45; BYTE $0x0b   // shld    r9d, r10d, 11
	WORD $0x538b; BYTE $0xe8       // mov    edx, dword [rbx - 24]
	WORD $0x8944; BYTE $0xd6       // mov    esi, r10d
	LONG $0xe45b8b44               // mov    r11d, dword [rbx - 28]
	LONG $0x11d6a40f               // shld    esi, edx, 17
	WORD $0x4b8b; BYTE $0xdc       // mov    ecx, dword [rbx - 36]
	WORD $0x438b; BYTE $0xe0       // mov    eax, dword [rbx - 32]
	LONG $0xdaa40f44; BYTE $0x04   // shld    edx, r11d, 4
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0x0ac7a40f               // shld    edi, eax, 10
	LONG $0x10c1ac0f               // shrd    ecx, eax, 16
	LONG $0xea6ef9c5               // vmovd    xmm5, edx
	LONG $0x2251e3c4; WORD $0x01ee // vpinsrd    xmm5, xmm5, esi, 1
	LONG $0xf16ef9c5               // vmovd    xmm6, ecx
	LONG $0x2251c3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, r10d, 2
	LONG $0x2249e3c4; WORD $0x01f0 // vpinsrd    xmm6, xmm6, eax, 1
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0x2249e3c4; WORD $0x02f7 // vpinsrd    xmm6, xmm6, edi, 2
	LONG $0x2249c3c4; WORD $0x03f3 // vpinsrd    xmm6, xmm6, r11d, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xeb   // vpsrlvd    ymm5, ymm5, ymm3
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	LONG $0xfc5b8b44               // mov    r11d, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0xdaa40f44; BYTE $0x06   // shld    edx, r11d, 6
	WORD $0x4b8b; BYTE $0xf8       // mov    ecx, dword [rbx - 8]
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0x0ccfa40f               // shld    edi, ecx, 12
	LONG $0xf0538b44               // mov    r10d, dword [rbx - 16]
	WORD $0x438b; BYTE $0xf4       // mov    eax, dword [rbx - 12]
	WORD $0xce89                   // mov    esi, ecx
	LONG $0x12c6a40f               // shld    esi, eax, 18
	LONG $0xd0a40f44; BYTE $0x05   // shld    eax, r10d, 5
	LONG $0x6e79c1c4; BYTE $0xea   // vmovd    xmm5, r10d
	LONG $0xf76ef9c5               // vmovd    xmm6, edi
	LONG $0x2251e3c4; WORD $0x01e8 // vpinsrd    xmm5, xmm5, eax, 1
	LONG $0x2249c3c4; WORD $0x01f3 // vpinsrd    xmm6, xmm6, r11d, 1
	LONG $0x2251e3c4; WORD $0x02ee // vpinsrd    xmm5, xmm5, esi, 2
	LONG $0x2249e3c4; WORD $0x02f2 // vpinsrd    xmm6, xmm6, edx, 2
	LONG $0x2251e3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, ecx, 3
	LONG $0x2249c3c4; WORD $0x03f1 // vpinsrd    xmm6, xmm6, r9d, 3
	LONG $0x3855e3c4; WORD $0x01ee // vinserti128    ymm5, ymm5, xmm6, 1
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x4cc38348               // add    rbx, 76
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_60
	JMP  LBB0_147

LBB0_32:
	WORD $0xf983; BYTE $0x0a             // cmp    ecx, 10
	JE   LBB0_129
	WORD $0xf983; BYTE $0x0b             // cmp    ecx, 11
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0             // mov    r8d, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x28c38348                     // add    rbx, 40
	QUAD $0x0000a885597de2c4; BYTE $0x00 // vpbroadcastq    ymm0, qword 168[rbp] /* [rip + .LCPI0_97] */
	QUAD $0x000007608d6ffdc5             // vmovdqa    ymm1, yword 1888[rbp] /* [rip + .LCPI0_96] */
	QUAD $0x00000780956ffdc5             // vmovdqa    ymm2, yword 1920[rbp] /* [rip + .LCPI0_98] */
	QUAD $0x000007a09d6ffdc5             // vmovdqa    ymm3, yword 1952[rbp] /* [rip + .LCPI0_99] */
	QUAD $0x000007c0a56ffdc5             // vmovdqa    ymm4, yword 1984[rbp] /* [rip + .LCPI0_100] */

LBB0_36:
	WORD $0x4b8b; BYTE $0xe0       // mov    ecx, dword [rbx - 32]
	WORD $0x538b; BYTE $0xd8       // mov    edx, dword [rbx - 40]
	WORD $0x738b; BYTE $0xdc       // mov    esi, dword [rbx - 36]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0x09f7a40f               // shld    edi, esi, 9
	WORD $0xf089                   // mov    eax, esi
	LONG $0x0ad0a40f               // shld    eax, edx, 10
	LONG $0xee6ef9c5               // vmovd    xmm5, esi
	LONG $0x2251e3c4; WORD $0x01ef // vpinsrd    xmm5, xmm5, edi, 1
	LONG $0x2251e3c4; WORD $0x02e9 // vpinsrd    xmm5, xmm5, ecx, 2
	LONG $0x2251e3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, ecx, 3
	LONG $0xf26ef9c5               // vmovd    xmm6, edx
	LONG $0x2249e3c4; WORD $0x01f2 // vpinsrd    xmm6, xmm6, edx, 1
	LONG $0x2249e3c4; WORD $0x02f0 // vpinsrd    xmm6, xmm6, eax, 2
	LONG $0x2249e3c4; WORD $0x03f6 // vpinsrd    xmm6, xmm6, esi, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xe9   // vpsrlvd    ymm5, ymm5, ymm1
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	WORD $0x438b; BYTE $0xec       // mov    eax, dword [rbx - 20]
	WORD $0x4b8b; BYTE $0xe8       // mov    ecx, dword [rbx - 24]
	WORD $0xc289                   // mov    edx, eax
	LONG $0x06caa40f               // shld    edx, ecx, 6
	WORD $0x738b; BYTE $0xe0       // mov    esi, dword [rbx - 32]
	WORD $0x7b8b; BYTE $0xe4       // mov    edi, dword [rbx - 28]
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0x2251e3c4; WORD $0x01e9 // vpinsrd    xmm5, xmm5, ecx, 1
	LONG $0x07f9a40f               // shld    ecx, edi, 7
	LONG $0x18feac0f               // shrd    esi, edi, 24
	LONG $0x2251e3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, edx, 2
	LONG $0x2251e3c4; WORD $0x03e8 // vpinsrd    xmm5, xmm5, eax, 3
	LONG $0xf66ef9c5               // vmovd    xmm6, esi
	LONG $0x2249e3c4; WORD $0x01f7 // vpinsrd    xmm6, xmm6, edi, 1
	LONG $0x2249e3c4; WORD $0x02f7 // vpinsrd    xmm6, xmm6, edi, 2
	LONG $0x2249e3c4; WORD $0x03f1 // vpinsrd    xmm6, xmm6, ecx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	WORD $0x438b; BYTE $0xf4       // mov    eax, dword [rbx - 12]
	WORD $0x4b8b; BYTE $0xf8       // mov    ecx, dword [rbx - 8]
	LONG $0x03c1a40f               // shld    ecx, eax, 3
	LONG $0xec4b8b44               // mov    r9d, dword [rbx - 20]
	WORD $0x738b; BYTE $0xf0       // mov    esi, dword [rbx - 16]
	WORD $0xc789                   // mov    edi, eax
	LONG $0x04f7a40f               // shld    edi, esi, 4
	WORD $0xf289                   // mov    edx, esi
	LONG $0xcaa40f44; BYTE $0x05   // shld    edx, r9d, 5
	LONG $0xef6ef9c5               // vmovd    xmm5, edi
	LONG $0x2251e3c4; WORD $0x01e8 // vpinsrd    xmm5, xmm5, eax, 1
	LONG $0x2251e3c4; WORD $0x02e8 // vpinsrd    xmm5, xmm5, eax, 2
	LONG $0x2251e3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, ecx, 3
	LONG $0x6e79c1c4; BYTE $0xf1   // vmovd    xmm6, r9d
	LONG $0x2249e3c4; WORD $0x01f2 // vpinsrd    xmm6, xmm6, edx, 1
	LONG $0x2249e3c4; WORD $0x02f6 // vpinsrd    xmm6, xmm6, esi, 2
	LONG $0x2249e3c4; WORD $0x03f6 // vpinsrd    xmm6, xmm6, esi, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xeb   // vpsrlvd    ymm5, ymm5, ymm3
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	WORD $0x038b                   // mov    eax, dword [rbx]
	WORD $0x4b8b; BYTE $0xf8       // mov    ecx, dword [rbx - 8]
	WORD $0x538b; BYTE $0xfc       // mov    edx, dword [rbx - 4]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x01d6a40f               // shld    esi, edx, 1
	WORD $0xd789                   // mov    edi, edx
	LONG $0x02cfa40f               // shld    edi, ecx, 2
	LONG $0xea6ef9c5               // vmovd    xmm5, edx
	LONG $0x2251e3c4; WORD $0x01ee // vpinsrd    xmm5, xmm5, esi, 1
	LONG $0x2251e3c4; WORD $0x02e8 // vpinsrd    xmm5, xmm5, eax, 2
	LONG $0x2251e3c4; WORD $0x03e8 // vpinsrd    xmm5, xmm5, eax, 3
	LONG $0xf16ef9c5               // vmovd    xmm6, ecx
	LONG $0x2249e3c4; WORD $0x01f1 // vpinsrd    xmm6, xmm6, ecx, 1
	LONG $0x2249e3c4; WORD $0x02f7 // vpinsrd    xmm6, xmm6, edi, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x2cc38348               // add    rbx, 44
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_36
	JMP  LBB0_147

LBB0_79:
	WORD $0xf983; BYTE $0x1a       // cmp    ecx, 26
	JE   LBB0_105
	WORD $0xf983; BYTE $0x1b       // cmp    ecx, 27
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x68c38348               // add    rbx, 104
	LONG $0x597de2c4; WORD $0x2045 // vpbroadcastq    ymm0, qword 32[rbp] /* [rip + .LCPI0_25] */
	QUAD $0x000002408d6f7dc5       // vmovdqa    ymm9, yword 576[rbp] /* [rip + .LCPI0_24] */
	QUAD $0x00000ba0956f79c5       // vmovdqa    xmm10, oword 2976[rbp] /* [rip + .LCPI0_26] */
	QUAD $0x00000bb09d6f79c5       // vmovdqa    xmm11, oword 2992[rbp] /* [rip + .LCPI0_27] */
	QUAD $0x00000260a56ffdc5       // vmovdqa    ymm4, yword 608[rbp] /* [rip + .LCPI0_28] */
	QUAD $0x00000bc0ad6ff9c5       // vmovdqa    xmm5, oword 3008[rbp] /* [rip + .LCPI0_29] */
	QUAD $0x00000bd0b56ff9c5       // vmovdqa    xmm6, oword 3024[rbp] /* [rip + .LCPI0_30] */
	QUAD $0x00000280bd6ffdc5       // vmovdqa    ymm7, yword 640[rbp] /* [rip + .LCPI0_31] */
	QUAD $0x000002a0856f7dc5       // vmovdqa    ymm8, yword 672[rbp] /* [rip + .LCPI0_32] */

LBB0_83:
	LONG $0xac538b44               // mov    r10d, dword [rbx - 84]
	LONG $0xb04b8b44               // mov    r9d, dword [rbx - 80]
	LONG $0xd1a40f45; BYTE $0x03   // shld    r9d, r10d, 3
	WORD $0x738b; BYTE $0xa8       // mov    esi, dword [rbx - 88]
	WORD $0x8944; BYTE $0xd7       // mov    edi, r10d
	LONG $0x19f7a40f               // shld    edi, esi, 25
	WORD $0x438b; BYTE $0xa4       // mov    eax, dword [rbx - 92]
	LONG $0x14c6a40f               // shld    esi, eax, 20
	WORD $0x538b; BYTE $0xa0       // mov    edx, dword [rbx - 96]
	LONG $0x0fd0a40f               // shld    eax, edx, 15
	LONG $0x985b8b44               // mov    r11d, dword [rbx - 104]
	WORD $0x4b8b; BYTE $0x9c       // mov    ecx, dword [rbx - 100]
	LONG $0x0acaa40f               // shld    edx, ecx, 10
	LONG $0xd9a40f44; BYTE $0x05   // shld    ecx, r11d, 5
	LONG $0x6e79c1c4; BYTE $0xcb   // vmovd    xmm1, r11d
	LONG $0xd66ef9c5               // vmovd    xmm2, esi
	LONG $0x2271e3c4; WORD $0x01c9 // vpinsrd    xmm1, xmm1, ecx, 1
	LONG $0x2269e3c4; WORD $0x01d7 // vpinsrd    xmm2, xmm2, edi, 1
	LONG $0x2271e3c4; WORD $0x02ca // vpinsrd    xmm1, xmm1, edx, 2
	LONG $0x2269c3c4; WORD $0x02d2 // vpinsrd    xmm2, xmm2, r10d, 2
	LONG $0x2271e3c4; WORD $0x03c8 // vpinsrd    xmm1, xmm1, eax, 3
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x3875e3c4; WORD $0x01ca // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0x4575c2c4; BYTE $0xc9   // vpsrlvd    ymm1, ymm1, ymm9
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; WORD $0xa04f // vmovdqu    yword [r15 - 96], ymm1
	WORD $0x438b; BYTE $0xc8       // mov    eax, dword [rbx - 56]
	WORD $0x4b8b; BYTE $0xcc       // mov    ecx, dword [rbx - 52]
	LONG $0x0bc1a40f               // shld    ecx, eax, 11
	WORD $0x538b; BYTE $0xc4       // mov    edx, dword [rbx - 60]
	WORD $0x738b; BYTE $0xc0       // mov    esi, dword [rbx - 64]
	LONG $0x06d0a40f               // shld    eax, edx, 6
	LONG $0x01f2a40f               // shld    edx, esi, 1
	LONG $0x4b6ffac5; BYTE $0xb0   // vmovdqu    xmm1, oword [rbx - 80]
	LONG $0x4571c2c4; BYTE $0xd2   // vpsrlvd    xmm2, xmm1, xmm10
	LONG $0xc970f9c5; BYTE $0xf9   // vpshufd    xmm1, xmm1, 249
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x2271e3c4; WORD $0x03ce // vpinsrd    xmm1, xmm1, esi, 3
	LONG $0x2261e3c4; WORD $0x01da // vpinsrd    xmm3, xmm3, edx, 1
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x4771c2c4; BYTE $0xcb   // vpsllvd    xmm1, xmm1, xmm11
	LONG $0x2261e3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, ecx, 3
	LONG $0xc9ebe9c5               // vpor    xmm1, xmm2, xmm1
	LONG $0x3875e3c4; WORD $0x01cb // vinserti128    ymm1, ymm1, xmm3, 1
	LONG $0x4575e2c4; BYTE $0xcc   // vpsrlvd    ymm1, ymm1, ymm4
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; WORD $0xc04f // vmovdqu    yword [r15 - 64], ymm1
	WORD $0x438b; BYTE $0xe4       // mov    eax, dword [rbx - 28]
	LONG $0xe84b8b44               // mov    r9d, dword [rbx - 24]
	LONG $0xc1a40f41; BYTE $0x13   // shld    r9d, eax, 19
	WORD $0x538b; BYTE $0xe0       // mov    edx, dword [rbx - 32]
	LONG $0x0ed0a40f               // shld    eax, edx, 14
	WORD $0x738b; BYTE $0xdc       // mov    esi, dword [rbx - 36]
	LONG $0x09f2a40f               // shld    edx, esi, 9
	LONG $0xd4538b44               // mov    r10d, dword [rbx - 44]
	WORD $0x7b8b; BYTE $0xd8       // mov    edi, dword [rbx - 40]
	LONG $0x04fea40f               // shld    esi, edi, 4
	WORD $0xf989                   // mov    ecx, edi
	LONG $0xd1a40f44; BYTE $0x1a   // shld    ecx, r10d, 26
	LONG $0x4b7efac5; BYTE $0xcc   // vmovq    xmm1, qword [rbx - 52]
	LONG $0x4571e2c4; BYTE $0xd5   // vpsrlvd    xmm2, xmm1, xmm5
	LONG $0xc970f9c5; BYTE $0xe5   // vpshufd    xmm1, xmm1, 229
	LONG $0x2271c3c4; WORD $0x01ca // vpinsrd    xmm1, xmm1, r10d, 1
	LONG $0x4771e2c4; BYTE $0xce   // vpsllvd    xmm1, xmm1, xmm6
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x2261e3c4; WORD $0x01da // vpinsrd    xmm3, xmm3, edx, 1
	LONG $0xc9ebe9c5               // vpor    xmm1, xmm2, xmm1
	LONG $0x2261e3c4; WORD $0x02d0 // vpinsrd    xmm2, xmm3, eax, 2
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x2271e3c4; WORD $0x02c9 // vpinsrd    xmm1, xmm1, ecx, 2
	LONG $0x2271e3c4; WORD $0x03cf // vpinsrd    xmm1, xmm1, edi, 3
	LONG $0x3875e3c4; WORD $0x01ca // vinserti128    ymm1, ymm1, xmm2, 1
	LONG $0x4575e2c4; BYTE $0xcf   // vpsrlvd    ymm1, ymm1, ymm7
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; WORD $0xe04f // vmovdqu    yword [r15 - 32], ymm1
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	LONG $0xfc5b8b44               // mov    r11d, dword [rbx - 4]
	WORD $0x8945; BYTE $0xca       // mov    r10d, r9d
	LONG $0xdaa40f45; BYTE $0x16   // shld    r10d, r11d, 22
	WORD $0x738b; BYTE $0xf8       // mov    esi, dword [rbx - 8]
	LONG $0xf3a40f41; BYTE $0x11   // shld    r11d, esi, 17
	WORD $0x7b8b; BYTE $0xf4       // mov    edi, dword [rbx - 12]
	WORD $0x438b; BYTE $0xf0       // mov    eax, dword [rbx - 16]
	LONG $0x0cfea40f               // shld    esi, edi, 12
	WORD $0x538b; BYTE $0xe8       // mov    edx, dword [rbx - 24]
	WORD $0x4b8b; BYTE $0xec       // mov    ecx, dword [rbx - 20]
	LONG $0x07c7a40f               // shld    edi, eax, 7
	LONG $0x08caac0f               // shrd    edx, ecx, 8
	LONG $0x02c8a40f               // shld    eax, ecx, 2
	LONG $0xce6ef9c5               // vmovd    xmm1, esi
	LONG $0x2271c3c4; WORD $0x01cb // vpinsrd    xmm1, xmm1, r11d, 1
	LONG $0xd26ef9c5               // vmovd    xmm2, edx
	LONG $0x2271c3c4; WORD $0x02ca // vpinsrd    xmm1, xmm1, r10d, 2
	LONG $0x2269e3c4; WORD $0x01d1 // vpinsrd    xmm2, xmm2, ecx, 1
	LONG $0x2271c3c4; WORD $0x03c9 // vpinsrd    xmm1, xmm1, r9d, 3
	LONG $0x2269e3c4; WORD $0x02d0 // vpinsrd    xmm2, xmm2, eax, 2
	LONG $0x2269e3c4; WORD $0x03d7 // vpinsrd    xmm2, xmm2, edi, 3
	LONG $0x386de3c4; WORD $0x01c9 // vinserti128    ymm1, ymm2, xmm1, 1
	LONG $0x4575c2c4; BYTE $0xc8   // vpsrlvd    ymm1, ymm1, ymm8
	LONG $0xc8dbf5c5               // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; BYTE $0x0f   // vmovdqu    yword [r15], ymm1
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x6cc38348               // add    rbx, 108
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_83
	JMP  LBB0_147

LBB0_20:
	WORD $0xf983; BYTE $0x06             // cmp    ecx, 6
	JE   LBB0_135
	WORD $0xf983; BYTE $0x07             // cmp    ecx, 7
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0             // mov    r8d, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x18c38348                     // add    rbx, 24
	QUAD $0x0000c085597de2c4; BYTE $0x00 // vpbroadcastq    ymm0, qword 192[rbp] /* [rip + .LCPI0_112] */
	QUAD $0x000008a08d6ffdc5             // vmovdqa    ymm1, yword 2208[rbp] /* [rip + .LCPI0_111] */
	QUAD $0x000008c0956ffdc5             // vmovdqa    ymm2, yword 2240[rbp] /* [rip + .LCPI0_113] */
	QUAD $0x000008e09d6ffdc5             // vmovdqa    ymm3, yword 2272[rbp] /* [rip + .LCPI0_114] */
	QUAD $0x00000900a56ffdc5             // vmovdqa    ymm4, yword 2304[rbp] /* [rip + .LCPI0_115] */

LBB0_24:
	WORD $0x4b8b; BYTE $0xe8       // mov    ecx, dword [rbx - 24]
	WORD $0x538b; BYTE $0xec       // mov    edx, dword [rbx - 20]
	WORD $0xd689                   // mov    esi, edx
	LONG $0x04cea40f               // shld    esi, ecx, 4
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0xf66ef9c5               // vmovd    xmm6, esi
	LONG $0x2249e3c4; WORD $0x01f2 // vpinsrd    xmm6, xmm6, edx, 1
	LONG $0x2249e3c4; WORD $0x02f2 // vpinsrd    xmm6, xmm6, edx, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x5879e2c4; BYTE $0xed   // vpbroadcastd    xmm5, xmm5
	LONG $0x3855e3c4; WORD $0x01ee // vinserti128    ymm5, ymm5, xmm6, 1
	LONG $0x4555e2c4; BYTE $0xe9   // vpsrlvd    ymm5, ymm5, ymm1
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	WORD $0x4b8b; BYTE $0xf4       // mov    ecx, dword [rbx - 12]
	WORD $0x538b; BYTE $0xec       // mov    edx, dword [rbx - 20]
	WORD $0x738b; BYTE $0xf0       // mov    esi, dword [rbx - 16]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0x05f7a40f               // shld    edi, esi, 5
	WORD $0xf089                   // mov    eax, esi
	LONG $0x01d0a40f               // shld    eax, edx, 1
	LONG $0xee6ef9c5               // vmovd    xmm5, esi
	LONG $0x2251e3c4; WORD $0x01ef // vpinsrd    xmm5, xmm5, edi, 1
	LONG $0x2251e3c4; WORD $0x02e9 // vpinsrd    xmm5, xmm5, ecx, 2
	LONG $0x2251e3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, ecx, 3
	LONG $0xf26ef9c5               // vmovd    xmm6, edx
	LONG $0x2249e3c4; WORD $0x01f0 // vpinsrd    xmm6, xmm6, eax, 1
	LONG $0x2249e3c4; WORD $0x02f6 // vpinsrd    xmm6, xmm6, esi, 2
	LONG $0x2249e3c4; WORD $0x03f6 // vpinsrd    xmm6, xmm6, esi, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	WORD $0x438b; BYTE $0xfc       // mov    eax, dword [rbx - 4]
	WORD $0x4b8b; BYTE $0xf4       // mov    ecx, dword [rbx - 12]
	WORD $0x538b; BYTE $0xf8       // mov    edx, dword [rbx - 8]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x06d6a40f               // shld    esi, edx, 6
	WORD $0xd789                   // mov    edi, edx
	LONG $0x02cfa40f               // shld    edi, ecx, 2
	LONG $0xea6ef9c5               // vmovd    xmm5, edx
	LONG $0x2251e3c4; WORD $0x01ea // vpinsrd    xmm5, xmm5, edx, 1
	LONG $0x2251e3c4; WORD $0x02ee // vpinsrd    xmm5, xmm5, esi, 2
	LONG $0x2251e3c4; WORD $0x03e8 // vpinsrd    xmm5, xmm5, eax, 3
	LONG $0xf16ef9c5               // vmovd    xmm6, ecx
	LONG $0x2249e3c4; WORD $0x01f1 // vpinsrd    xmm6, xmm6, ecx, 1
	LONG $0x2249e3c4; WORD $0x02f7 // vpinsrd    xmm6, xmm6, edi, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xeb   // vpsrlvd    ymm5, ymm5, ymm3
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	WORD $0x438b; BYTE $0xfc       // mov    eax, dword [rbx - 4]
	WORD $0x0b8b                   // mov    ecx, dword [rbx]
	WORD $0xca89                   // mov    edx, ecx
	LONG $0x03c2a40f               // shld    edx, eax, 3
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0xf06ef9c5               // vmovd    xmm6, eax
	LONG $0x2249e3c4; WORD $0x01f0 // vpinsrd    xmm6, xmm6, eax, 1
	LONG $0x2249e3c4; WORD $0x02f0 // vpinsrd    xmm6, xmm6, eax, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x5879e2c4; BYTE $0xed   // vpbroadcastd    xmm5, xmm5
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x1cc38348               // add    rbx, 28
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_24
	JMP  LBB0_147

LBB0_67:
	WORD $0xf983; BYTE $0x16       // cmp    ecx, 22
	JE   LBB0_111
	WORD $0xf983; BYTE $0x17       // cmp    ecx, 23
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x58c38348               // add    rbx, 88
	QUAD $0x00000360856f7dc5       // vmovdqa    ymm8, yword 864[rbp] /* [rip + .LCPI0_48] */
	LONG $0x597de2c4; WORD $0x484d // vpbroadcastq    ymm1, qword 72[rbp] /* [rip + .LCPI0_49] */
	QUAD $0x00000c30956ff9c5       // vmovdqa    xmm2, oword 3120[rbp] /* [rip + .LCPI0_50] */
	QUAD $0x00000c409d6ff9c5       // vmovdqa    xmm3, oword 3136[rbp] /* [rip + .LCPI0_51] */
	QUAD $0x00000380a56ffdc5       // vmovdqa    ymm4, yword 896[rbp] /* [rip + .LCPI0_52] */
	QUAD $0x000003a0ad6ffdc5       // vmovdqa    ymm5, yword 928[rbp] /* [rip + .LCPI0_53] */
	QUAD $0x000003c0b56ffdc5       // vmovdqa    ymm6, yword 960[rbp] /* [rip + .LCPI0_54] */

LBB0_71:
	LONG $0xbc4b8b44               // mov    r9d, dword [rbx - 68]
	WORD $0x538b; BYTE $0xb8       // mov    edx, dword [rbx - 72]
	WORD $0x8945; BYTE $0xcb       // mov    r11d, r9d
	LONG $0xd3a40f41; BYTE $0x16   // shld    r11d, edx, 22
	WORD $0x7b8b; BYTE $0xb4       // mov    edi, dword [rbx - 76]
	LONG $0x0dfaa40f               // shld    edx, edi, 13
	WORD $0x738b; BYTE $0xb0       // mov    esi, dword [rbx - 80]
	LONG $0x04f7a40f               // shld    edi, esi, 4
	LONG $0xa8538b44               // mov    r10d, dword [rbx - 88]
	WORD $0x4b8b; BYTE $0xac       // mov    ecx, dword [rbx - 84]
	WORD $0xf089                   // mov    eax, esi
	LONG $0x12c8a40f               // shld    eax, ecx, 18
	LONG $0xd1a40f44; BYTE $0x09   // shld    ecx, r10d, 9
	LONG $0x6e79c1c4; BYTE $0xfa   // vmovd    xmm7, r10d
	LONG $0xc76ef9c5               // vmovd    xmm0, edi
	LONG $0x2241e3c4; WORD $0x01f9 // vpinsrd    xmm7, xmm7, ecx, 1
	LONG $0x2279e3c4; WORD $0x01c2 // vpinsrd    xmm0, xmm0, edx, 1
	LONG $0x2241e3c4; WORD $0x02f8 // vpinsrd    xmm7, xmm7, eax, 2
	LONG $0x2279c3c4; WORD $0x02c3 // vpinsrd    xmm0, xmm0, r11d, 2
	LONG $0x2241e3c4; WORD $0x03fe // vpinsrd    xmm7, xmm7, esi, 3
	LONG $0x2279c3c4; WORD $0x03c1 // vpinsrd    xmm0, xmm0, r9d, 3
	LONG $0x3845e3c4; WORD $0x01c0 // vinserti128    ymm0, ymm7, xmm0, 1
	LONG $0x457dc2c4; BYTE $0xc0   // vpsrlvd    ymm0, ymm0, ymm8
	LONG $0xc1dbfdc5               // vpand    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xa047 // vmovdqu    yword [r15 - 96], ymm0
	WORD $0x438b; BYTE $0xd0       // mov    eax, dword [rbx - 48]
	LONG $0xd44b8b44               // mov    r9d, dword [rbx - 44]
	LONG $0xc1a40f41; BYTE $0x07   // shld    r9d, eax, 7
	WORD $0x538b; BYTE $0xcc       // mov    edx, dword [rbx - 52]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x15d6a40f               // shld    esi, edx, 21
	WORD $0x7b8b; BYTE $0xc4       // mov    edi, dword [rbx - 60]
	WORD $0x4b8b; BYTE $0xc8       // mov    ecx, dword [rbx - 56]
	LONG $0x0ccaa40f               // shld    edx, ecx, 12
	LONG $0x03f9a40f               // shld    ecx, edi, 3
	LONG $0x437efac5; BYTE $0xbc   // vmovq    xmm0, qword [rbx - 68]
	LONG $0x4579e2c4; BYTE $0xfa   // vpsrlvd    xmm7, xmm0, xmm2
	LONG $0xc070f9c5; BYTE $0xe5   // vpshufd    xmm0, xmm0, 229
	LONG $0x2279e3c4; WORD $0x01c7 // vpinsrd    xmm0, xmm0, edi, 1
	LONG $0x4779e2c4; BYTE $0xc3   // vpsllvd    xmm0, xmm0, xmm3
	LONG $0xc0ebc1c5               // vpor    xmm0, xmm7, xmm0
	LONG $0xfa6ef9c5               // vmovd    xmm7, edx
	LONG $0x2241e3c4; WORD $0x01fe // vpinsrd    xmm7, xmm7, esi, 1
	LONG $0x2241e3c4; WORD $0x02f8 // vpinsrd    xmm7, xmm7, eax, 2
	LONG $0x2241c3c4; WORD $0x03f9 // vpinsrd    xmm7, xmm7, r9d, 3
	LONG $0x2279e3c4; WORD $0x02c7 // vpinsrd    xmm0, xmm0, edi, 2
	LONG $0x2279e3c4; WORD $0x03c1 // vpinsrd    xmm0, xmm0, ecx, 3
	LONG $0x387de3c4; WORD $0x01c7 // vinserti128    ymm0, ymm0, xmm7, 1
	LONG $0x457de2c4; BYTE $0xc4   // vpsrlvd    ymm0, ymm0, ymm4
	LONG $0xc1dbfdc5               // vpand    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xc047 // vmovdqu    yword [r15 - 64], ymm0
	LONG $0xe85b8b44               // mov    r11d, dword [rbx - 24]
	LONG $0xec4b8b44               // mov    r9d, dword [rbx - 20]
	LONG $0xd9a40f45; BYTE $0x0f   // shld    r9d, r11d, 15
	LONG $0xe4538b44               // mov    r10d, dword [rbx - 28]
	LONG $0xd3a40f45; BYTE $0x06   // shld    r11d, r10d, 6
	WORD $0x738b; BYTE $0xe0       // mov    esi, dword [rbx - 32]
	WORD $0x8944; BYTE $0xd7       // mov    edi, r10d
	WORD $0x4b8b; BYTE $0xdc       // mov    ecx, dword [rbx - 36]
	LONG $0x14f7a40f               // shld    edi, esi, 20
	WORD $0x538b; BYTE $0xd4       // mov    edx, dword [rbx - 44]
	WORD $0x438b; BYTE $0xd8       // mov    eax, dword [rbx - 40]
	LONG $0x0bcea40f               // shld    esi, ecx, 11
	LONG $0x10c2ac0f               // shrd    edx, eax, 16
	LONG $0x02c1a40f               // shld    ecx, eax, 2
	LONG $0xc76ef9c5               // vmovd    xmm0, edi
	LONG $0x2279c3c4; WORD $0x01c2 // vpinsrd    xmm0, xmm0, r10d, 1
	LONG $0xfa6ef9c5               // vmovd    xmm7, edx
	LONG $0x2279c3c4; WORD $0x02c3 // vpinsrd    xmm0, xmm0, r11d, 2
	LONG $0x2241e3c4; WORD $0x01f8 // vpinsrd    xmm7, xmm7, eax, 1
	LONG $0x2279c3c4; WORD $0x03c1 // vpinsrd    xmm0, xmm0, r9d, 3
	LONG $0x2241e3c4; WORD $0x02f9 // vpinsrd    xmm7, xmm7, ecx, 2
	LONG $0x2241e3c4; WORD $0x03fe // vpinsrd    xmm7, xmm7, esi, 3
	LONG $0x3845e3c4; WORD $0x01c0 // vinserti128    ymm0, ymm7, xmm0, 1
	LONG $0x457de2c4; BYTE $0xc5   // vpsrlvd    ymm0, ymm0, ymm5
	LONG $0xc1dbfdc5               // vpand    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; WORD $0xe047 // vmovdqu    yword [r15 - 32], ymm0
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x0ecaa40f               // shld    edx, ecx, 14
	WORD $0x738b; BYTE $0xf8       // mov    esi, dword [rbx - 8]
	LONG $0x05f1a40f               // shld    ecx, esi, 5
	WORD $0x7b8b; BYTE $0xf4       // mov    edi, dword [rbx - 12]
	LONG $0xc66ef9c5               // vmovd    xmm0, esi
	LONG $0x13fea40f               // shld    esi, edi, 19
	LONG $0xec538b44               // mov    r10d, dword [rbx - 20]
	WORD $0x438b; BYTE $0xf0       // mov    eax, dword [rbx - 16]
	LONG $0x0ac7a40f               // shld    edi, eax, 10
	LONG $0xd0a40f44; BYTE $0x01   // shld    eax, r10d, 1
	LONG $0x2279e3c4; WORD $0x01c1 // vpinsrd    xmm0, xmm0, ecx, 1
	LONG $0x6e79c1c4; BYTE $0xfa   // vmovd    xmm7, r10d
	LONG $0x2279e3c4; WORD $0x02c2 // vpinsrd    xmm0, xmm0, edx, 2
	LONG $0x2241e3c4; WORD $0x01f8 // vpinsrd    xmm7, xmm7, eax, 1
	LONG $0x2279c3c4; WORD $0x03c1 // vpinsrd    xmm0, xmm0, r9d, 3
	LONG $0x2241e3c4; WORD $0x02ff // vpinsrd    xmm7, xmm7, edi, 2
	LONG $0x2241e3c4; WORD $0x03fe // vpinsrd    xmm7, xmm7, esi, 3
	LONG $0x3845e3c4; WORD $0x01c0 // vinserti128    ymm0, ymm7, xmm0, 1
	LONG $0x457de2c4; BYTE $0xc6   // vpsrlvd    ymm0, ymm0, ymm6
	LONG $0xc1dbfdc5               // vpand    ymm0, ymm0, ymm1
	LONG $0x7f7ec1c4; BYTE $0x07   // vmovdqu    yword [r15], ymm0
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x5cc38348               // add    rbx, 92
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_71
	JMP  LBB0_147

LBB0_43:
	WORD $0xf983; BYTE $0x0e             // cmp    ecx, 14
	JE   LBB0_123
	WORD $0xf983; BYTE $0x0f             // cmp    ecx, 15
	JNE  LBB0_147
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0             // mov    r8d, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x38c38348                     // add    rbx, 56
	QUAD $0x00008885597de2c4; BYTE $0x00 // vpbroadcastq    ymm0, qword 136[rbp] /* [rip + .LCPI0_82] */
	QUAD $0x000006008d6ffdc5             // vmovdqa    ymm1, yword 1536[rbp] /* [rip + .LCPI0_81] */
	QUAD $0x00000620956ffdc5             // vmovdqa    ymm2, yword 1568[rbp] /* [rip + .LCPI0_83] */
	QUAD $0x000006409d6ffdc5             // vmovdqa    ymm3, yword 1600[rbp] /* [rip + .LCPI0_84] */
	QUAD $0x00000660a56ffdc5             // vmovdqa    ymm4, yword 1632[rbp] /* [rip + .LCPI0_85] */

LBB0_47:
	LONG $0xd44b8b44               // mov    r9d, dword [rbx - 44]
	WORD $0x438b; BYTE $0xd0       // mov    eax, dword [rbx - 48]
	WORD $0x8944; BYTE $0xce       // mov    esi, r9d
	LONG $0x06c6a40f               // shld    esi, eax, 6
	LONG $0xcc538b44               // mov    r10d, dword [rbx - 52]
	WORD $0xc289                   // mov    edx, eax
	LONG $0xd2a40f44; BYTE $0x04   // shld    edx, r10d, 4
	WORD $0x4b8b; BYTE $0xc8       // mov    ecx, dword [rbx - 56]
	WORD $0x8944; BYTE $0xd7       // mov    edi, r10d
	LONG $0x02cfa40f               // shld    edi, ecx, 2
	LONG $0xea6ef9c5               // vmovd    xmm5, edx
	LONG $0x2251e3c4; WORD $0x01e8 // vpinsrd    xmm5, xmm5, eax, 1
	LONG $0x2251e3c4; WORD $0x02ee // vpinsrd    xmm5, xmm5, esi, 2
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0xf16ef9c5               // vmovd    xmm6, ecx
	LONG $0x2249e3c4; WORD $0x01f1 // vpinsrd    xmm6, xmm6, ecx, 1
	LONG $0x2249e3c4; WORD $0x02f7 // vpinsrd    xmm6, xmm6, edi, 2
	LONG $0x2249c3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, r10d, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xe9   // vpsrlvd    ymm5, ymm5, ymm1
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	LONG $0xe44b8b44               // mov    r9d, dword [rbx - 28]
	LONG $0xe05b8b44               // mov    r11d, dword [rbx - 32]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0xdaa40f44; BYTE $0x0e   // shld    edx, r11d, 14
	LONG $0xdc538b44               // mov    r10d, dword [rbx - 36]
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0xd7a40f44; BYTE $0x0c   // shld    edi, r10d, 12
	WORD $0x438b; BYTE $0xd4       // mov    eax, dword [rbx - 44]
	WORD $0x738b; BYTE $0xd8       // mov    esi, dword [rbx - 40]
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	LONG $0x0af1a40f               // shld    ecx, esi, 10
	LONG $0x18f0ac0f               // shrd    eax, esi, 24
	LONG $0xef6ef9c5               // vmovd    xmm5, edi
	LONG $0x2251c3c4; WORD $0x01eb // vpinsrd    xmm5, xmm5, r11d, 1
	LONG $0x2251e3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, edx, 2
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0xf06ef9c5               // vmovd    xmm6, eax
	LONG $0x2249e3c4; WORD $0x01f6 // vpinsrd    xmm6, xmm6, esi, 1
	LONG $0x2249e3c4; WORD $0x02f1 // vpinsrd    xmm6, xmm6, ecx, 2
	LONG $0x2249c3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, r10d, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	WORD $0x438b; BYTE $0xf0       // mov    eax, dword [rbx - 16]
	LONG $0xf4538b44               // mov    r10d, dword [rbx - 12]
	LONG $0xc2a40f41; BYTE $0x07   // shld    r10d, eax, 7
	WORD $0x538b; BYTE $0xec       // mov    edx, dword [rbx - 20]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x05d6a40f               // shld    esi, edx, 5
	LONG $0xe44b8b44               // mov    r9d, dword [rbx - 28]
	WORD $0x4b8b; BYTE $0xe8       // mov    ecx, dword [rbx - 24]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0xcfa40f44; BYTE $0x01   // shld    edi, r9d, 1
	LONG $0xea6ef9c5               // vmovd    xmm5, edx
	LONG $0x03caa40f               // shld    edx, ecx, 3
	LONG $0x2251e3c4; WORD $0x01ee // vpinsrd    xmm5, xmm5, esi, 1
	LONG $0x2251e3c4; WORD $0x02e8 // vpinsrd    xmm5, xmm5, eax, 2
	LONG $0x2251c3c4; WORD $0x03ea // vpinsrd    xmm5, xmm5, r10d, 3
	LONG $0x6e79c1c4; BYTE $0xf1   // vmovd    xmm6, r9d
	LONG $0x2249e3c4; WORD $0x01f7 // vpinsrd    xmm6, xmm6, edi, 1
	LONG $0x2249e3c4; WORD $0x02f1 // vpinsrd    xmm6, xmm6, ecx, 2
	LONG $0x2249e3c4; WORD $0x03f2 // vpinsrd    xmm6, xmm6, edx, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xeb   // vpsrlvd    ymm5, ymm5, ymm3
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x0dcaa40f               // shld    edx, ecx, 13
	WORD $0x438b; BYTE $0xf8       // mov    eax, dword [rbx - 8]
	LONG $0xe96ef9c5               // vmovd    xmm5, ecx
	LONG $0x0bc1a40f               // shld    ecx, eax, 11
	WORD $0x7b8b; BYTE $0xf4       // mov    edi, dword [rbx - 12]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x09fea40f               // shld    esi, edi, 9
	LONG $0xf76ef9c5               // vmovd    xmm6, edi
	LONG $0x2249e3c4; WORD $0x01f6 // vpinsrd    xmm6, xmm6, esi, 1
	LONG $0x2249e3c4; WORD $0x02f0 // vpinsrd    xmm6, xmm6, eax, 2
	LONG $0x2249e3c4; WORD $0x03f1 // vpinsrd    xmm6, xmm6, ecx, 3
	LONG $0x2251e3c4; WORD $0x01ea // vpinsrd    xmm5, xmm5, edx, 1
	LONG $0x2251c3c4; WORD $0x02e9 // vpinsrd    xmm5, xmm5, r9d, 2
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0x384de3c4; WORD $0x01ed // vinserti128    ymm5, ymm6, xmm5, 1
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x3cc38348               // add    rbx, 60
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_47
	JMP  LBB0_147

LBB0_96:
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x597de2c4; WORD $0x0045 // vpbroadcastq    ymm0, qword 0[rbp] /* [rip + .LCPI0_0] */
	LONG $0x60c78349               // add    r15, 96
	QUAD $0x00000100856f7dc5       // vmovdqa    ymm8, yword 256[rbp] /* [rip + .LCPI0_1] */
	QUAD $0x000001208d6f7dc5       // vmovdqa    ymm9, yword 288[rbp] /* [rip + .LCPI0_2] */
	QUAD $0x00000140956f7dc5       // vmovdqa    ymm10, yword 320[rbp] /* [rip + .LCPI0_3] */
	QUAD $0x00000160a56ffdc5       // vmovdqa    ymm4, yword 352[rbp] /* [rip + .LCPI0_4] */
	QUAD $0x00000b00ad6ff9c5       // vmovdqa    xmm5, oword 2816[rbp] /* [rip + .LCPI0_5] */
	QUAD $0x00000b10b56ff9c5       // vmovdqa    xmm6, oword 2832[rbp] /* [rip + .LCPI0_6] */
	QUAD $0x00000180bd6ffdc5       // vmovdqa    ymm7, yword 384[rbp] /* [rip + .LCPI0_7] */

LBB0_98:
	LONG $0x18538b44                           // mov    r10d, dword [rbx + 24]
	LONG $0x1c4b8b44                           // mov    r9d, dword [rbx + 28]
	LONG $0xd1a40f45; BYTE $0x07               // shld    r9d, r10d, 7
	WORD $0x738b; BYTE $0x14                   // mov    esi, dword [rbx + 20]
	LONG $0xf2a40f41; BYTE $0x06               // shld    r10d, esi, 6
	WORD $0x7b8b; BYTE $0x10                   // mov    edi, dword [rbx + 16]
	LONG $0x05fea40f                           // shld    esi, edi, 5
	WORD $0x438b; BYTE $0x0c                   // mov    eax, dword [rbx + 12]
	LONG $0x04c7a40f                           // shld    edi, eax, 4
	WORD $0x538b; BYTE $0x08                   // mov    edx, dword [rbx + 8]
	LONG $0x03d0a40f                           // shld    eax, edx, 3
	WORD $0x4b8b; BYTE $0x04                   // mov    ecx, dword [rbx + 4]
	LONG $0x02caa40f                           // shld    edx, ecx, 2
	WORD $0x8b44; BYTE $0x1b                   // mov    r11d, dword [rbx]
	LONG $0xd9a40f44; BYTE $0x01               // shld    ecx, r11d, 1
	LONG $0xcf6ef9c5                           // vmovd    xmm1, edi
	LONG $0x2271e3c4; WORD $0x01ce             // vpinsrd    xmm1, xmm1, esi, 1
	LONG $0x2271c3c4; WORD $0x02ca             // vpinsrd    xmm1, xmm1, r10d, 2
	LONG $0x2271c3c4; WORD $0x03c9             // vpinsrd    xmm1, xmm1, r9d, 3
	LONG $0x6e79c1c4; BYTE $0xd3               // vmovd    xmm2, r11d
	LONG $0x2269e3c4; WORD $0x01d1             // vpinsrd    xmm2, xmm2, ecx, 1
	LONG $0x2269e3c4; WORD $0x02d2             // vpinsrd    xmm2, xmm2, edx, 2
	LONG $0x2269e3c4; WORD $0x03d0             // vpinsrd    xmm2, xmm2, eax, 3
	LONG $0x386de3c4; WORD $0x01c9             // vinserti128    ymm1, ymm2, xmm1, 1
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; WORD $0xa04f             // vmovdqu    yword [r15 - 96], ymm1
	LONG $0x4b6ffec5; BYTE $0x1c               // vmovdqu    ymm1, yword [rbx + 28]
	LONG $0x4575c2c4; BYTE $0xc8               // vpsrlvd    ymm1, ymm1, ymm8
	LONG $0x536ffac5; BYTE $0x2c               // vmovdqu    xmm2, oword [rbx + 44]
	LONG $0xda70f9c5; BYTE $0xf9               // vpshufd    xmm3, xmm2, 249
	LONG $0x2261e3c4; WORD $0x3c5b; BYTE $0x03 // vpinsrd    xmm3, xmm3, dword [rbx + 60], 3
	LONG $0x0f69e3c4; WORD $0x1c53; BYTE $0x04 // vpalignr    xmm2, xmm2, oword [rbx + 28], 4
	LONG $0x386de3c4; WORD $0x01d3             // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0x476dc2c4; BYTE $0xd1               // vpsllvd    ymm2, ymm2, ymm9
	LONG $0xcaebf5c5                           // vpor    ymm1, ymm1, ymm2
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; WORD $0xc04f             // vmovdqu    yword [r15 - 64], ymm1
	LONG $0x4b6ffec5; BYTE $0x3c               // vmovdqu    ymm1, yword [rbx + 60]
	LONG $0x536ffac5; BYTE $0x4c               // vmovdqu    xmm2, oword [rbx + 76]
	LONG $0xda70f9c5; BYTE $0xf9               // vpshufd    xmm3, xmm2, 249
	LONG $0x2261e3c4; WORD $0x5c5b; BYTE $0x03 // vpinsrd    xmm3, xmm3, dword [rbx + 92], 3
	LONG $0x4575c2c4; BYTE $0xca               // vpsrlvd    ymm1, ymm1, ymm10
	LONG $0x0f69e3c4; WORD $0x3c53; BYTE $0x04 // vpalignr    xmm2, xmm2, oword [rbx + 60], 4
	LONG $0x386de3c4; WORD $0x01d3             // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0x476de2c4; BYTE $0xd4               // vpsllvd    ymm2, ymm2, ymm4
	LONG $0xcaebf5c5                           // vpor    ymm1, ymm1, ymm2
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; WORD $0xe04f             // vmovdqu    yword [r15 - 32], ymm1
	WORD $0x438b; BYTE $0x78                   // mov    eax, dword [rbx + 120]
	WORD $0x4b8b; BYTE $0x74                   // mov    ecx, dword [rbx + 116]
	WORD $0xc289                               // mov    edx, eax
	LONG $0x1ecaa40f                           // shld    edx, ecx, 30
	WORD $0x738b; BYTE $0x70                   // mov    esi, dword [rbx + 112]
	LONG $0x1df1a40f                           // shld    ecx, esi, 29
	WORD $0x7b8b; BYTE $0x6c                   // mov    edi, dword [rbx + 108]
	LONG $0x1cfea40f                           // shld    esi, edi, 28
	LONG $0x4b6ffac5; BYTE $0x5c               // vmovdqu    xmm1, oword [rbx + 92]
	LONG $0x4571e2c4; BYTE $0xd5               // vpsrlvd    xmm2, xmm1, xmm5
	LONG $0xc970f9c5; BYTE $0xf9               // vpshufd    xmm1, xmm1, 249
	LONG $0x2271e3c4; WORD $0x03cf             // vpinsrd    xmm1, xmm1, edi, 3
	LONG $0x4771e2c4; BYTE $0xce               // vpsllvd    xmm1, xmm1, xmm6
	LONG $0xde6ef9c5                           // vmovd    xmm3, esi
	LONG $0x2261e3c4; WORD $0x01d9             // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2261e3c4; WORD $0x02da             // vpinsrd    xmm3, xmm3, edx, 2
	LONG $0x2261e3c4; WORD $0x03d8             // vpinsrd    xmm3, xmm3, eax, 3
	LONG $0xc9ebe9c5                           // vpor    xmm1, xmm2, xmm1
	LONG $0x3875e3c4; WORD $0x01cb             // vinserti128    ymm1, ymm1, xmm3, 1
	LONG $0x4575e2c4; BYTE $0xcf               // vpsrlvd    ymm1, ymm1, ymm7
	LONG $0xc8dbf5c5                           // vpand    ymm1, ymm1, ymm0
	LONG $0x7f7ec1c4; BYTE $0x0f               // vmovdqu    yword [r15], ymm1
	LONG $0x7cc38348                           // add    rbx, 124
	LONG $0x80ef8349                           // sub    r15, -128
	LONG $0xffc08349                           // add    r8, -1
	JNE  LBB0_98
	JMP  LBB0_147

LBB0_144:
	WORD $0xfa83; BYTE $0x20 // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8944; BYTE $0xf3 // mov    ebx, r14d

LBB0_146:
	LONG $0x000080ba; BYTE $0x00 // mov    edx, 128
	WORD $0x894c; BYTE $0xff     // mov    rdi, r15
	WORD $0xf631                 // xor    esi, esi
	CALL clib·_memset(SB)
	LONG $0x80ef8349             // sub    r15, -128
	LONG $0xffc38348             // add    rbx, -1
	JNE  LBB0_146
	JMP  LBB0_147

LBB0_120:
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8944; BYTE $0xf0             // mov    eax, r14d
	WORD $0xc931                         // xor    ecx, ecx
	QUAD $0x00008085597de2c4; BYTE $0x00 // vpbroadcastq    ymm0, qword 128[rbp] /* [rip + .LCPI0_80] */
	LONG $0xc9eff1c5                     // vpxor    xmm1, xmm1, xmm1

LBB0_122:
	LONG $0x146ffac5; BYTE $0x0b               // vmovdqu    xmm2, oword [rbx + rcx]
	LONG $0x00fde3c4; WORD $0xd8d2             // vpermq    ymm2, ymm2, 216
	LONG $0xd270fdc5; BYTE $0x50               // vpshufd    ymm2, ymm2, 80
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0x0e6de3c4; WORD $0xaad1             // vpblendw    ymm2, ymm2, ymm1, 170
	LONG $0x7f7ec1c4; WORD $0x4f14             // vmovdqu    yword [r15 + 2*rcx], ymm2
	LONG $0x546ffac5; WORD $0x100b             // vmovdqu    xmm2, oword [rbx + rcx + 16]
	LONG $0x00fde3c4; WORD $0xd8d2             // vpermq    ymm2, ymm2, 216
	LONG $0xd270fdc5; BYTE $0x50               // vpshufd    ymm2, ymm2, 80
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0x0e6de3c4; WORD $0xaad1             // vpblendw    ymm2, ymm2, ymm1, 170
	LONG $0x7f7ec1c4; WORD $0x4f54; BYTE $0x20 // vmovdqu    yword [r15 + 2*rcx + 32], ymm2
	LONG $0x546ffac5; WORD $0x200b             // vmovdqu    xmm2, oword [rbx + rcx + 32]
	LONG $0x00fde3c4; WORD $0xd8d2             // vpermq    ymm2, ymm2, 216
	LONG $0xd270fdc5; BYTE $0x50               // vpshufd    ymm2, ymm2, 80
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0x0e6de3c4; WORD $0xaad1             // vpblendw    ymm2, ymm2, ymm1, 170
	LONG $0x7f7ec1c4; WORD $0x4f54; BYTE $0x40 // vmovdqu    yword [r15 + 2*rcx + 64], ymm2
	LONG $0x546ffac5; WORD $0x300b             // vmovdqu    xmm2, oword [rbx + rcx + 48]
	LONG $0x00fde3c4; WORD $0xd8d2             // vpermq    ymm2, ymm2, 216
	LONG $0xd270fdc5; BYTE $0x50               // vpshufd    ymm2, ymm2, 80
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0x0e6de3c4; WORD $0xaad1             // vpblendw    ymm2, ymm2, ymm1, 170
	LONG $0x7f7ec1c4; WORD $0x4f54; BYTE $0x60 // vmovdqu    yword [r15 + 2*rcx + 96], ymm2
	LONG $0x40c18348                           // add    rcx, 64
	LONG $0xffc08348                           // add    rax, -1
	JNE  LBB0_122
	JMP  LBB0_147

LBB0_132:
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8944; BYTE $0xf0             // mov    eax, r14d
	WORD $0xc931                         // xor    ecx, ecx
	QUAD $0x000c70855a7de2c4; BYTE $0x00 // vbroadcasti128    ymm0, oword 3184[rbp] /* [rip + .LCPI0_109] */
	QUAD $0x000c848d587de2c4; BYTE $0x00 // vpbroadcastd    ymm1, dword 3204[rbp] /* [rip + .LCPI0_110] */

LBB0_134:
	LONG $0x147efac5; BYTE $0x0b               // vmovq    xmm2, qword [rbx + rcx]
	LONG $0xd270f9c5; BYTE $0x50               // vpshufd    xmm2, xmm2, 80
	LONG $0x00fde3c4; WORD $0x50d2             // vpermq    ymm2, ymm2, 80
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5                           // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0x8f14             // vmovdqu    yword [r15 + 4*rcx], ymm2
	LONG $0x547efac5; WORD $0x080b             // vmovq    xmm2, qword [rbx + rcx + 8]
	LONG $0xd270f9c5; BYTE $0x50               // vpshufd    xmm2, xmm2, 80
	LONG $0x00fde3c4; WORD $0x50d2             // vpermq    ymm2, ymm2, 80
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5                           // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0x8f54; BYTE $0x20 // vmovdqu    yword [r15 + 4*rcx + 32], ymm2
	LONG $0x547efac5; WORD $0x100b             // vmovq    xmm2, qword [rbx + rcx + 16]
	LONG $0xd270f9c5; BYTE $0x50               // vpshufd    xmm2, xmm2, 80
	LONG $0x00fde3c4; WORD $0x50d2             // vpermq    ymm2, ymm2, 80
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5                           // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0x8f54; BYTE $0x40 // vmovdqu    yword [r15 + 4*rcx + 64], ymm2
	LONG $0x547efac5; WORD $0x180b             // vmovq    xmm2, qword [rbx + rcx + 24]
	LONG $0xd270f9c5; BYTE $0x50               // vpshufd    xmm2, xmm2, 80
	LONG $0x00fde3c4; WORD $0x50d2             // vpermq    ymm2, ymm2, 80
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5                           // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0x8f54; BYTE $0x60 // vmovdqu    yword [r15 + 4*rcx + 96], ymm2
	LONG $0x20c18348                           // add    rcx, 32
	LONG $0xffc08348                           // add    rax, -1
	JNE  LBB0_134
	JMP  LBB0_147

LBB0_108:
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0             // mov    r8d, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x5cc38348                     // add    rbx, 92
	QUAD $0x000c20855a7de2c4; BYTE $0x00 // vbroadcasti128    ymm0, oword 3104[rbp] /* [rip + .LCPI0_46] */
	QUAD $0x000c808d587de2c4; BYTE $0x00 // vpbroadcastd    ymm1, dword 3200[rbp] /* [rip + .LCPI0_47] */

LBB0_110:
	LONG $0xb84b8b44               // mov    r9d, dword [rbx - 72]
	WORD $0x538b; BYTE $0xb4       // mov    edx, dword [rbx - 76]
	WORD $0x8944; BYTE $0xce       // mov    esi, r9d
	WORD $0x7b8b; BYTE $0xb0       // mov    edi, dword [rbx - 80]
	LONG $0xac538b44               // mov    r10d, dword [rbx - 84]
	LONG $0x10d6a40f               // shld    esi, edx, 16
	LONG $0xa45b8b44               // mov    r11d, dword [rbx - 92]
	WORD $0x438b; BYTE $0xa8       // mov    eax, dword [rbx - 88]
	LONG $0x08faa40f               // shld    edx, edi, 8
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	LONG $0x10c1a40f               // shld    ecx, eax, 16
	LONG $0xd8a40f44; BYTE $0x08   // shld    eax, r11d, 8
	LONG $0xd76ef9c5               // vmovd    xmm2, edi
	LONG $0x6e79c1c4; BYTE $0xdb   // vmovd    xmm3, r11d
	LONG $0x2269e3c4; WORD $0x01d2 // vpinsrd    xmm2, xmm2, edx, 1
	LONG $0x2261e3c4; WORD $0x01d8 // vpinsrd    xmm3, xmm3, eax, 1
	LONG $0x2269e3c4; WORD $0x02d6 // vpinsrd    xmm2, xmm2, esi, 2
	LONG $0x2261e3c4; WORD $0x02d9 // vpinsrd    xmm3, xmm3, ecx, 2
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x2261c3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, r10d, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xa057 // vmovdqu    yword [r15 - 96], ymm2
	LONG $0xd04b8b44               // mov    r9d, dword [rbx - 48]
	WORD $0x4b8b; BYTE $0xcc       // mov    ecx, dword [rbx - 52]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	WORD $0x738b; BYTE $0xc8       // mov    esi, dword [rbx - 56]
	LONG $0xc4538b44               // mov    r10d, dword [rbx - 60]
	LONG $0x10caa40f               // shld    edx, ecx, 16
	LONG $0xbc5b8b44               // mov    r11d, dword [rbx - 68]
	WORD $0x7b8b; BYTE $0xc0       // mov    edi, dword [rbx - 64]
	LONG $0x08f1a40f               // shld    ecx, esi, 8
	WORD $0x8944; BYTE $0xd0       // mov    eax, r10d
	LONG $0x10f8a40f               // shld    eax, edi, 16
	LONG $0xdfa40f44; BYTE $0x08   // shld    edi, r11d, 8
	LONG $0xd66ef9c5               // vmovd    xmm2, esi
	LONG $0x6e79c1c4; BYTE $0xdb   // vmovd    xmm3, r11d
	LONG $0x2269e3c4; WORD $0x01d1 // vpinsrd    xmm2, xmm2, ecx, 1
	LONG $0x2261e3c4; WORD $0x01df // vpinsrd    xmm3, xmm3, edi, 1
	LONG $0x2269e3c4; WORD $0x02d2 // vpinsrd    xmm2, xmm2, edx, 2
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x2261c3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, r10d, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xc057 // vmovdqu    yword [r15 - 64], ymm2
	LONG $0xe84b8b44               // mov    r9d, dword [rbx - 24]
	WORD $0x4b8b; BYTE $0xe4       // mov    ecx, dword [rbx - 28]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	WORD $0x738b; BYTE $0xe0       // mov    esi, dword [rbx - 32]
	LONG $0xdc538b44               // mov    r10d, dword [rbx - 36]
	LONG $0x10caa40f               // shld    edx, ecx, 16
	LONG $0xd45b8b44               // mov    r11d, dword [rbx - 44]
	WORD $0x7b8b; BYTE $0xd8       // mov    edi, dword [rbx - 40]
	LONG $0x08f1a40f               // shld    ecx, esi, 8
	WORD $0x8944; BYTE $0xd0       // mov    eax, r10d
	LONG $0x10f8a40f               // shld    eax, edi, 16
	LONG $0xdfa40f44; BYTE $0x08   // shld    edi, r11d, 8
	LONG $0xd66ef9c5               // vmovd    xmm2, esi
	LONG $0x6e79c1c4; BYTE $0xdb   // vmovd    xmm3, r11d
	LONG $0x2269e3c4; WORD $0x01d1 // vpinsrd    xmm2, xmm2, ecx, 1
	LONG $0x2261e3c4; WORD $0x01df // vpinsrd    xmm3, xmm3, edi, 1
	LONG $0x2269e3c4; WORD $0x02d2 // vpinsrd    xmm2, xmm2, edx, 2
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x2261c3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, r10d, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xe057 // vmovdqu    yword [r15 - 32], ymm2
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	WORD $0x738b; BYTE $0xf8       // mov    esi, dword [rbx - 8]
	LONG $0xf4538b44               // mov    r10d, dword [rbx - 12]
	LONG $0x10caa40f               // shld    edx, ecx, 16
	LONG $0xec5b8b44               // mov    r11d, dword [rbx - 20]
	WORD $0x7b8b; BYTE $0xf0       // mov    edi, dword [rbx - 16]
	LONG $0x08f1a40f               // shld    ecx, esi, 8
	WORD $0x8944; BYTE $0xd0       // mov    eax, r10d
	LONG $0x10f8a40f               // shld    eax, edi, 16
	LONG $0xdfa40f44; BYTE $0x08   // shld    edi, r11d, 8
	LONG $0xd66ef9c5               // vmovd    xmm2, esi
	LONG $0x2269e3c4; WORD $0x01d1 // vpinsrd    xmm2, xmm2, ecx, 1
	LONG $0x6e79c1c4; BYTE $0xdb   // vmovd    xmm3, r11d
	LONG $0x2269e3c4; WORD $0x02d2 // vpinsrd    xmm2, xmm2, edx, 2
	LONG $0x2261e3c4; WORD $0x01df // vpinsrd    xmm3, xmm3, edi, 1
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x2261c3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, r10d, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; BYTE $0x17   // vmovdqu    yword [r15], ymm2
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x60c38348               // add    rbx, 96
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_110
	JMP  LBB0_147

LBB0_138:
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8944; BYTE $0xf0             // mov    eax, r14d
	WORD $0xc931                         // xor    ecx, ecx
	QUAD $0x000009e0856ffdc5             // vmovdqa    ymm0, yword 2528[rbp] /* [rip + .LCPI0_124] */
	QUAD $0x0000d88d597de2c4; BYTE $0x00 // vpbroadcastq    ymm1, qword 216[rbp] /* [rip + .LCPI0_125] */

LBB0_140:
	LONG $0x587de2c4; WORD $0x0b14             // vpbroadcastd    ymm2, dword [rbx + rcx]
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5                           // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xcf14             // vmovdqu    yword [r15 + 8*rcx], ymm2
	LONG $0x587de2c4; WORD $0x0b54; BYTE $0x04 // vpbroadcastd    ymm2, dword [rbx + rcx + 4]
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5                           // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xcf54; BYTE $0x20 // vmovdqu    yword [r15 + 8*rcx + 32], ymm2
	LONG $0x587de2c4; WORD $0x0b54; BYTE $0x08 // vpbroadcastd    ymm2, dword [rbx + rcx + 8]
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5                           // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xcf54; BYTE $0x40 // vmovdqu    yword [r15 + 8*rcx + 64], ymm2
	LONG $0x587de2c4; WORD $0x0b54; BYTE $0x0c // vpbroadcastd    ymm2, dword [rbx + rcx + 12]
	LONG $0x456de2c4; BYTE $0xd0               // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5                           // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xcf54; BYTE $0x60 // vmovdqu    yword [r15 + 8*rcx + 96], ymm2
	LONG $0x10c18348                           // add    rcx, 16
	LONG $0xffc08348                           // add    rax, -1
	JNE  LBB0_140
	JMP  LBB0_147

LBB0_114:
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x4cc38348               // add    rbx, 76
	QUAD $0x000004a0856ffdc5       // vmovdqa    ymm0, yword 1184[rbp] /* [rip + .LCPI0_65] */
	LONG $0x597de2c4; WORD $0x604d // vpbroadcastq    ymm1, qword 96[rbp] /* [rip + .LCPI0_66] */

LBB0_116:
	LONG $0xc44b8b44               // mov    r9d, dword [rbx - 60]
	LONG $0xc05b8b44               // mov    r11d, dword [rbx - 64]
	WORD $0x8944; BYTE $0xce       // mov    esi, r9d
	LONG $0xdea40f44; BYTE $0x08   // shld    esi, r11d, 8
	WORD $0x7b8b; BYTE $0xbc       // mov    edi, dword [rbx - 68]
	WORD $0x8944; BYTE $0xda       // mov    edx, r11d
	LONG $0x10faa40f               // shld    edx, edi, 16
	WORD $0x438b; BYTE $0xb8       // mov    eax, dword [rbx - 72]
	LONG $0x04c7a40f               // shld    edi, eax, 4
	LONG $0xb4538b44               // mov    r10d, dword [rbx - 76]
	WORD $0xc189                   // mov    ecx, eax
	LONG $0xd1a40f44; BYTE $0x0c   // shld    ecx, r10d, 12
	LONG $0xd26ef9c5               // vmovd    xmm2, edx
	LONG $0x2269c3c4; WORD $0x01d3 // vpinsrd    xmm2, xmm2, r11d, 1
	LONG $0x2269e3c4; WORD $0x02d6 // vpinsrd    xmm2, xmm2, esi, 2
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x6e79c1c4; BYTE $0xda   // vmovd    xmm3, r10d
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x2261e3c4; WORD $0x03df // vpinsrd    xmm3, xmm3, edi, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xa057 // vmovdqu    yword [r15 - 96], ymm2
	LONG $0xd84b8b44               // mov    r9d, dword [rbx - 40]
	LONG $0xd45b8b44               // mov    r11d, dword [rbx - 44]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0xdaa40f44; BYTE $0x08   // shld    edx, r11d, 8
	WORD $0x738b; BYTE $0xd0       // mov    esi, dword [rbx - 48]
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0x10f7a40f               // shld    edi, esi, 16
	LONG $0xc8538b44               // mov    r10d, dword [rbx - 56]
	WORD $0x4b8b; BYTE $0xcc       // mov    ecx, dword [rbx - 52]
	LONG $0x04cea40f               // shld    esi, ecx, 4
	WORD $0xc889                   // mov    eax, ecx
	LONG $0xd0a40f44; BYTE $0x0c   // shld    eax, r10d, 12
	LONG $0xd76ef9c5               // vmovd    xmm2, edi
	LONG $0x2269c3c4; WORD $0x01d3 // vpinsrd    xmm2, xmm2, r11d, 1
	LONG $0x2269e3c4; WORD $0x02d2 // vpinsrd    xmm2, xmm2, edx, 2
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x6e79c1c4; BYTE $0xda   // vmovd    xmm3, r10d
	LONG $0x2261e3c4; WORD $0x01d8 // vpinsrd    xmm3, xmm3, eax, 1
	LONG $0x2261e3c4; WORD $0x02d9 // vpinsrd    xmm3, xmm3, ecx, 2
	LONG $0x2261e3c4; WORD $0x03de // vpinsrd    xmm3, xmm3, esi, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xc057 // vmovdqu    yword [r15 - 64], ymm2
	LONG $0xec4b8b44               // mov    r9d, dword [rbx - 20]
	LONG $0xe85b8b44               // mov    r11d, dword [rbx - 24]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0xdaa40f44; BYTE $0x08   // shld    edx, r11d, 8
	WORD $0x738b; BYTE $0xe4       // mov    esi, dword [rbx - 28]
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0x10f7a40f               // shld    edi, esi, 16
	WORD $0x4b8b; BYTE $0xe0       // mov    ecx, dword [rbx - 32]
	LONG $0x04cea40f               // shld    esi, ecx, 4
	LONG $0xdc538b44               // mov    r10d, dword [rbx - 36]
	WORD $0xc889                   // mov    eax, ecx
	LONG $0xd0a40f44; BYTE $0x0c   // shld    eax, r10d, 12
	LONG $0xd76ef9c5               // vmovd    xmm2, edi
	LONG $0x2269c3c4; WORD $0x01d3 // vpinsrd    xmm2, xmm2, r11d, 1
	LONG $0x2269e3c4; WORD $0x02d2 // vpinsrd    xmm2, xmm2, edx, 2
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x6e79c1c4; BYTE $0xda   // vmovd    xmm3, r10d
	LONG $0x2261e3c4; WORD $0x01d8 // vpinsrd    xmm3, xmm3, eax, 1
	LONG $0x2261e3c4; WORD $0x02d9 // vpinsrd    xmm3, xmm3, ecx, 2
	LONG $0x2261e3c4; WORD $0x03de // vpinsrd    xmm3, xmm3, esi, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xe057 // vmovdqu    yword [r15 - 32], ymm2
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	LONG $0xfc5b8b44               // mov    r11d, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0xdaa40f44; BYTE $0x08   // shld    edx, r11d, 8
	WORD $0x738b; BYTE $0xf8       // mov    esi, dword [rbx - 8]
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0x10f7a40f               // shld    edi, esi, 16
	LONG $0xf0538b44               // mov    r10d, dword [rbx - 16]
	WORD $0x4b8b; BYTE $0xf4       // mov    ecx, dword [rbx - 12]
	LONG $0x04cea40f               // shld    esi, ecx, 4
	WORD $0xc889                   // mov    eax, ecx
	LONG $0xd0a40f44; BYTE $0x0c   // shld    eax, r10d, 12
	LONG $0xd76ef9c5               // vmovd    xmm2, edi
	LONG $0x2269c3c4; WORD $0x01d3 // vpinsrd    xmm2, xmm2, r11d, 1
	LONG $0x2269e3c4; WORD $0x02d2 // vpinsrd    xmm2, xmm2, edx, 2
	LONG $0x2269c3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, r9d, 3
	LONG $0x6e79c1c4; BYTE $0xda   // vmovd    xmm3, r10d
	LONG $0x2261e3c4; WORD $0x01d8 // vpinsrd    xmm3, xmm3, eax, 1
	LONG $0x2261e3c4; WORD $0x02d9 // vpinsrd    xmm3, xmm3, ecx, 2
	LONG $0x2261e3c4; WORD $0x03de // vpinsrd    xmm3, xmm3, esi, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; BYTE $0x17   // vmovdqu    yword [r15], ymm2
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x50c38348               // add    rbx, 80
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_116
	JMP  LBB0_147

LBB0_126:
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0             // mov    r8d, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x2cc38348                     // add    rbx, 44
	QUAD $0x00000740856ffdc5             // vmovdqa    ymm0, yword 1856[rbp] /* [rip + .LCPI0_94] */
	QUAD $0x0000a08d597de2c4; BYTE $0x00 // vpbroadcastq    ymm1, qword 160[rbp] /* [rip + .LCPI0_95] */

LBB0_128:
	WORD $0x4b8b; BYTE $0xdc       // mov    ecx, dword [rbx - 36]
	WORD $0x538b; BYTE $0xd4       // mov    edx, dword [rbx - 44]
	WORD $0x738b; BYTE $0xd8       // mov    esi, dword [rbx - 40]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0x04f7a40f               // shld    edi, esi, 4
	WORD $0xf089                   // mov    eax, esi
	LONG $0x08d0a40f               // shld    eax, edx, 8
	LONG $0xd66ef9c5               // vmovd    xmm2, esi
	LONG $0x2269e3c4; WORD $0x01d7 // vpinsrd    xmm2, xmm2, edi, 1
	LONG $0x2269e3c4; WORD $0x02d1 // vpinsrd    xmm2, xmm2, ecx, 2
	LONG $0x2269e3c4; WORD $0x03d1 // vpinsrd    xmm2, xmm2, ecx, 3
	LONG $0xda6ef9c5               // vmovd    xmm3, edx
	LONG $0x2261e3c4; WORD $0x01da // vpinsrd    xmm3, xmm3, edx, 1
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x2261e3c4; WORD $0x03de // vpinsrd    xmm3, xmm3, esi, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xa057 // vmovdqu    yword [r15 - 96], ymm2
	WORD $0x438b; BYTE $0xe8       // mov    eax, dword [rbx - 24]
	WORD $0x4b8b; BYTE $0xe0       // mov    ecx, dword [rbx - 32]
	WORD $0x538b; BYTE $0xe4       // mov    edx, dword [rbx - 28]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x04d6a40f               // shld    esi, edx, 4
	WORD $0xd789                   // mov    edi, edx
	LONG $0x08cfa40f               // shld    edi, ecx, 8
	LONG $0xd26ef9c5               // vmovd    xmm2, edx
	LONG $0x2269e3c4; WORD $0x01d6 // vpinsrd    xmm2, xmm2, esi, 1
	LONG $0x2269e3c4; WORD $0x02d0 // vpinsrd    xmm2, xmm2, eax, 2
	LONG $0x2269e3c4; WORD $0x03d0 // vpinsrd    xmm2, xmm2, eax, 3
	LONG $0xd96ef9c5               // vmovd    xmm3, ecx
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2261e3c4; WORD $0x02df // vpinsrd    xmm3, xmm3, edi, 2
	LONG $0x2261e3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, edx, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xc057 // vmovdqu    yword [r15 - 64], ymm2
	WORD $0x438b; BYTE $0xf4       // mov    eax, dword [rbx - 12]
	WORD $0x4b8b; BYTE $0xec       // mov    ecx, dword [rbx - 20]
	WORD $0x538b; BYTE $0xf0       // mov    edx, dword [rbx - 16]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x04d6a40f               // shld    esi, edx, 4
	WORD $0xd789                   // mov    edi, edx
	LONG $0x08cfa40f               // shld    edi, ecx, 8
	LONG $0xd26ef9c5               // vmovd    xmm2, edx
	LONG $0x2269e3c4; WORD $0x01d6 // vpinsrd    xmm2, xmm2, esi, 1
	LONG $0x2269e3c4; WORD $0x02d0 // vpinsrd    xmm2, xmm2, eax, 2
	LONG $0x2269e3c4; WORD $0x03d0 // vpinsrd    xmm2, xmm2, eax, 3
	LONG $0xd96ef9c5               // vmovd    xmm3, ecx
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2261e3c4; WORD $0x02df // vpinsrd    xmm3, xmm3, edi, 2
	LONG $0x2261e3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, edx, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xe057 // vmovdqu    yword [r15 - 32], ymm2
	WORD $0x038b                   // mov    eax, dword [rbx]
	WORD $0x4b8b; BYTE $0xf8       // mov    ecx, dword [rbx - 8]
	WORD $0x538b; BYTE $0xfc       // mov    edx, dword [rbx - 4]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x04d6a40f               // shld    esi, edx, 4
	WORD $0xd789                   // mov    edi, edx
	LONG $0x08cfa40f               // shld    edi, ecx, 8
	LONG $0xd26ef9c5               // vmovd    xmm2, edx
	LONG $0x2269e3c4; WORD $0x01d6 // vpinsrd    xmm2, xmm2, esi, 1
	LONG $0x2269e3c4; WORD $0x02d0 // vpinsrd    xmm2, xmm2, eax, 2
	LONG $0x2269e3c4; WORD $0x03d0 // vpinsrd    xmm2, xmm2, eax, 3
	LONG $0xd96ef9c5               // vmovd    xmm3, ecx
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2261e3c4; WORD $0x02df // vpinsrd    xmm3, xmm3, edi, 2
	LONG $0x2261e3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, edx, 3
	LONG $0x3865e3c4; WORD $0x01d2 // vinserti128    ymm2, ymm3, xmm2, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; BYTE $0x17   // vmovdqu    yword [r15], ymm2
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x30c38348               // add    rbx, 48
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_128
	JMP  LBB0_147

LBB0_102:
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x6cc38348               // add    rbx, 108
	QUAD $0x00000220856ffdc5       // vmovdqa    ymm0, yword 544[rbp] /* [rip + .LCPI0_22] */
	LONG $0x597de2c4; WORD $0x184d // vpbroadcastq    ymm1, qword 24[rbp] /* [rip + .LCPI0_23] */

LBB0_104:
	LONG $0xac4b8b44               // mov    r9d, dword [rbx - 84]
	WORD $0x538b; BYTE $0xa8       // mov    edx, dword [rbx - 88]
	WORD $0x8945; BYTE $0xca       // mov    r10d, r9d
	LONG $0xd2a40f41; BYTE $0x18   // shld    r10d, edx, 24
	WORD $0x7b8b; BYTE $0xa4       // mov    edi, dword [rbx - 92]
	LONG $0x14faa40f               // shld    edx, edi, 20
	WORD $0x438b; BYTE $0xa0       // mov    eax, dword [rbx - 96]
	LONG $0x10c7a40f               // shld    edi, eax, 16
	WORD $0x4b8b; BYTE $0x9c       // mov    ecx, dword [rbx - 100]
	LONG $0x0cc8a40f               // shld    eax, ecx, 12
	LONG $0x945b8b44               // mov    r11d, dword [rbx - 108]
	WORD $0x738b; BYTE $0x98       // mov    esi, dword [rbx - 104]
	LONG $0x08f1a40f               // shld    ecx, esi, 8
	LONG $0xdea40f44; BYTE $0x04   // shld    esi, r11d, 4
	LONG $0x6e79c1c4; BYTE $0xd3   // vmovd    xmm2, r11d
	LONG $0xdf6ef9c5               // vmovd    xmm3, edi
	LONG $0x2269e3c4; WORD $0x01d6 // vpinsrd    xmm2, xmm2, esi, 1
	LONG $0x2261e3c4; WORD $0x01da // vpinsrd    xmm3, xmm3, edx, 1
	LONG $0x2269e3c4; WORD $0x02d1 // vpinsrd    xmm2, xmm2, ecx, 2
	LONG $0x2261c3c4; WORD $0x02da // vpinsrd    xmm3, xmm3, r10d, 2
	LONG $0x2269e3c4; WORD $0x03d0 // vpinsrd    xmm2, xmm2, eax, 3
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0x386de3c4; WORD $0x01d3 // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xa057 // vmovdqu    yword [r15 - 96], ymm2
	LONG $0xc84b8b44               // mov    r9d, dword [rbx - 56]
	WORD $0x4b8b; BYTE $0xc4       // mov    ecx, dword [rbx - 60]
	WORD $0x8945; BYTE $0xca       // mov    r10d, r9d
	LONG $0xcaa40f41; BYTE $0x18   // shld    r10d, ecx, 24
	WORD $0x738b; BYTE $0xc0       // mov    esi, dword [rbx - 64]
	LONG $0x14f1a40f               // shld    ecx, esi, 20
	WORD $0x7b8b; BYTE $0xbc       // mov    edi, dword [rbx - 68]
	LONG $0x10fea40f               // shld    esi, edi, 16
	WORD $0x438b; BYTE $0xb8       // mov    eax, dword [rbx - 72]
	LONG $0x0cc7a40f               // shld    edi, eax, 12
	LONG $0xb05b8b44               // mov    r11d, dword [rbx - 80]
	WORD $0x538b; BYTE $0xb4       // mov    edx, dword [rbx - 76]
	LONG $0x08d0a40f               // shld    eax, edx, 8
	LONG $0xdaa40f44; BYTE $0x04   // shld    edx, r11d, 4
	LONG $0x6e79c1c4; BYTE $0xd3   // vmovd    xmm2, r11d
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x2269e3c4; WORD $0x01d2 // vpinsrd    xmm2, xmm2, edx, 1
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2269e3c4; WORD $0x02d0 // vpinsrd    xmm2, xmm2, eax, 2
	LONG $0x2261c3c4; WORD $0x02da // vpinsrd    xmm3, xmm3, r10d, 2
	LONG $0x2269e3c4; WORD $0x03d7 // vpinsrd    xmm2, xmm2, edi, 3
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0x386de3c4; WORD $0x01d3 // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xc057 // vmovdqu    yword [r15 - 64], ymm2
	LONG $0xe44b8b44               // mov    r9d, dword [rbx - 28]
	WORD $0x4b8b; BYTE $0xe0       // mov    ecx, dword [rbx - 32]
	WORD $0x8945; BYTE $0xca       // mov    r10d, r9d
	LONG $0xcaa40f41; BYTE $0x18   // shld    r10d, ecx, 24
	WORD $0x738b; BYTE $0xdc       // mov    esi, dword [rbx - 36]
	LONG $0x14f1a40f               // shld    ecx, esi, 20
	WORD $0x7b8b; BYTE $0xd8       // mov    edi, dword [rbx - 40]
	LONG $0x10fea40f               // shld    esi, edi, 16
	WORD $0x438b; BYTE $0xd4       // mov    eax, dword [rbx - 44]
	LONG $0x0cc7a40f               // shld    edi, eax, 12
	LONG $0xcc5b8b44               // mov    r11d, dword [rbx - 52]
	WORD $0x538b; BYTE $0xd0       // mov    edx, dword [rbx - 48]
	LONG $0x08d0a40f               // shld    eax, edx, 8
	LONG $0xdaa40f44; BYTE $0x04   // shld    edx, r11d, 4
	LONG $0x6e79c1c4; BYTE $0xd3   // vmovd    xmm2, r11d
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x2269e3c4; WORD $0x01d2 // vpinsrd    xmm2, xmm2, edx, 1
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2269e3c4; WORD $0x02d0 // vpinsrd    xmm2, xmm2, eax, 2
	LONG $0x2261c3c4; WORD $0x02da // vpinsrd    xmm3, xmm3, r10d, 2
	LONG $0x2269e3c4; WORD $0x03d7 // vpinsrd    xmm2, xmm2, edi, 3
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0x386de3c4; WORD $0x01d3 // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; WORD $0xe057 // vmovdqu    yword [r15 - 32], ymm2
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0x8945; BYTE $0xca       // mov    r10d, r9d
	LONG $0xcaa40f41; BYTE $0x18   // shld    r10d, ecx, 24
	WORD $0x738b; BYTE $0xf8       // mov    esi, dword [rbx - 8]
	LONG $0x14f1a40f               // shld    ecx, esi, 20
	WORD $0x7b8b; BYTE $0xf4       // mov    edi, dword [rbx - 12]
	LONG $0x10fea40f               // shld    esi, edi, 16
	WORD $0x438b; BYTE $0xf0       // mov    eax, dword [rbx - 16]
	LONG $0x0cc7a40f               // shld    edi, eax, 12
	LONG $0xe85b8b44               // mov    r11d, dword [rbx - 24]
	WORD $0x538b; BYTE $0xec       // mov    edx, dword [rbx - 20]
	LONG $0x08d0a40f               // shld    eax, edx, 8
	LONG $0xdaa40f44; BYTE $0x04   // shld    edx, r11d, 4
	LONG $0x6e79c1c4; BYTE $0xd3   // vmovd    xmm2, r11d
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x2269e3c4; WORD $0x01d2 // vpinsrd    xmm2, xmm2, edx, 1
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2269e3c4; WORD $0x02d0 // vpinsrd    xmm2, xmm2, eax, 2
	LONG $0x2261c3c4; WORD $0x02da // vpinsrd    xmm3, xmm3, r10d, 2
	LONG $0x2269e3c4; WORD $0x03d7 // vpinsrd    xmm2, xmm2, edi, 3
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0x386de3c4; WORD $0x01d3 // vinserti128    ymm2, ymm2, xmm3, 1
	LONG $0x456de2c4; BYTE $0xd0   // vpsrlvd    ymm2, ymm2, ymm0
	LONG $0xd1dbedc5               // vpand    ymm2, ymm2, ymm1
	LONG $0x7f7ec1c4; BYTE $0x17   // vmovdqu    yword [r15], ymm2
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x70c38348               // add    rbx, 112
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_104
	JMP  LBB0_147

LBB0_141:
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8944; BYTE $0xf0             // mov    eax, r14d
	LONG $0x60c78349                     // add    r15, 96
	WORD $0xc931                         // xor    ecx, ecx
	QUAD $0x00000a80856ffdc5             // vmovdqa    ymm0, yword 2688[rbp] /* [rip + .LCPI0_131] */
	QUAD $0x0000e88d597de2c4; BYTE $0x00 // vpbroadcastq    ymm1, qword 232[rbp] /* [rip + .LCPI0_132] */
	QUAD $0x00000aa0956ffdc5             // vmovdqa    ymm2, yword 2720[rbp] /* [rip + .LCPI0_133] */

LBB0_143:
	LONG $0x587de2c4; WORD $0xcb1c             // vpbroadcastd    ymm3, dword [rbx + 8*rcx]
	LONG $0x4565e2c4; BYTE $0xd8               // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5                           // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xa05f             // vmovdqu    yword [r15 - 96], ymm3
	LONG $0x587de2c4; WORD $0xcb1c             // vpbroadcastd    ymm3, dword [rbx + 8*rcx]
	LONG $0x4565e2c4; BYTE $0xda               // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5                           // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xc05f             // vmovdqu    yword [r15 - 64], ymm3
	LONG $0x587de2c4; WORD $0xcb5c; BYTE $0x04 // vpbroadcastd    ymm3, dword [rbx + 8*rcx + 4]
	LONG $0x4565e2c4; BYTE $0xd8               // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5                           // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xe05f             // vmovdqu    yword [r15 - 32], ymm3
	LONG $0x587de2c4; WORD $0xcb5c; BYTE $0x04 // vpbroadcastd    ymm3, dword [rbx + 8*rcx + 4]
	LONG $0x4565e2c4; BYTE $0xda               // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5                           // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; BYTE $0x1f               // vmovdqu    yword [r15], ymm3
	LONG $0x01c18348                           // add    rcx, 1
	LONG $0x80ef8349                           // sub    r15, -128
	WORD $0x3948; BYTE $0xc8                   // cmp    rax, rcx
	JNE  LBB0_143
	JMP  LBB0_147

LBB0_117:
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x44c38348               // add    rbx, 68
	QUAD $0x00000540856ffdc5       // vmovdqa    ymm0, yword 1344[rbp] /* [rip + .LCPI0_72] */
	LONG $0x597de2c4; WORD $0x704d // vpbroadcastq    ymm1, qword 112[rbp] /* [rip + .LCPI0_73] */
	QUAD $0x00000560956ffdc5       // vmovdqa    ymm2, yword 1376[rbp] /* [rip + .LCPI0_74] */

LBB0_119:
	WORD $0x4b8b; BYTE $0xc8       // mov    ecx, dword [rbx - 56]
	LONG $0xcc538b44               // mov    r10d, dword [rbx - 52]
	LONG $0xcaa40f41; BYTE $0x02   // shld    r10d, ecx, 2
	WORD $0x738b; BYTE $0xc4       // mov    esi, dword [rbx - 60]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0x06f7a40f               // shld    edi, esi, 6
	LONG $0xbc4b8b44               // mov    r9d, dword [rbx - 68]
	WORD $0x538b; BYTE $0xc0       // mov    edx, dword [rbx - 64]
	WORD $0xd089                   // mov    eax, edx
	LONG $0xc8a40f44; BYTE $0x0e   // shld    eax, r9d, 14
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x0ad6a40f               // shld    esi, edx, 10
	LONG $0x2261e3c4; WORD $0x01df // vpinsrd    xmm3, xmm3, edi, 1
	LONG $0x2261e3c4; WORD $0x02d9 // vpinsrd    xmm3, xmm3, ecx, 2
	LONG $0x2261c3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, r10d, 3
	LONG $0x6e79c1c4; BYTE $0xe1   // vmovd    xmm4, r9d
	LONG $0x2259e3c4; WORD $0x01e0 // vpinsrd    xmm4, xmm4, eax, 1
	LONG $0x2259e3c4; WORD $0x02e2 // vpinsrd    xmm4, xmm4, edx, 2
	LONG $0x2259e3c4; WORD $0x03e6 // vpinsrd    xmm4, xmm4, esi, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xd8   // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xa05f // vmovdqu    yword [r15 - 96], ymm3
	LONG $0xdc4b8b44               // mov    r9d, dword [rbx - 36]
	LONG $0xd85b8b44               // mov    r11d, dword [rbx - 40]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0xdaa40f44; BYTE $0x04   // shld    edx, r11d, 4
	LONG $0xd4538b44               // mov    r10d, dword [rbx - 44]
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0xd7a40f44; BYTE $0x08   // shld    edi, r10d, 8
	WORD $0x438b; BYTE $0xcc       // mov    eax, dword [rbx - 52]
	WORD $0x738b; BYTE $0xd0       // mov    esi, dword [rbx - 48]
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	LONG $0x0cf1a40f               // shld    ecx, esi, 12
	LONG $0x10f0ac0f               // shrd    eax, esi, 16
	LONG $0xdf6ef9c5               // vmovd    xmm3, edi
	LONG $0x2261c3c4; WORD $0x01db // vpinsrd    xmm3, xmm3, r11d, 1
	LONG $0x2261e3c4; WORD $0x02da // vpinsrd    xmm3, xmm3, edx, 2
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0xe06ef9c5               // vmovd    xmm4, eax
	LONG $0x2259e3c4; WORD $0x01e6 // vpinsrd    xmm4, xmm4, esi, 1
	LONG $0x2259e3c4; WORD $0x02e1 // vpinsrd    xmm4, xmm4, ecx, 2
	LONG $0x2259c3c4; WORD $0x03e2 // vpinsrd    xmm4, xmm4, r10d, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xda   // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xc05f // vmovdqu    yword [r15 - 64], ymm3
	WORD $0x438b; BYTE $0xec       // mov    eax, dword [rbx - 20]
	LONG $0xf0538b44               // mov    r10d, dword [rbx - 16]
	LONG $0xc2a40f41; BYTE $0x02   // shld    r10d, eax, 2
	WORD $0x538b; BYTE $0xe8       // mov    edx, dword [rbx - 24]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x06d6a40f               // shld    esi, edx, 6
	LONG $0xe04b8b44               // mov    r9d, dword [rbx - 32]
	WORD $0x4b8b; BYTE $0xe4       // mov    ecx, dword [rbx - 28]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0xcfa40f44; BYTE $0x0e   // shld    edi, r9d, 14
	LONG $0xda6ef9c5               // vmovd    xmm3, edx
	LONG $0x0acaa40f               // shld    edx, ecx, 10
	LONG $0x2261e3c4; WORD $0x01de // vpinsrd    xmm3, xmm3, esi, 1
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x2261c3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, r10d, 3
	LONG $0x6e79c1c4; BYTE $0xe1   // vmovd    xmm4, r9d
	LONG $0x2259e3c4; WORD $0x01e7 // vpinsrd    xmm4, xmm4, edi, 1
	LONG $0x2259e3c4; WORD $0x02e1 // vpinsrd    xmm4, xmm4, ecx, 2
	LONG $0x2259e3c4; WORD $0x03e2 // vpinsrd    xmm4, xmm4, edx, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xd8   // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xe05f // vmovdqu    yword [r15 - 32], ymm3
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	LONG $0xfc5b8b44               // mov    r11d, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0xdaa40f44; BYTE $0x04   // shld    edx, r11d, 4
	LONG $0xf8538b44               // mov    r10d, dword [rbx - 8]
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0xd7a40f44; BYTE $0x08   // shld    edi, r10d, 8
	WORD $0x438b; BYTE $0xf0       // mov    eax, dword [rbx - 16]
	WORD $0x738b; BYTE $0xf4       // mov    esi, dword [rbx - 12]
	WORD $0x8944; BYTE $0xd1       // mov    ecx, r10d
	LONG $0x0cf1a40f               // shld    ecx, esi, 12
	LONG $0x10f0ac0f               // shrd    eax, esi, 16
	LONG $0xdf6ef9c5               // vmovd    xmm3, edi
	LONG $0x2261c3c4; WORD $0x01db // vpinsrd    xmm3, xmm3, r11d, 1
	LONG $0x2261e3c4; WORD $0x02da // vpinsrd    xmm3, xmm3, edx, 2
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0xe06ef9c5               // vmovd    xmm4, eax
	LONG $0x2259e3c4; WORD $0x01e6 // vpinsrd    xmm4, xmm4, esi, 1
	LONG $0x2259e3c4; WORD $0x02e1 // vpinsrd    xmm4, xmm4, ecx, 2
	LONG $0x2259c3c4; WORD $0x03e2 // vpinsrd    xmm4, xmm4, r10d, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xda   // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; BYTE $0x1f   // vmovdqu    yword [r15], ymm3
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x48c38348               // add    rbx, 72
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_119
	JMP  LBB0_147

LBB0_129:
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0             // mov    r8d, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x24c38348                     // add    rbx, 36
	QUAD $0x000007e0856ffdc5             // vmovdqa    ymm0, yword 2016[rbp] /* [rip + .LCPI0_101] */
	QUAD $0x0000b08d597de2c4; BYTE $0x00 // vpbroadcastq    ymm1, qword 176[rbp] /* [rip + .LCPI0_102] */
	QUAD $0x00000800956ffdc5             // vmovdqa    ymm2, yword 2048[rbp] /* [rip + .LCPI0_103] */

LBB0_131:
	WORD $0x4b8b; BYTE $0xe4       // mov    ecx, dword [rbx - 28]
	WORD $0x538b; BYTE $0xdc       // mov    edx, dword [rbx - 36]
	WORD $0x738b; BYTE $0xe0       // mov    esi, dword [rbx - 32]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0x04f7a40f               // shld    edi, esi, 4
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x2261e3c4; WORD $0x01de // vpinsrd    xmm3, xmm3, esi, 1
	LONG $0x02d6a40f               // shld    esi, edx, 2
	LONG $0x2261e3c4; WORD $0x02df // vpinsrd    xmm3, xmm3, edi, 2
	LONG $0x2261e3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, ecx, 3
	LONG $0xe26ef9c5               // vmovd    xmm4, edx
	LONG $0x2259e3c4; WORD $0x01e2 // vpinsrd    xmm4, xmm4, edx, 1
	LONG $0x2259e3c4; WORD $0x02e2 // vpinsrd    xmm4, xmm4, edx, 2
	LONG $0x2259e3c4; WORD $0x03e6 // vpinsrd    xmm4, xmm4, esi, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xd8   // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xa05f // vmovdqu    yword [r15 - 96], ymm3
	WORD $0x4b8b; BYTE $0xec       // mov    ecx, dword [rbx - 20]
	WORD $0x538b; BYTE $0xe8       // mov    edx, dword [rbx - 24]
	WORD $0xce89                   // mov    esi, ecx
	LONG $0x08d6a40f               // shld    esi, edx, 8
	WORD $0x7b8b; BYTE $0xe4       // mov    edi, dword [rbx - 28]
	WORD $0xd089                   // mov    eax, edx
	LONG $0x06f8a40f               // shld    eax, edi, 6
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2261e3c4; WORD $0x02d9 // vpinsrd    xmm3, xmm3, ecx, 2
	LONG $0x2261e3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, ecx, 3
	LONG $0xe76ef9c5               // vmovd    xmm4, edi
	LONG $0x2259e3c4; WORD $0x01e0 // vpinsrd    xmm4, xmm4, eax, 1
	LONG $0x2259e3c4; WORD $0x02e2 // vpinsrd    xmm4, xmm4, edx, 2
	LONG $0x2259e3c4; WORD $0x03e2 // vpinsrd    xmm4, xmm4, edx, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xda   // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xc05f // vmovdqu    yword [r15 - 64], ymm3
	WORD $0x438b; BYTE $0xf8       // mov    eax, dword [rbx - 8]
	WORD $0x4b8b; BYTE $0xf0       // mov    ecx, dword [rbx - 16]
	WORD $0x538b; BYTE $0xf4       // mov    edx, dword [rbx - 12]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x04d6a40f               // shld    esi, edx, 4
	LONG $0xda6ef9c5               // vmovd    xmm3, edx
	LONG $0x2261e3c4; WORD $0x01da // vpinsrd    xmm3, xmm3, edx, 1
	LONG $0x02caa40f               // shld    edx, ecx, 2
	LONG $0x2261e3c4; WORD $0x02de // vpinsrd    xmm3, xmm3, esi, 2
	LONG $0x2261e3c4; WORD $0x03d8 // vpinsrd    xmm3, xmm3, eax, 3
	LONG $0xe16ef9c5               // vmovd    xmm4, ecx
	LONG $0x2259e3c4; WORD $0x01e1 // vpinsrd    xmm4, xmm4, ecx, 1
	LONG $0x2259e3c4; WORD $0x02e1 // vpinsrd    xmm4, xmm4, ecx, 2
	LONG $0x2259e3c4; WORD $0x03e2 // vpinsrd    xmm4, xmm4, edx, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xd8   // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xe05f // vmovdqu    yword [r15 - 32], ymm3
	WORD $0x038b                   // mov    eax, dword [rbx]
	WORD $0x4b8b; BYTE $0xf8       // mov    ecx, dword [rbx - 8]
	WORD $0x538b; BYTE $0xfc       // mov    edx, dword [rbx - 4]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x08d6a40f               // shld    esi, edx, 8
	WORD $0xd789                   // mov    edi, edx
	LONG $0x06cfa40f               // shld    edi, ecx, 6
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x2261e3c4; WORD $0x01d8 // vpinsrd    xmm3, xmm3, eax, 1
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x2261e3c4; WORD $0x03d8 // vpinsrd    xmm3, xmm3, eax, 3
	LONG $0xe16ef9c5               // vmovd    xmm4, ecx
	LONG $0x2259e3c4; WORD $0x01e7 // vpinsrd    xmm4, xmm4, edi, 1
	LONG $0x2259e3c4; WORD $0x02e2 // vpinsrd    xmm4, xmm4, edx, 2
	LONG $0x2259e3c4; WORD $0x03e2 // vpinsrd    xmm4, xmm4, edx, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xda   // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; BYTE $0x1f   // vmovdqu    yword [r15], ymm3
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x28c38348               // add    rbx, 40
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_131
	JMP  LBB0_147

LBB0_105:
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x64c38348               // add    rbx, 100
	LONG $0x597de2c4; WORD $0x2845 // vpbroadcastq    ymm0, qword 40[rbp] /* [rip + .LCPI0_34] */
	LONG $0x5979e2c4; WORD $0x304d // vpbroadcastq    xmm1, qword 48[rbp] /* [rip + .LCPI0_35] */
	QUAD $0x000002c0956ffdc5       // vmovdqa    ymm2, yword 704[rbp] /* [rip + .LCPI0_33] */
	LONG $0x5979e2c4; WORD $0x385d // vpbroadcastq    xmm3, qword 56[rbp] /* [rip + .LCPI0_36] */
	QUAD $0x000002e0a56ffdc5       // vmovdqa    ymm4, yword 736[rbp] /* [rip + .LCPI0_37] */

LBB0_107:
	WORD $0x4b8b; BYTE $0xb0       // mov    ecx, dword [rbx - 80]
	LONG $0xb44b8b44               // mov    r9d, dword [rbx - 76]
	LONG $0xc9a40f41; BYTE $0x0a   // shld    r9d, ecx, 10
	LONG $0xac5b8b44               // mov    r11d, dword [rbx - 84]
	LONG $0xd9a40f44; BYTE $0x04   // shld    ecx, r11d, 4
	WORD $0x7b8b; BYTE $0xa8       // mov    edi, dword [rbx - 88]
	WORD $0x8944; BYTE $0xde       // mov    esi, r11d
	LONG $0x18fea40f               // shld    esi, edi, 24
	WORD $0x538b; BYTE $0xa4       // mov    edx, dword [rbx - 92]
	LONG $0x12d7a40f               // shld    edi, edx, 18
	LONG $0x9c538b44               // mov    r10d, dword [rbx - 100]
	WORD $0x438b; BYTE $0xa0       // mov    eax, dword [rbx - 96]
	LONG $0x0cc2a40f               // shld    edx, eax, 12
	LONG $0xd0a40f44; BYTE $0x06   // shld    eax, r10d, 6
	LONG $0x6e79c1c4; BYTE $0xea   // vmovd    xmm5, r10d
	LONG $0xf66ef9c5               // vmovd    xmm6, esi
	LONG $0x2251e3c4; WORD $0x01e8 // vpinsrd    xmm5, xmm5, eax, 1
	LONG $0x2249c3c4; WORD $0x01f3 // vpinsrd    xmm6, xmm6, r11d, 1
	LONG $0x2251e3c4; WORD $0x02ea // vpinsrd    xmm5, xmm5, edx, 2
	LONG $0x2249e3c4; WORD $0x02f1 // vpinsrd    xmm6, xmm6, ecx, 2
	LONG $0x2251e3c4; WORD $0x03ef // vpinsrd    xmm5, xmm5, edi, 3
	LONG $0x2249c3c4; WORD $0x03f1 // vpinsrd    xmm6, xmm6, r9d, 3
	LONG $0x3855e3c4; WORD $0x01ee // vinserti128    ymm5, ymm5, xmm6, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xa06f // vmovdqu    yword [r15 - 96], ymm5
	LONG $0xcc4b8b44               // mov    r9d, dword [rbx - 52]
	WORD $0x4b8b; BYTE $0xc8       // mov    ecx, dword [rbx - 56]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x14caa40f               // shld    edx, ecx, 20
	WORD $0x738b; BYTE $0xc4       // mov    esi, dword [rbx - 60]
	LONG $0x0ef1a40f               // shld    ecx, esi, 14
	WORD $0x7b8b; BYTE $0xbc       // mov    edi, dword [rbx - 68]
	WORD $0x438b; BYTE $0xc0       // mov    eax, dword [rbx - 64]
	LONG $0x08c6a40f               // shld    esi, eax, 8
	LONG $0x02f8a40f               // shld    eax, edi, 2
	LONG $0x6b7efac5; BYTE $0xb4   // vmovq    xmm5, qword [rbx - 76]
	LONG $0x4551e2c4; BYTE $0xf1   // vpsrlvd    xmm6, xmm5, xmm1
	LONG $0xed70f9c5; BYTE $0xe5   // vpshufd    xmm5, xmm5, 229
	LONG $0x2251e3c4; WORD $0x01ef // vpinsrd    xmm5, xmm5, edi, 1
	LONG $0x4751e2c4; BYTE $0xeb   // vpsllvd    xmm5, xmm5, xmm3
	LONG $0xedebc9c5               // vpor    xmm5, xmm6, xmm5
	LONG $0xf66ef9c5               // vmovd    xmm6, esi
	LONG $0x2249e3c4; WORD $0x01f1 // vpinsrd    xmm6, xmm6, ecx, 1
	LONG $0x2249e3c4; WORD $0x02f2 // vpinsrd    xmm6, xmm6, edx, 2
	LONG $0x2249c3c4; WORD $0x03f1 // vpinsrd    xmm6, xmm6, r9d, 3
	LONG $0x2251e3c4; WORD $0x02ef // vpinsrd    xmm5, xmm5, edi, 2
	LONG $0x2251e3c4; WORD $0x03e8 // vpinsrd    xmm5, xmm5, eax, 3
	LONG $0x3855e3c4; WORD $0x01ee // vinserti128    ymm5, ymm5, xmm6, 1
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xc06f // vmovdqu    yword [r15 - 64], ymm5
	WORD $0x438b; BYTE $0xe4       // mov    eax, dword [rbx - 28]
	LONG $0xe84b8b44               // mov    r9d, dword [rbx - 24]
	LONG $0xc1a40f41; BYTE $0x0a   // shld    r9d, eax, 10
	LONG $0xe05b8b44               // mov    r11d, dword [rbx - 32]
	LONG $0xd8a40f44; BYTE $0x04   // shld    eax, r11d, 4
	WORD $0x738b; BYTE $0xdc       // mov    esi, dword [rbx - 36]
	WORD $0x8944; BYTE $0xdf       // mov    edi, r11d
	LONG $0x18f7a40f               // shld    edi, esi, 24
	WORD $0x4b8b; BYTE $0xd8       // mov    ecx, dword [rbx - 40]
	LONG $0x12cea40f               // shld    esi, ecx, 18
	LONG $0xd0538b44               // mov    r10d, dword [rbx - 48]
	WORD $0x538b; BYTE $0xd4       // mov    edx, dword [rbx - 44]
	LONG $0x0cd1a40f               // shld    ecx, edx, 12
	LONG $0xd2a40f44; BYTE $0x06   // shld    edx, r10d, 6
	LONG $0x6e79c1c4; BYTE $0xea   // vmovd    xmm5, r10d
	LONG $0xf76ef9c5               // vmovd    xmm6, edi
	LONG $0x2251e3c4; WORD $0x01ea // vpinsrd    xmm5, xmm5, edx, 1
	LONG $0x2249c3c4; WORD $0x01f3 // vpinsrd    xmm6, xmm6, r11d, 1
	LONG $0x2251e3c4; WORD $0x02e9 // vpinsrd    xmm5, xmm5, ecx, 2
	LONG $0x2249e3c4; WORD $0x02f0 // vpinsrd    xmm6, xmm6, eax, 2
	LONG $0x2251e3c4; WORD $0x03ee // vpinsrd    xmm5, xmm5, esi, 3
	LONG $0x2249c3c4; WORD $0x03f1 // vpinsrd    xmm6, xmm6, r9d, 3
	LONG $0x3855e3c4; WORD $0x01ee // vinserti128    ymm5, ymm5, xmm6, 1
	LONG $0x4555e2c4; BYTE $0xea   // vpsrlvd    ymm5, ymm5, ymm2
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; WORD $0xe06f // vmovdqu    yword [r15 - 32], ymm5
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x14caa40f               // shld    edx, ecx, 20
	WORD $0x738b; BYTE $0xf8       // mov    esi, dword [rbx - 8]
	LONG $0x0ef1a40f               // shld    ecx, esi, 14
	WORD $0x7b8b; BYTE $0xf0       // mov    edi, dword [rbx - 16]
	WORD $0x438b; BYTE $0xf4       // mov    eax, dword [rbx - 12]
	LONG $0x08c6a40f               // shld    esi, eax, 8
	LONG $0x02f8a40f               // shld    eax, edi, 2
	LONG $0x6b7efac5; BYTE $0xe8   // vmovq    xmm5, qword [rbx - 24]
	LONG $0x4551e2c4; BYTE $0xf1   // vpsrlvd    xmm6, xmm5, xmm1
	LONG $0xed70f9c5; BYTE $0xe5   // vpshufd    xmm5, xmm5, 229
	LONG $0x2251e3c4; WORD $0x01ef // vpinsrd    xmm5, xmm5, edi, 1
	LONG $0x4751e2c4; BYTE $0xeb   // vpsllvd    xmm5, xmm5, xmm3
	LONG $0xedebc9c5               // vpor    xmm5, xmm6, xmm5
	LONG $0xf66ef9c5               // vmovd    xmm6, esi
	LONG $0x2249e3c4; WORD $0x01f1 // vpinsrd    xmm6, xmm6, ecx, 1
	LONG $0x2249e3c4; WORD $0x02f2 // vpinsrd    xmm6, xmm6, edx, 2
	LONG $0x2249c3c4; WORD $0x03f1 // vpinsrd    xmm6, xmm6, r9d, 3
	LONG $0x2251e3c4; WORD $0x02ef // vpinsrd    xmm5, xmm5, edi, 2
	LONG $0x2251e3c4; WORD $0x03e8 // vpinsrd    xmm5, xmm5, eax, 3
	LONG $0x3855e3c4; WORD $0x01ee // vinserti128    ymm5, ymm5, xmm6, 1
	LONG $0x4555e2c4; BYTE $0xec   // vpsrlvd    ymm5, ymm5, ymm4
	LONG $0xe8dbd5c5               // vpand    ymm5, ymm5, ymm0
	LONG $0x7f7ec1c4; BYTE $0x2f   // vmovdqu    yword [r15], ymm5
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x68c38348               // add    rbx, 104
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_107
	JMP  LBB0_147

LBB0_135:
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8944; BYTE $0xf0             // mov    eax, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x14c38348                     // add    rbx, 20
	QUAD $0x00000920856ffdc5             // vmovdqa    ymm0, yword 2336[rbp] /* [rip + .LCPI0_116] */
	QUAD $0x0000c88d597de2c4; BYTE $0x00 // vpbroadcastq    ymm1, qword 200[rbp] /* [rip + .LCPI0_117] */
	QUAD $0x00000940956ffdc5             // vmovdqa    ymm2, yword 2368[rbp] /* [rip + .LCPI0_118] */

LBB0_137:
	WORD $0x4b8b; BYTE $0xec       // mov    ecx, dword [rbx - 20]
	WORD $0x538b; BYTE $0xf0       // mov    edx, dword [rbx - 16]
	WORD $0xd689                   // mov    esi, edx
	LONG $0x02cea40f               // shld    esi, ecx, 2
	LONG $0xd96ef9c5               // vmovd    xmm3, ecx
	LONG $0x5879e2c4; BYTE $0xe3   // vpbroadcastd    xmm4, xmm3
	LONG $0x2261e3c4; WORD $0x01de // vpinsrd    xmm3, xmm3, esi, 1
	LONG $0x2261e3c4; WORD $0x02da // vpinsrd    xmm3, xmm3, edx, 2
	LONG $0x2261e3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, edx, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xd8   // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xa05f // vmovdqu    yword [r15 - 96], ymm3
	WORD $0x4b8b; BYTE $0xf0       // mov    ecx, dword [rbx - 16]
	WORD $0x538b; BYTE $0xf4       // mov    edx, dword [rbx - 12]
	WORD $0xd689                   // mov    esi, edx
	LONG $0x04cea40f               // shld    esi, ecx, 4
	LONG $0xd96ef9c5               // vmovd    xmm3, ecx
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2261e3c4; WORD $0x02de // vpinsrd    xmm3, xmm3, esi, 2
	LONG $0x2261e3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, edx, 3
	LONG $0xe26ef9c5               // vmovd    xmm4, edx
	LONG $0x5879e2c4; BYTE $0xe4   // vpbroadcastd    xmm4, xmm4
	LONG $0x3865e3c4; WORD $0x01dc // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x4565e2c4; BYTE $0xda   // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xc05f // vmovdqu    yword [r15 - 64], ymm3
	WORD $0x4b8b; BYTE $0xf8       // mov    ecx, dword [rbx - 8]
	WORD $0x538b; BYTE $0xfc       // mov    edx, dword [rbx - 4]
	WORD $0xd689                   // mov    esi, edx
	LONG $0x02cea40f               // shld    esi, ecx, 2
	LONG $0xd96ef9c5               // vmovd    xmm3, ecx
	LONG $0x2261e3c4; WORD $0x01e6 // vpinsrd    xmm4, xmm3, esi, 1
	LONG $0x2259e3c4; WORD $0x02e2 // vpinsrd    xmm4, xmm4, edx, 2
	LONG $0x5879e2c4; BYTE $0xdb   // vpbroadcastd    xmm3, xmm3
	LONG $0x2259e3c4; WORD $0x03e2 // vpinsrd    xmm4, xmm4, edx, 3
	LONG $0x3865e3c4; WORD $0x01dc // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x4565e2c4; BYTE $0xd8   // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xe05f // vmovdqu    yword [r15 - 32], ymm3
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0x138b                   // mov    edx, dword [rbx]
	WORD $0xd689                   // mov    esi, edx
	LONG $0x04cea40f               // shld    esi, ecx, 4
	LONG $0xd96ef9c5               // vmovd    xmm3, ecx
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2261e3c4; WORD $0x02de // vpinsrd    xmm3, xmm3, esi, 2
	LONG $0x2261e3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, edx, 3
	LONG $0xe26ef9c5               // vmovd    xmm4, edx
	LONG $0x5879e2c4; BYTE $0xe4   // vpbroadcastd    xmm4, xmm4
	LONG $0x3865e3c4; WORD $0x01dc // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x4565e2c4; BYTE $0xda   // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; BYTE $0x1f   // vmovdqu    yword [r15], ymm3
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x18c38348               // add    rbx, 24
	LONG $0xffc08348               // add    rax, -1
	JNE  LBB0_137
	JMP  LBB0_147

LBB0_111:
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x54c38348               // add    rbx, 84
	QUAD $0x000003e0856ffdc5       // vmovdqa    ymm0, yword 992[rbp] /* [rip + .LCPI0_55] */
	LONG $0x597de2c4; WORD $0x504d // vpbroadcastq    ymm1, qword 80[rbp] /* [rip + .LCPI0_56] */
	QUAD $0x00000400956ffdc5       // vmovdqa    ymm2, yword 1024[rbp] /* [rip + .LCPI0_57] */

LBB0_113:
	LONG $0xbc538b44               // mov    r10d, dword [rbx - 68]
	LONG $0xc04b8b44               // mov    r9d, dword [rbx - 64]
	LONG $0xd1a40f45; BYTE $0x06   // shld    r9d, r10d, 6
	WORD $0x738b; BYTE $0xb8       // mov    esi, dword [rbx - 72]
	WORD $0x8944; BYTE $0xd7       // mov    edi, r10d
	LONG $0x12f7a40f               // shld    edi, esi, 18
	WORD $0x538b; BYTE $0xb4       // mov    edx, dword [rbx - 76]
	LONG $0x08d6a40f               // shld    esi, edx, 8
	LONG $0xac5b8b44               // mov    r11d, dword [rbx - 84]
	WORD $0x4b8b; BYTE $0xb0       // mov    ecx, dword [rbx - 80]
	WORD $0xd089                   // mov    eax, edx
	LONG $0x14c8a40f               // shld    eax, ecx, 20
	LONG $0xd9a40f44; BYTE $0x0a   // shld    ecx, r11d, 10
	LONG $0x6e79c1c4; BYTE $0xdb   // vmovd    xmm3, r11d
	LONG $0xe66ef9c5               // vmovd    xmm4, esi
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2259e3c4; WORD $0x01e7 // vpinsrd    xmm4, xmm4, edi, 1
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x2259c3c4; WORD $0x02e2 // vpinsrd    xmm4, xmm4, r10d, 2
	LONG $0x2261e3c4; WORD $0x03da // vpinsrd    xmm3, xmm3, edx, 3
	LONG $0x2259c3c4; WORD $0x03e1 // vpinsrd    xmm4, xmm4, r9d, 3
	LONG $0x3865e3c4; WORD $0x01dc // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x4565e2c4; BYTE $0xd8   // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xa05f // vmovdqu    yword [r15 - 96], ymm3
	LONG $0xd44b8b44               // mov    r9d, dword [rbx - 44]
	WORD $0x4b8b; BYTE $0xd0       // mov    ecx, dword [rbx - 48]
	WORD $0x8945; BYTE $0xca       // mov    r10d, r9d
	LONG $0xcaa40f41; BYTE $0x0c   // shld    r10d, ecx, 12
	WORD $0x738b; BYTE $0xcc       // mov    esi, dword [rbx - 52]
	LONG $0x02f1a40f               // shld    ecx, esi, 2
	WORD $0x7b8b; BYTE $0xc8       // mov    edi, dword [rbx - 56]
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x0efea40f               // shld    esi, edi, 14
	WORD $0x438b; BYTE $0xc0       // mov    eax, dword [rbx - 64]
	WORD $0x538b; BYTE $0xc4       // mov    edx, dword [rbx - 60]
	LONG $0x04d7a40f               // shld    edi, edx, 4
	LONG $0x10d0ac0f               // shrd    eax, edx, 16
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0xe06ef9c5               // vmovd    xmm4, eax
	LONG $0x2261c3c4; WORD $0x02da // vpinsrd    xmm3, xmm3, r10d, 2
	LONG $0x2259e3c4; WORD $0x01e2 // vpinsrd    xmm4, xmm4, edx, 1
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0x2259e3c4; WORD $0x02e7 // vpinsrd    xmm4, xmm4, edi, 2
	LONG $0x2259e3c4; WORD $0x03e6 // vpinsrd    xmm4, xmm4, esi, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xda   // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xc05f // vmovdqu    yword [r15 - 64], ymm3
	LONG $0xe8538b44               // mov    r10d, dword [rbx - 24]
	LONG $0xec4b8b44               // mov    r9d, dword [rbx - 20]
	LONG $0xd1a40f45; BYTE $0x06   // shld    r9d, r10d, 6
	WORD $0x538b; BYTE $0xe4       // mov    edx, dword [rbx - 28]
	WORD $0x8944; BYTE $0xd6       // mov    esi, r10d
	LONG $0x12d6a40f               // shld    esi, edx, 18
	WORD $0x4b8b; BYTE $0xe0       // mov    ecx, dword [rbx - 32]
	LONG $0x08caa40f               // shld    edx, ecx, 8
	LONG $0xd85b8b44               // mov    r11d, dword [rbx - 40]
	WORD $0x438b; BYTE $0xdc       // mov    eax, dword [rbx - 36]
	WORD $0xcf89                   // mov    edi, ecx
	LONG $0x14c7a40f               // shld    edi, eax, 20
	LONG $0xd8a40f44; BYTE $0x0a   // shld    eax, r11d, 10
	LONG $0x6e79c1c4; BYTE $0xdb   // vmovd    xmm3, r11d
	LONG $0xe26ef9c5               // vmovd    xmm4, edx
	LONG $0x2261e3c4; WORD $0x01d8 // vpinsrd    xmm3, xmm3, eax, 1
	LONG $0x2259e3c4; WORD $0x01e6 // vpinsrd    xmm4, xmm4, esi, 1
	LONG $0x2261e3c4; WORD $0x02df // vpinsrd    xmm3, xmm3, edi, 2
	LONG $0x2259c3c4; WORD $0x02e2 // vpinsrd    xmm4, xmm4, r10d, 2
	LONG $0x2261e3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, ecx, 3
	LONG $0x2259c3c4; WORD $0x03e1 // vpinsrd    xmm4, xmm4, r9d, 3
	LONG $0x3865e3c4; WORD $0x01dc // vinserti128    ymm3, ymm3, xmm4, 1
	LONG $0x4565e2c4; BYTE $0xd8   // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xe05f // vmovdqu    yword [r15 - 32], ymm3
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0x8945; BYTE $0xca       // mov    r10d, r9d
	LONG $0xcaa40f41; BYTE $0x0c   // shld    r10d, ecx, 12
	WORD $0x738b; BYTE $0xf8       // mov    esi, dword [rbx - 8]
	LONG $0x02f1a40f               // shld    ecx, esi, 2
	WORD $0x7b8b; BYTE $0xf4       // mov    edi, dword [rbx - 12]
	LONG $0xde6ef9c5               // vmovd    xmm3, esi
	LONG $0x0efea40f               // shld    esi, edi, 14
	WORD $0x438b; BYTE $0xec       // mov    eax, dword [rbx - 20]
	WORD $0x538b; BYTE $0xf0       // mov    edx, dword [rbx - 16]
	LONG $0x04d7a40f               // shld    edi, edx, 4
	LONG $0x10d0ac0f               // shrd    eax, edx, 16
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0xe06ef9c5               // vmovd    xmm4, eax
	LONG $0x2261c3c4; WORD $0x02da // vpinsrd    xmm3, xmm3, r10d, 2
	LONG $0x2259e3c4; WORD $0x01e2 // vpinsrd    xmm4, xmm4, edx, 1
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0x2259e3c4; WORD $0x02e7 // vpinsrd    xmm4, xmm4, edi, 2
	LONG $0x2259e3c4; WORD $0x03e6 // vpinsrd    xmm4, xmm4, esi, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xda   // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; BYTE $0x1f   // vmovdqu    yword [r15], ymm3
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x58c38348               // add    rbx, 88
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_113
	JMP  LBB0_147

LBB0_123:
	WORD $0xfa83; BYTE $0x20             // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0             // mov    r8d, r14d
	LONG $0x60c78349                     // add    r15, 96
	LONG $0x34c38348                     // add    rbx, 52
	QUAD $0x00000680856ffdc5             // vmovdqa    ymm0, yword 1664[rbp] /* [rip + .LCPI0_86] */
	QUAD $0x0000908d597de2c4; BYTE $0x00 // vpbroadcastq    ymm1, qword 144[rbp] /* [rip + .LCPI0_87] */
	QUAD $0x000006a0956ffdc5             // vmovdqa    ymm2, yword 1696[rbp] /* [rip + .LCPI0_88] */

LBB0_125:
	LONG $0xd84b8b44               // mov    r9d, dword [rbx - 40]
	WORD $0x4b8b; BYTE $0xd4       // mov    ecx, dword [rbx - 44]
	WORD $0x8944; BYTE $0xce       // mov    esi, r9d
	LONG $0x0ccea40f               // shld    esi, ecx, 12
	WORD $0x7b8b; BYTE $0xcc       // mov    edi, dword [rbx - 52]
	LONG $0xd0538b44               // mov    r10d, dword [rbx - 48]
	WORD $0xca89                   // mov    edx, ecx
	LONG $0xd2a40f44; BYTE $0x08   // shld    edx, r10d, 8
	WORD $0x8944; BYTE $0xd0       // mov    eax, r10d
	LONG $0x04f8a40f               // shld    eax, edi, 4
	LONG $0xda6ef9c5               // vmovd    xmm3, edx
	LONG $0x2261e3c4; WORD $0x01d9 // vpinsrd    xmm3, xmm3, ecx, 1
	LONG $0x2261e3c4; WORD $0x02de // vpinsrd    xmm3, xmm3, esi, 2
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0xe76ef9c5               // vmovd    xmm4, edi
	LONG $0x2259e3c4; WORD $0x01e7 // vpinsrd    xmm4, xmm4, edi, 1
	LONG $0x2259e3c4; WORD $0x02e0 // vpinsrd    xmm4, xmm4, eax, 2
	LONG $0x2259c3c4; WORD $0x03e2 // vpinsrd    xmm4, xmm4, r10d, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xd8   // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xa05f // vmovdqu    yword [r15 - 96], ymm3
	WORD $0x438b; BYTE $0xe4       // mov    eax, dword [rbx - 28]
	WORD $0x4b8b; BYTE $0xe0       // mov    ecx, dword [rbx - 32]
	WORD $0xc289                   // mov    edx, eax
	LONG $0x0acaa40f               // shld    edx, ecx, 10
	LONG $0xd84b8b44               // mov    r9d, dword [rbx - 40]
	WORD $0x738b; BYTE $0xdc       // mov    esi, dword [rbx - 36]
	LONG $0xd96ef9c5               // vmovd    xmm3, ecx
	LONG $0x06f1a40f               // shld    ecx, esi, 6
	WORD $0xf789                   // mov    edi, esi
	LONG $0xcfa40f44; BYTE $0x02   // shld    edi, r9d, 2
	LONG $0x6e79c1c4; BYTE $0xe1   // vmovd    xmm4, r9d
	LONG $0x2259e3c4; WORD $0x01e7 // vpinsrd    xmm4, xmm4, edi, 1
	LONG $0x2259e3c4; WORD $0x02e6 // vpinsrd    xmm4, xmm4, esi, 2
	LONG $0x2259e3c4; WORD $0x03e1 // vpinsrd    xmm4, xmm4, ecx, 3
	LONG $0x2261e3c4; WORD $0x01da // vpinsrd    xmm3, xmm3, edx, 1
	LONG $0x2261e3c4; WORD $0x02d8 // vpinsrd    xmm3, xmm3, eax, 2
	LONG $0x2261e3c4; WORD $0x03d8 // vpinsrd    xmm3, xmm3, eax, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xda   // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xc05f // vmovdqu    yword [r15 - 64], ymm3
	LONG $0xf44b8b44               // mov    r9d, dword [rbx - 12]
	WORD $0x438b; BYTE $0xf0       // mov    eax, dword [rbx - 16]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x0cc2a40f               // shld    edx, eax, 12
	WORD $0x738b; BYTE $0xe8       // mov    esi, dword [rbx - 24]
	LONG $0xec538b44               // mov    r10d, dword [rbx - 20]
	WORD $0xc189                   // mov    ecx, eax
	LONG $0xd1a40f44; BYTE $0x08   // shld    ecx, r10d, 8
	WORD $0x8944; BYTE $0xd7       // mov    edi, r10d
	LONG $0x04f7a40f               // shld    edi, esi, 4
	LONG $0xd96ef9c5               // vmovd    xmm3, ecx
	LONG $0x2261e3c4; WORD $0x01d8 // vpinsrd    xmm3, xmm3, eax, 1
	LONG $0x2261e3c4; WORD $0x02da // vpinsrd    xmm3, xmm3, edx, 2
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0xe66ef9c5               // vmovd    xmm4, esi
	LONG $0x2259e3c4; WORD $0x01e6 // vpinsrd    xmm4, xmm4, esi, 1
	LONG $0x2259e3c4; WORD $0x02e7 // vpinsrd    xmm4, xmm4, edi, 2
	LONG $0x2259c3c4; WORD $0x03e2 // vpinsrd    xmm4, xmm4, r10d, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xd8   // vpsrlvd    ymm3, ymm3, ymm0
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; WORD $0xe05f // vmovdqu    yword [r15 - 32], ymm3
	WORD $0x8b44; BYTE $0x0b       // mov    r9d, dword [rbx]
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0x8944; BYTE $0xca       // mov    edx, r9d
	LONG $0x0acaa40f               // shld    edx, ecx, 10
	WORD $0x438b; BYTE $0xf8       // mov    eax, dword [rbx - 8]
	LONG $0xd96ef9c5               // vmovd    xmm3, ecx
	LONG $0x06c1a40f               // shld    ecx, eax, 6
	WORD $0x7b8b; BYTE $0xf4       // mov    edi, dword [rbx - 12]
	WORD $0xc689                   // mov    esi, eax
	LONG $0x02fea40f               // shld    esi, edi, 2
	LONG $0xe76ef9c5               // vmovd    xmm4, edi
	LONG $0x2259e3c4; WORD $0x01e6 // vpinsrd    xmm4, xmm4, esi, 1
	LONG $0x2259e3c4; WORD $0x02e0 // vpinsrd    xmm4, xmm4, eax, 2
	LONG $0x2259e3c4; WORD $0x03e1 // vpinsrd    xmm4, xmm4, ecx, 3
	LONG $0x2261e3c4; WORD $0x01da // vpinsrd    xmm3, xmm3, edx, 1
	LONG $0x2261c3c4; WORD $0x02d9 // vpinsrd    xmm3, xmm3, r9d, 2
	LONG $0x2261c3c4; WORD $0x03d9 // vpinsrd    xmm3, xmm3, r9d, 3
	LONG $0x385de3c4; WORD $0x01db // vinserti128    ymm3, ymm4, xmm3, 1
	LONG $0x4565e2c4; BYTE $0xda   // vpsrlvd    ymm3, ymm3, ymm2
	LONG $0xd9dbe5c5               // vpand    ymm3, ymm3, ymm1
	LONG $0x7f7ec1c4; BYTE $0x1f   // vmovdqu    yword [r15], ymm3
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x38c38348               // add    rbx, 56
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_125
	JMP  LBB0_147

LBB0_99:
	WORD $0xfa83; BYTE $0x20       // cmp    edx, 32
	JL   LBB0_147
	WORD $0x8945; BYTE $0xf0       // mov    r8d, r14d
	LONG $0x60c78349               // add    r15, 96
	LONG $0x597de2c4; WORD $0x0845 // vpbroadcastq    ymm0, qword 8[rbp] /* [rip + .LCPI0_8] */
	LONG $0x74c38348               // add    rbx, 116
	QUAD $0x00000b208d6ff9c5       // vmovdqa    xmm1, oword 2848[rbp] /* [rip + .LCPI0_9] */
	QUAD $0x00000b30956ff9c5       // vmovdqa    xmm2, oword 2864[rbp] /* [rip + .LCPI0_10] */
	QUAD $0x000001a09d6ffdc5       // vmovdqa    ymm3, yword 416[rbp] /* [rip + .LCPI0_11] */

LBB0_101:
	LONG $0xa45b8b44               // mov    r11d, dword [rbx - 92]
	LONG $0xa84b8b44               // mov    r9d, dword [rbx - 88]
	LONG $0xd9a40f45; BYTE $0x0e   // shld    r9d, r11d, 14
	WORD $0x738b; BYTE $0xa0       // mov    esi, dword [rbx - 96]
	LONG $0xf3a40f41; BYTE $0x0c   // shld    r11d, esi, 12
	WORD $0x7b8b; BYTE $0x9c       // mov    edi, dword [rbx - 100]
	LONG $0x0afea40f               // shld    esi, edi, 10
	WORD $0x438b; BYTE $0x98       // mov    eax, dword [rbx - 104]
	LONG $0x08c7a40f               // shld    edi, eax, 8
	WORD $0x538b; BYTE $0x94       // mov    edx, dword [rbx - 108]
	LONG $0x06d0a40f               // shld    eax, edx, 6
	LONG $0x8c538b44               // mov    r10d, dword [rbx - 116]
	WORD $0x4b8b; BYTE $0x90       // mov    ecx, dword [rbx - 112]
	LONG $0x04caa40f               // shld    edx, ecx, 4
	LONG $0xd1a40f44; BYTE $0x02   // shld    ecx, r10d, 2
	LONG $0x6e79c1c4; BYTE $0xe2   // vmovd    xmm4, r10d
	LONG $0xef6ef9c5               // vmovd    xmm5, edi
	LONG $0x2259e3c4; WORD $0x01e1 // vpinsrd    xmm4, xmm4, ecx, 1
	LONG $0x2251e3c4; WORD $0x01ee // vpinsrd    xmm5, xmm5, esi, 1
	LONG $0x2259e3c4; WORD $0x02e2 // vpinsrd    xmm4, xmm4, edx, 2
	LONG $0x2251c3c4; WORD $0x02eb // vpinsrd    xmm5, xmm5, r11d, 2
	LONG $0x2259e3c4; WORD $0x03e0 // vpinsrd    xmm4, xmm4, eax, 3
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0x385de3c4; WORD $0x01e5 // vinserti128    ymm4, ymm4, xmm5, 1
	LONG $0xe0dbddc5               // vpand    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xa067 // vmovdqu    yword [r15 - 96], ymm4
	WORD $0x438b; BYTE $0xc4       // mov    eax, dword [rbx - 60]
	WORD $0x4b8b; BYTE $0xc0       // mov    ecx, dword [rbx - 64]
	WORD $0xc289                   // mov    edx, eax
	LONG $0x1ccaa40f               // shld    edx, ecx, 28
	WORD $0x738b; BYTE $0xbc       // mov    esi, dword [rbx - 68]
	WORD $0x7b8b; BYTE $0xb8       // mov    edi, dword [rbx - 72]
	LONG $0x1af1a40f               // shld    ecx, esi, 26
	LONG $0x18fea40f               // shld    esi, edi, 24
	LONG $0x636ffac5; BYTE $0xa8   // vmovdqu    xmm4, oword [rbx - 88]
	LONG $0x4559e2c4; BYTE $0xe9   // vpsrlvd    xmm5, xmm4, xmm1
	LONG $0xe470f9c5; BYTE $0xf9   // vpshufd    xmm4, xmm4, 249
	LONG $0x2259e3c4; WORD $0x03e7 // vpinsrd    xmm4, xmm4, edi, 3
	LONG $0xf66ef9c5               // vmovd    xmm6, esi
	LONG $0x2249e3c4; WORD $0x01f1 // vpinsrd    xmm6, xmm6, ecx, 1
	LONG $0x2249e3c4; WORD $0x02f2 // vpinsrd    xmm6, xmm6, edx, 2
	LONG $0x4759e2c4; BYTE $0xe2   // vpsllvd    xmm4, xmm4, xmm2
	LONG $0x2249e3c4; WORD $0x03f0 // vpinsrd    xmm6, xmm6, eax, 3
	LONG $0xe4ebd1c5               // vpor    xmm4, xmm5, xmm4
	LONG $0x385de3c4; WORD $0x01e6 // vinserti128    ymm4, ymm4, xmm6, 1
	LONG $0x455de2c4; BYTE $0xe3   // vpsrlvd    ymm4, ymm4, ymm3
	LONG $0xe0dbddc5               // vpand    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xc067 // vmovdqu    yword [r15 - 64], ymm4
	LONG $0xe05b8b44               // mov    r11d, dword [rbx - 32]
	LONG $0xe44b8b44               // mov    r9d, dword [rbx - 28]
	LONG $0xd9a40f45; BYTE $0x0e   // shld    r9d, r11d, 14
	WORD $0x538b; BYTE $0xdc       // mov    edx, dword [rbx - 36]
	LONG $0xd3a40f41; BYTE $0x0c   // shld    r11d, edx, 12
	WORD $0x738b; BYTE $0xd8       // mov    esi, dword [rbx - 40]
	LONG $0x0af2a40f               // shld    edx, esi, 10
	WORD $0x7b8b; BYTE $0xd4       // mov    edi, dword [rbx - 44]
	LONG $0x08fea40f               // shld    esi, edi, 8
	WORD $0x4b8b; BYTE $0xd0       // mov    ecx, dword [rbx - 48]
	LONG $0x06cfa40f               // shld    edi, ecx, 6
	LONG $0xc8538b44               // mov    r10d, dword [rbx - 56]
	WORD $0x438b; BYTE $0xcc       // mov    eax, dword [rbx - 52]
	LONG $0x04c1a40f               // shld    ecx, eax, 4
	LONG $0xd0a40f44; BYTE $0x02   // shld    eax, r10d, 2
	LONG $0x6e79c1c4; BYTE $0xe2   // vmovd    xmm4, r10d
	LONG $0xee6ef9c5               // vmovd    xmm5, esi
	LONG $0x2259e3c4; WORD $0x01e0 // vpinsrd    xmm4, xmm4, eax, 1
	LONG $0x2251e3c4; WORD $0x01ea // vpinsrd    xmm5, xmm5, edx, 1
	LONG $0x2259e3c4; WORD $0x02e1 // vpinsrd    xmm4, xmm4, ecx, 2
	LONG $0x2251c3c4; WORD $0x02eb // vpinsrd    xmm5, xmm5, r11d, 2
	LONG $0x2259e3c4; WORD $0x03e7 // vpinsrd    xmm4, xmm4, edi, 3
	LONG $0x2251c3c4; WORD $0x03e9 // vpinsrd    xmm5, xmm5, r9d, 3
	LONG $0x385de3c4; WORD $0x01e5 // vinserti128    ymm4, ymm4, xmm5, 1
	LONG $0xe0dbddc5               // vpand    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; WORD $0xe067 // vmovdqu    yword [r15 - 32], ymm4
	WORD $0x038b                   // mov    eax, dword [rbx]
	WORD $0x4b8b; BYTE $0xfc       // mov    ecx, dword [rbx - 4]
	WORD $0xc289                   // mov    edx, eax
	LONG $0x1ccaa40f               // shld    edx, ecx, 28
	WORD $0x738b; BYTE $0xf8       // mov    esi, dword [rbx - 8]
	LONG $0x1af1a40f               // shld    ecx, esi, 26
	WORD $0x7b8b; BYTE $0xf4       // mov    edi, dword [rbx - 12]
	LONG $0x636ffac5; BYTE $0xe4   // vmovdqu    xmm4, oword [rbx - 28]
	LONG $0x18fea40f               // shld    esi, edi, 24
	LONG $0x4559e2c4; BYTE $0xe9   // vpsrlvd    xmm5, xmm4, xmm1
	LONG $0xe470f9c5; BYTE $0xf9   // vpshufd    xmm4, xmm4, 249
	LONG $0x2259e3c4; WORD $0x03e7 // vpinsrd    xmm4, xmm4, edi, 3
	LONG $0xf66ef9c5               // vmovd    xmm6, esi
	LONG $0x2249e3c4; WORD $0x01f1 // vpinsrd    xmm6, xmm6, ecx, 1
	LONG $0x4759e2c4; BYTE $0xe2   // vpsllvd    xmm4, xmm4, xmm2
	LONG $0x2249e3c4; WORD $0x02f2 // vpinsrd    xmm6, xmm6, edx, 2
	LONG $0x2249e3c4; WORD $0x03f0 // vpinsrd    xmm6, xmm6, eax, 3
	LONG $0xe4ebd1c5               // vpor    xmm4, xmm5, xmm4
	LONG $0x385de3c4; WORD $0x01e6 // vinserti128    ymm4, ymm4, xmm6, 1
	LONG $0x455de2c4; BYTE $0xe3   // vpsrlvd    ymm4, ymm4, ymm3
	LONG $0xe0dbddc5               // vpand    ymm4, ymm4, ymm0
	LONG $0x7f7ec1c4; BYTE $0x27   // vmovdqu    yword [r15], ymm4
	LONG $0x80ef8349               // sub    r15, -128
	LONG $0x78c38348               // add    rbx, 120
	LONG $0xffc08349               // add    r8, -1
	JNE  LBB0_101

LBB0_147:
	LONG $0x05e6c141         // shl    r14d, 5
	WORD $0x8944; BYTE $0xf0 // mov    eax, r14d
	MOVQ 0(SP), SP
	VZEROUPPER
	MOVQ AX, num+32(FP)
	RET
