// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package stream

import (
	"context"
	"github.com/google/wire"
	"github.com/wandb/wandb/core/internal/api"
	"github.com/wandb/wandb/core/internal/featurechecker"
	"github.com/wandb/wandb/core/internal/filetransfer"
	"github.com/wandb/wandb/core/internal/mailbox"
	"github.com/wandb/wandb/core/internal/monitor"
	"github.com/wandb/wandb/core/internal/observability"
	"github.com/wandb/wandb/core/internal/runwork"
	"github.com/wandb/wandb/core/internal/sharedmode"
	"github.com/wandb/wandb/core/internal/tensorboard"
	"github.com/wandb/wandb/core/internal/watcher"
	"github.com/wandb/wandb/core/internal/wboperation"
)

// Injectors from streaminject.go:

// InjectStream returns a new Stream.
func InjectStream(params StreamParams) *Stream {
	clientID := sharedmode.RandomClientID()
	settings := params.Settings
	streamStreamLoggerFile := openStreamLoggerFile(settings)
	client := params.Sentry
	level := params.LogLevel
	coreLogger := streamLogger(streamStreamLoggerFile, settings, client, level)
	runWork := provideStreamRunWork(coreLogger)
	context := provideRunContext(runWork)
	backend := NewBackend(coreLogger, settings)
	peeker := &observability.Peeker{}
	graphqlClient := NewGraphQLClient(backend, settings, peeker, clientID)
	serverFeaturesCache := featurechecker.NewServerFeaturesCache(context, graphqlClient, coreLogger)
	gitCommitHash := params.Commit
	fileTransferStats := filetransfer.NewFileTransferStats()
	mailboxMailbox := mailbox.New()
	wandbOperations := wboperation.NewOperations()
	gpuResourceManager := params.GPUResourceManager
	systemMonitorParams := monitor.SystemMonitorParams{
		Ctx:                context,
		Logger:             coreLogger,
		Settings:           settings,
		ExtraWork:          runWork,
		GpuResourceManager: gpuResourceManager,
		GraphqlClient:      graphqlClient,
		WriterID:           clientID,
	}
	systemMonitor := monitor.NewSystemMonitor(systemMonitorParams)
	printer := observability.NewPrinter()
	handlerParams := HandlerParams{
		Commit:            gitCommitHash,
		FileTransferStats: fileTransferStats,
		Logger:            coreLogger,
		Mailbox:           mailboxMailbox,
		Operations:        wandbOperations,
		Settings:          settings,
		SystemMonitor:     systemMonitor,
		TerminalPrinter:   printer,
	}
	handler := NewHandler(handlerParams)
	streamRun := NewStreamRun()
	fileReadDelay := _wireFileReadDelayValue
	tensorboardParams := tensorboard.Params{
		ExtraWork:     runWork,
		Logger:        coreLogger,
		Settings:      settings,
		FileReadDelay: fileReadDelay,
	}
	tbHandler := tensorboard.NewTBHandler(tensorboardParams)
	recordParser := &RecordParser{
		BeforeRunEndCtx:    context,
		FeatureProvider:    serverFeaturesCache,
		GraphqlClientOrNil: graphqlClient,
		Logger:             coreLogger,
		Operations:         wandbOperations,
		Run:                streamRun,
		TBHandler:          tbHandler,
		ClientID:           clientID,
		Settings:           settings,
	}
	fileStream := NewFileStream(backend, coreLogger, wandbOperations, printer, settings, peeker, clientID)
	fileTransferManager := NewFileTransferManager(fileTransferStats, coreLogger, settings)
	watcher := provideFileWatcher(coreLogger)
	uploader := NewRunfilesUploader(runWork, coreLogger, wandbOperations, settings, fileStream, fileTransferManager, watcher, graphqlClient)
	senderParams := SenderParams{
		Logger:              coreLogger,
		Operations:          wandbOperations,
		Settings:            settings,
		Backend:             backend,
		FeatureProvider:     serverFeaturesCache,
		FileStream:          fileStream,
		FileTransferManager: fileTransferManager,
		FileTransferStats:   fileTransferStats,
		FileWatcher:         watcher,
		RunfilesUploader:    uploader,
		GraphqlClient:       graphqlClient,
		Peeker:              peeker,
		StreamRun:           streamRun,
		Mailbox:             mailboxMailbox,
		RunWork:             runWork,
	}
	sender := NewSender(senderParams)
	stream := NewStream(params, clientID, serverFeaturesCache, graphqlClient, handler, streamStreamLoggerFile, coreLogger, wandbOperations, recordParser, runWork, sender, streamRun)
	return stream
}

var (
	_wireFileReadDelayValue = tensorboard.FileReadDelay(nil)
)

// streaminject.go:

var streamProviders = wire.NewSet(
	NewStream, wire.FieldsOf(
		new(StreamParams),
		"Commit",
		"GPUResourceManager",
		"Settings",
		"Sentry",
		"LogLevel",
	), wire.Bind(new(runwork.ExtraWork), new(runwork.RunWork)), wire.Bind(new(api.Peeker), new(*observability.Peeker)), wire.Struct(new(observability.Peeker)), wire.Struct(new(RecordParser), "*"), featurechecker.NewServerFeaturesCache, filetransfer.NewFileTransferStats, handlerProviders, mailbox.New, monitor.SystemMonitorProviders, NewBackend,
	NewFileStream,
	NewFileTransferManager,
	NewGraphQLClient,
	NewRunfilesUploader,
	NewStreamRun, observability.NewPrinter, provideFileWatcher,
	provideRunContext,
	provideStreamRunWork,
	senderProviders, sharedmode.RandomClientID, streamLoggerProviders, tensorboard.TBHandlerProviders, wboperation.NewOperations,
)

func provideFileWatcher(logger *observability.CoreLogger) watcher.Watcher {
	return watcher.New(watcher.Params{Logger: logger})
}

func provideRunContext(extraWork runwork.ExtraWork) context.Context {
	return extraWork.BeforeEndCtx()
}

func provideStreamRunWork(logger *observability.CoreLogger) runwork.RunWork {
	return runwork.New(BufferSize, logger)
}
