// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/stream (interfaces: RecordParser)
//
// Generated by this command:
//
//	mockgen -package streamtest -destination internal/streamtest/mockrecordparser.go ./internal/stream RecordParser
//

// Package streamtest is a generated GoMock package.
package streamtest

import (
	reflect "reflect"

	runwork "github.com/wandb/wandb/core/internal/runwork"
	service_go_proto "github.com/wandb/wandb/core/pkg/service_go_proto"
	gomock "go.uber.org/mock/gomock"
)

// MockRecordParser is a mock of RecordParser interface.
type MockRecordParser struct {
	ctrl     *gomock.Controller
	recorder *MockRecordParserMockRecorder
	isgomock struct{}
}

// MockRecordParserMockRecorder is the mock recorder for MockRecordParser.
type MockRecordParserMockRecorder struct {
	mock *MockRecordParser
}

// NewMockRecordParser creates a new mock instance.
func NewMockRecordParser(ctrl *gomock.Controller) *MockRecordParser {
	mock := &MockRecordParser{ctrl: ctrl}
	mock.recorder = &MockRecordParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordParser) EXPECT() *MockRecordParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockRecordParser) Parse(record *service_go_proto.Record) runwork.Work {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", record)
	ret0, _ := ret[0].(runwork.Work)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockRecordParserMockRecorder) Parse(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockRecordParser)(nil).Parse), record)
}
