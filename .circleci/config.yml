version: 2.1

orbs:
  win: circleci/windows@5.0.0
  slack: circleci/slack@4.12.5
  gcloud: circleci/gcp-cli@3.1.1
  codecov: codecov/codecov@4.0.1

parameters:
  go_version:
    type: string
    default: "1.22.6"
  server_image:
    type: string
    default: "us-central1-docker.pkg.dev/wandb-production/images/local-testcontainer"
  server_image_tag:
    type: string
    default: "master"

executors:
  macos:
    macos:
      xcode: 15.1.0
    resource_class: macos.m1.medium.gen1

  linux-python:
    parameters:
      python: { type: string }
      server_image: { type: string }
      server_image_tag: { type: string }
    docker:
      - image: python:<<parameters.python>>
    resource_class: xlarge

  local-testcontainer:
    parameters:
      python: { type: string }
      server_image: { type: string }
      server_image_tag: { type: string }
    docker:
      - image: "python:<< parameters.python >>"
      - image: << parameters.server_image >>:<< parameters.server_image_tag >>
        auth:
          username: _json_key
          password: $GCP_SERVICE_ACCOUNT_JSON_DECODED
        environment:
          CI: 1
          WANDB_ENABLE_TEST_CONTAINER: true
    resource_class: xlarge

  local-testcontainer-importers:
    parameters:
      python: { type: string }
      dst_server_name:
        type: string
        default: localhost-wandb-2
    docker:
      - image: "python:<<parameters.python>>"
      # the src server
      - image: <<pipeline.parameters.server_image>>:<<pipeline.parameters.server_image_tag>>
        auth:
          username: _json_key
          password: $GCP_SERVICE_ACCOUNT_JSON_DECODED
        environment:
          CI: 1
          WANDB_ENABLE_TEST_CONTAINER: true
      # the dst server
      - image: <<pipeline.parameters.server_image>>:<<pipeline.parameters.server_image_tag>>
        auth:
          username: _json_key
          password: $GCP_SERVICE_ACCOUNT_JSON_DECODED
        environment:
          CI: 1
          WANDB_ENABLE_TEST_CONTAINER: true
        name: << parameters.dst_server_name >>
    environment:
      WANDB_TEST_SERVER_URL2: http://<< parameters.dst_server_name >>
    resource_class: xlarge

commands:
  save-test-results:
    description: "Save test results"
    steps:
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - store_artifacts:
          path: mypy-results
      - store_artifacts:
          path: cover-results

  # We only need a separate command to include this workaround to a bug:
  # https://github.com/codecov/codecov-circleci-orb/issues/185#issuecomment-2072147831
  upload_codecov:
    description: Upload code coverage to codecov.io
    parameters:
      flags: { type: string }
    steps:
      - run: mkdir -p ~/.gnupg
      - codecov/upload: { flags: <<parameters.flags>> }

  run-nox-tests:
    description:
      Helper command for the nox-tests-* jobs. Runs a nox session and uploads
      tests artifacts.
    parameters:
      python: { type: string }
      session: { type: string }
      yea_shard: { type: string }
      codecov_flags: { type: string }
    steps:
      - run:
          name: Install Python dependencies
          command: python -m pip install -U nox pip uv
          no_output_timeout: 5m

      - run:
          name: "Run nox session: <<parameters.session>>"
          no_output_timeout: 10m
          command: >
            nox -s "<<parameters.session>>" --python <<parameters.python>>
          environment:
            YEA_SHARD: <<parameters.yea_shard>>

      - upload_codecov: { flags: <<parameters.codecov_flags>> }
      - save-test-results

  install_go:
    description: "Install Go with the specified version and system"
    parameters:
      version:
        description: "Go version"
        type: string
        default: << pipeline.parameters.go_version >>
    steps:
      - run:
          name: Install Go
          command: |
            file_name=go<<parameters.version>>
            case $(uname -m) in
              x86_64)
                arch="amd64"
                ;;
              arm64)
                arch="arm64"
                ;;
              *)
                echo "Unsupported architecture: $(uname -m)"
                exit 1
                ;;
            esac

            case $(uname | tr '[:upper:]' '[:lower:]') in
              msys*)
                file_name=$file_name.windows-$arch.zip
                suffix="zip"
                ;;
              darwin*)
                file_name=$file_name.darwin-$arch.tar.gz
                suffix="tar.gz"
                ;;
              linux*)
                file_name=$file_name.linux-$arch.tar.gz
                suffix="tar.gz"
                ;;
              *)
                echo "Unsupported OS: $(uname)"
                exit 1
                ;;
            esac

            curl -L -o $file_name https://go.dev/dl/$file_name
            case $suffix in
              zip)
                unzip -q $file_name -d $HOME
                ;;
              tar.gz)
                tar -C $HOME -xzf $file_name
                ;;
            esac

            rm $file_name

            echo 'export PATH="$HOME/go/bin:$PATH"' >> "$BASH_ENV"

            $HOME/go/bin/go version
            $HOME/go/bin/go env -w GOCACHE=$HOME/.cache/go-build
          no_output_timeout: 1m

  install_rust:
    description: "Install Rust with the specified version"
    parameters:
      version:
        description: "Rust version"
        type: string
        default: "stable"
    steps:
      - run:
          name: Install Rust
          command: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain <<parameters.version>>
            echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> "$BASH_ENV"
            $HOME/.cargo/bin/rustup --version
            $HOME/.cargo/bin/cargo --version
          no_output_timeout: 1m

  setup_gcloud:
    parameters:
      container_registry:
        description: "Container registry to authenticate with"
        type: string
        default: "us-central1-docker.pkg.dev"
    steps:
      - run:
          name: "Setup gcloud and kubectl"
          # gcloud --quiet components update
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud --quiet components install gke-gcloud-auth-plugin
            gcloud --quiet components install kubectl
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project $GOOGLE_PROJECT_ID
            gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            gcloud auth configure-docker --quiet << parameters.container_registry >>

jobs:
  nox-tests-linux:
    parameters:
      executor_name:
        description:
          Set to "local-testcontainer" to run using the local-testcontainer
          executor. Defaults to "linux-python".
        type: string
        default: linux-python
      parallelism: { type: integer }
      codecov_flags: { type: string }
      python: { type: string }
      session: { type: string }
      yea_shard: # if running tests with yea, like functional_tests
        default: ""
        type: string
      server_image:
        default: << pipeline.parameters.server_image >>
        type: string
      server_image_tag:
        default: << pipeline.parameters.server_image_tag >>
        type: string

    parallelism: <<parameters.parallelism>>
    executor:
      name: <<parameters.executor_name>>
      python: <<parameters.python>>
      server_image: <<parameters.server_image>>
      server_image_tag: <<parameters.server_image_tag>>

    steps:
      - checkout
      - run:
          name: Install system deps
          command: apt-get update && apt-get install -y libsndfile1 ffmpeg
      - install_go
      - install_rust
      - run-nox-tests:
          codecov_flags: <<parameters.codecov_flags>>
          python: <<parameters.python>>
          session: <<parameters.session>>
          yea_shard: <<parameters.yea_shard>>

  nox-tests-macos:
    parameters:
      parallelism: { type: integer }
      codecov_flags: { type: string }
      python: { type: string }
      session: { type: string }
      yea_shard: # if running tests with yea, like functional_tests
        default: ""
        type: string

    parallelism: <<parameters.parallelism>>
    executor: macos

    steps:
      - checkout
      - run:
          name: Install system deps
          command: brew install ffmpeg python@<<parameters.python>>
      - install_go
      - run-nox-tests:
          codecov_flags: <<parameters.codecov_flags>>
          python: <<parameters.python>>
          session: <<parameters.session>>
          yea_shard: <<parameters.yea_shard>>

  nox-tests-win:
    parameters:
      parallelism: { type: integer }
      codecov_flags: { type: string }
      python: { type: string }
      session: { type: string }
      yea_shard: # if running tests with yea, like functional_tests
        default: ""
        type: string

    parallelism: <<parameters.parallelism>>
    executor:
      name: win/server-2019
      size: large
      shell: bash.exe

    steps:
      - checkout

      # https://docs.python.org/3/using/windows.html#the-nuget-org-packages
      - run:
          name: Install Python
          command: >
            nuget.exe install python \
              -Version <<parameters.python>> \
              -ExcludeVersion \
              -OutputDirectory "/c/nox-tests-python" &&
            setx PATH '/c/nox-tests-python/python/tools;%PATH%'

      - run:
          name: "Install system deps: ffmpeg"
          command: choco install -y ffmpeg
      - run:
          # We install mingw so that gcc is available, which is needed for cgo.
          name: "Install system deps: mingw"
          command: choco install -y mingw --version 12.2 --allow-downgrade

      - install_go
      - run-nox-tests:
          codecov_flags: <<parameters.codecov_flags>>
          python: <<parameters.python>>
          session: <<parameters.session>>
          yea_shard: <<parameters.yea_shard>>

  code-check:
    docker:
      - image: "python:3.10"
    steps:
      - checkout
      - install_go
      - install_rust
      - run:
          name: Install Python dependencies
          command: python -m pip install -U nox pip uv
          no_output_timeout: 5m
      - run:
          name: Ensure proto files were generated
          command: nox -vt proto-check
      - run:
          name: Automatically generate code and check for changes
          command: nox -vs codegen -- --check
      - run:
          name: Run mypy and report results
          command: nox -vs mypy-report
      - save-test-results

  importers:
    parameters:
      executor: { type: executor }
      python: { type: string }
      tests:
        type: enum
        enum: [wandb, mlflow]
      xdist:
        type: integer
        default: 3
    executor: << parameters.executor >>
    steps:
      - checkout
      - run:
          name: Install system deps
          command: |
            apt-get update
            apt-get install -y libsndfile1 ffmpeg
      - install_go
      - install_rust
      - run:
          name: Install Python dependencies
          command: python -m pip install -U nox pip uv
          no_output_timeout: 5m
      - run:
          name: Run tests
          no_output_timeout: 10m
          command: |
            nox -s "importer_tests-<< parameters.python >>(importer='<< parameters.tests >>')" \
              -- $(if [ "<< parameters.tests >>" = "wandb" ]; then echo "--wandb-second-server=true"; fi) \
              tests/pytest_tests/system_tests/test_importers/test_<< parameters.tests >>
      - upload_codecov: { flags: system }
      - save-test-results

  unit-tests-go:
    docker:
      - image: cimg/go:<<pipeline.parameters.go_version>>
    steps:
      - checkout
      - run:
          name: Run wandb core's Go tests and collect coverage
          command: |
            cd core
            go test -race -coverprofile=coverage.txt -covermode=atomic ./...
      - upload_codecov: { flags: unit }

  # Download the local-testcontainer image corresponding to the latest server release
  # and store it in wandb-client-cicd/images/local-testcontainer.
  # No-op if already stored.
  store-local-testcontainer:
    docker:
      - image: "python:3.11"
    resource_class: small
    working_directory: /mnt/ramdisk
    steps:
      - checkout
      - run:
          name: Install system deps
          command: |
            apt-get update
      - install_go
      - gcloud/install
      - setup_gcloud
      - run:
          name:
          command: |
            go install github.com/google/go-containerregistry/cmd/gcrane@latest
            python -m pip install -U pip nox requests uv
            nox -s local-testcontainer-registry
          no_output_timeout: 5m

  slack_notify:
    parameters:
      message:
        type: string
        default: ":runner:"
      execute:
        type: boolean
        default: true
    docker:
      - image: "cimg/base:stable"
    steps:
      - when:
          condition: << parameters.execute >>
          steps:
            - slack/notify:
                custom: |
                  {
                    "blocks": [
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "plain_text",
                            "text": "<< parameters.message >>",
                            "emoji": true
                          }
                        ]
                      }
                    ]
                  }
                event: always
                channel: $SLACK_SDK_NIGHTLY_CI_CHANNEL
      # this is to make sure `steps` is not empty
      - run:
          name: Print message to stdout
          command: echo << parameters.message >>

workflows:
  main:
    jobs:
      #
      # Linting
      #
      - code-check

      #
      # Store latest local-testcontainer
      #
      - store-local-testcontainer:
          filters:
            branches:
              only:
                - main

      #
      # Unit tests with Go on Linux
      #
      - unit-tests-go

      #
      # Unit tests with pytest on Linux
      #
      - nox-tests-linux:
          name: unit-tests-linux-<<matrix.python>>
          session: unit_tests
          codecov_flags: unit
          parallelism: 4

          matrix:
            parameters:
              python: ["3.8", "3.12"]

      #
      # Unit tests with pytest on macOS
      #
      - nox-tests-macos:
          name: unit-tests-macos-<<matrix.python>>
          session: unit_tests
          codecov_flags: unit
          parallelism: 4

          matrix:
            parameters:
              python: ["3.9", "3.12"]

      #
      # Unit tests with pytest on Windows
      #
      - nox-tests-win:
          name: unit-tests-win-<<matrix.python>>
          session: unit_tests
          codecov_flags: unit
          parallelism: 4

          filters:
            branches:
              only:
                - main
                - /^release-.*/
                - /^.*-ci-win$/

          matrix:
            parameters:
              python: ["3.9", "3.12"]

      #
      # System tests on Linux
      #
      - nox-tests-linux:
          name: system-tests-linux-<<matrix.python>>
          session: system_tests
          codecov_flags: system
          parallelism: 8
          executor_name: local-testcontainer

          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/

          matrix:
            parameters:
              python: ["3.8", "3.12"]

      - nox-tests-linux:
          name: system-tests-min-server-version-linux-<<matrix.python>>
          session: system_tests
          codecov_flags: system
          parallelism: 8
          executor_name: local-testcontainer

          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              ignore: /pull\/[0-9]+/

          matrix:
            parameters:
              python: ["3.12"]
              server_image: ["us-central1-docker.pkg.dev/wandb-client-cicd/images/local-testcontainer"]
              server_image_tag: ["0.48.0"]

      - nox-tests-linux:
          name: notebook-tests-linux-<<matrix.python>>
          session: notebook_tests
          codecov_flags: system
          parallelism: 1
          executor_name: local-testcontainer

          matrix:
            parameters:
              python: ["3.8", "3.12"]

      #
      # W&B Importer tests on Linux, using 2 real wandb servers
      #
      - importers:
          name: "\
            system-tests-linux-importers-\
            <<matrix.tests>>-\
            <<matrix.python>>"

          matrix:
            parameters:
              python: ["3.9"]
              tests: ["wandb", "mlflow"]

          executor:
            name: local-testcontainer-importers
            python: << matrix.python >>

      #
      # Functional tests with yea on Linux
      #
      - nox-tests-linux:
          name: "\
            func-tests-linux-\
            <<matrix.yea_shard>>-\
            <<matrix.python>>"
          session: functional_tests
          codecov_flags: func
          parallelism: 4

          matrix:
            parameters:
              yea_shard: [default, artifacts, launch, mitm, docs]
              python: ["3.9"]

      #
      # Functional tests with yea on Windows
      #
      - nox-tests-win:
          name: func-tests-win-default-<<matrix.python>>
          session: functional_tests
          yea_shard: default
          codecov_flags: func
          parallelism: 4

          filters:
            branches:
              only:
                - main
                - /^release-.*/
                - /^.*-ci-win$/

          matrix:
            parameters:
              python: ["3.9"]
