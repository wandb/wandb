syntax = "proto3";

package wandb_internal;

import "wandb/proto/wandb_base.proto";
import "wandb/proto/wandb_internal.proto";
import "wandb/proto/wandb_settings.proto";

option go_package = "core/pkg/service_go_proto";

// Authentication messages.
//
// These messages are used to authenticate the client with the W&B server.
// The client sends a ServerAuthenticateRequest message to wandb-core, which
// verifies the API key on the server specified by the base_url field and
// returns a ServerAuthenticateResponse message with the default entity and
// error status.
message ServerAuthenticateRequest {
  string api_key = 1;
  string base_url = 2;
  _RecordInfo _info = 200;
}

message ServerAuthenticateResponse {
  string default_entity = 1;
  string error_status = 2;
  _RecordInfo _info = 200;
}

message ServerShutdownRequest {
  _RecordInfo _info = 200;
}

message ServerShutdownResponse {}

message ServerStatusRequest {
  _RecordInfo _info = 200;
}

message ServerStatusResponse {}

message ServerInformInitRequest {
  Settings settings = 1;
  _RecordInfo _info = 200;
}

message ServerInformInitResponse {}

message ServerInformStartRequest {
  Settings settings = 1;
  _RecordInfo _info = 200;
}

message ServerInformStartResponse {}

message ServerInformFinishRequest {
  _RecordInfo _info = 200;
}

message ServerInformFinishResponse {}

message ServerInformAttachRequest {
  _RecordInfo _info = 200;
}

message ServerInformAttachResponse {
  Settings settings = 1;
  _RecordInfo _info = 200;
}

message ServerInformDetachRequest {
  _RecordInfo _info = 200;
}

message ServerInformDetachResponse {}

message ServerInformTeardownRequest {
  int32 exit_code = 1;
  _RecordInfo _info = 200;
}

message ServerInformTeardownResponse {}

/*
 * ServerRequest, ServerResponse: used in sock server
 */

message ServerRequest {
  oneof server_request_type {
    Record record_publish = 1;
    Record record_communicate = 2;
    ServerInformInitRequest inform_init = 3;
    ServerInformFinishRequest inform_finish = 4;
    ServerInformAttachRequest inform_attach = 5;
    ServerInformDetachRequest inform_detach = 6;
    ServerInformTeardownRequest inform_teardown = 7;
    ServerInformStartRequest inform_start = 8;
    ServerAuthenticateRequest authenticate = 9;
  }
}

message ServerResponse {
  oneof server_response_type {
    Result result_communicate = 2;
    ServerInformInitResponse inform_init_response = 3;
    ServerInformFinishResponse inform_finish_response = 4;
    ServerInformAttachResponse inform_attach_response = 5;
    ServerInformDetachResponse inform_detach_response = 6;
    ServerInformTeardownResponse inform_teardown_response = 7;
    ServerInformStartResponse inform_start_response = 8;
    ServerAuthenticateResponse authenticate_response = 9;
  }
}
