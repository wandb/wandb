# Generated by ariadne-codegen
# Source: tools/graphql_codegen/automations/

from __future__ import annotations

from datetime import datetime
from typing import Literal

from pydantic import Field

from .base import GQLBase, GQLId, SerializedToJson, Typename
from .enums import AlertSeverity, EventTriggeringConditionType
from .typing_compat import Annotated


class ArtifactPortfolioScopeFields(GQLBase):
    typename__: Typename[str]
    id: GQLId
    name: str


class ArtifactSequenceScopeFields(GQLBase):
    typename__: Typename[str]
    id: GQLId
    name: str


class CreateFilterTriggerResult(GQLBase):
    typename__: Typename[str]
    trigger: TriggerFields | None
    client_mutation_id: str | None = Field(alias="clientMutationId")


class DeleteTriggerResult(GQLBase):
    typename__: Typename[str]
    success: bool
    client_mutation_id: str | None = Field(alias="clientMutationId")


class FilterEventFields(GQLBase):
    typename__: Typename[str]
    event_type: EventTriggeringConditionType = Field(alias="eventType")
    filter: str


class GenericWebhookActionFields(GQLBase):
    typename__: Typename[str]
    integration: (
        GenericWebhookActionFieldsIntegrationIntegration
        | GenericWebhookActionFieldsIntegrationGenericWebhookIntegration
    ) = Field(discriminator="typename__")
    request_payload: SerializedToJson | None = Field(alias="requestPayload")


class GenericWebhookActionFieldsIntegrationIntegration(GQLBase):
    typename__: Typename[
        Literal["GitHubOAuthIntegration", "Integration", "SlackIntegration"]
    ]


class GenericWebhookIntegrationConnectionFields(GQLBase):
    typename__: Typename[str]
    page_info: PageInfoFields = Field(alias="pageInfo")
    edges: list[GenericWebhookIntegrationConnectionFieldsEdges]


class GenericWebhookIntegrationConnectionFieldsEdges(GQLBase):
    cursor: str
    node: (
        Annotated[
            GenericWebhookIntegrationConnectionFieldsEdgesNodeIntegration
            | GenericWebhookIntegrationConnectionFieldsEdgesNodeGenericWebhookIntegration,
            Field(discriminator="typename__"),
        ]
        | None
    )


class GenericWebhookIntegrationConnectionFieldsEdgesNodeIntegration(GQLBase):
    typename__: Typename[
        Literal["GitHubOAuthIntegration", "Integration", "SlackIntegration"]
    ]


class GenericWebhookIntegrationFields(GQLBase):
    typename__: Typename[str]
    id: GQLId
    name: str
    url_endpoint: str = Field(alias="urlEndpoint")
    created_at: datetime = Field(alias="createdAt")


class GithubIntegrationFields(GQLBase):
    typename__: Typename[str]
    id: GQLId


class IntegrationConnectionFields(GQLBase):
    typename__: Typename[str]
    page_info: PageInfoFields = Field(alias="pageInfo")
    edges: list[IntegrationConnectionFieldsEdges]


class IntegrationConnectionFieldsEdges(GQLBase):
    cursor: str
    node: (
        Annotated[
            IntegrationConnectionFieldsEdgesNodeIntegration
            | IntegrationConnectionFieldsEdgesNodeGenericWebhookIntegration
            | IntegrationConnectionFieldsEdgesNodeSlackIntegration,
            Field(discriminator="typename__"),
        ]
        | None
    )


class IntegrationConnectionFieldsEdgesNodeIntegration(GQLBase):
    typename__: Typename[Literal["GitHubOAuthIntegration", "Integration"]]


class NoOpActionFields(GQLBase):
    typename__: Typename[str]


class NotificationActionFields(GQLBase):
    typename__: Typename[str]
    integration: (
        NotificationActionFieldsIntegrationIntegration
        | NotificationActionFieldsIntegrationSlackIntegration
    ) = Field(discriminator="typename__")
    title: str | None
    message: str | None
    severity: AlertSeverity | None


class NotificationActionFieldsIntegrationIntegration(GQLBase):
    typename__: Typename[
        Literal["GenericWebhookIntegration", "GitHubOAuthIntegration", "Integration"]
    ]


class PageInfoFields(GQLBase):
    end_cursor: str | None = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class ProjectConnectionFields(GQLBase):
    typename__: Typename[str]
    page_info: PageInfoFields = Field(alias="pageInfo")
    edges: list[ProjectConnectionFieldsEdges]


class ProjectConnectionFieldsEdges(GQLBase):
    cursor: str
    node: ProjectConnectionFieldsEdgesNode | None


class ProjectConnectionFieldsEdgesNode(GQLBase):
    triggers: list[TriggerFields]


class ProjectScopeFields(GQLBase):
    typename__: Typename[str]
    id: GQLId
    name: str


class QueueJobActionFields(GQLBase):
    typename__: Typename[str]
    queue: RunQueueFields | None
    template: SerializedToJson


class RunQueueFields(GQLBase):
    typename__: Typename[str]
    id: GQLId
    name: str


class SlackIntegrationConnectionFields(GQLBase):
    typename__: Typename[str]
    page_info: PageInfoFields = Field(alias="pageInfo")
    edges: list[SlackIntegrationConnectionFieldsEdges]


class SlackIntegrationConnectionFieldsEdges(GQLBase):
    cursor: str
    node: (
        Annotated[
            SlackIntegrationConnectionFieldsEdgesNodeIntegration
            | SlackIntegrationConnectionFieldsEdgesNodeSlackIntegration,
            Field(discriminator="typename__"),
        ]
        | None
    )


class SlackIntegrationConnectionFieldsEdgesNodeIntegration(GQLBase):
    typename__: Typename[
        Literal["GenericWebhookIntegration", "GitHubOAuthIntegration", "Integration"]
    ]


class SlackIntegrationFields(GQLBase):
    typename__: Typename[str]
    id: GQLId
    team_name: str = Field(alias="teamName")
    channel_name: str = Field(alias="channelName")


class TriggerFields(GQLBase):
    typename__: Typename[str]
    id: GQLId
    created_at: datetime = Field(alias="createdAt")
    created_by: UserFields = Field(alias="createdBy")
    updated_at: datetime | None = Field(alias="updatedAt")
    name: str
    description: str | None
    enabled: bool
    scope: (
        TriggerFieldsScopeProject
        | TriggerFieldsScopeArtifactSequence
        | TriggerFieldsScopeArtifactPortfolio
    ) = Field(discriminator="typename__")
    event: TriggerFieldsEventFilterEventTriggeringCondition = Field(
        discriminator="typename__"
    )
    action: (
        TriggerFieldsActionQueueJobTriggeredAction
        | TriggerFieldsActionNotificationTriggeredAction
        | TriggerFieldsActionGenericWebhookTriggeredAction
        | TriggerFieldsActionNoOpTriggeredAction
    ) = Field(discriminator="typename__")


class UpdateFilterTriggerResult(GQLBase):
    typename__: Typename[str]
    trigger: TriggerFields | None
    client_mutation_id: str | None = Field(alias="clientMutationId")


class UserFields(GQLBase):
    typename__: Typename[str]
    id: GQLId
    username: str | None


class TriggerFieldsScopeArtifactPortfolio(ArtifactPortfolioScopeFields):
    typename__: Typename[Literal["ArtifactPortfolio"]]


class TriggerFieldsScopeArtifactSequence(ArtifactSequenceScopeFields):
    typename__: Typename[Literal["ArtifactSequence"]]


class TriggerFieldsEventFilterEventTriggeringCondition(FilterEventFields):
    typename__: Typename[Literal["FilterEventTriggeringCondition"]]


class TriggerFieldsActionGenericWebhookTriggeredAction(GenericWebhookActionFields):
    typename__: Typename[Literal["GenericWebhookTriggeredAction"]]


class GenericWebhookActionFieldsIntegrationGenericWebhookIntegration(
    GenericWebhookIntegrationFields
):
    typename__: Typename[Literal["GenericWebhookIntegration"]]


class GenericWebhookIntegrationConnectionFieldsEdgesNodeGenericWebhookIntegration(
    GenericWebhookIntegrationFields
):
    typename__: Typename[Literal["GenericWebhookIntegration"]]


class IntegrationConnectionFieldsEdgesNodeGenericWebhookIntegration(
    GenericWebhookIntegrationFields
):
    typename__: Typename[Literal["GenericWebhookIntegration"]]


class TriggerFieldsActionNoOpTriggeredAction(NoOpActionFields):
    typename__: Typename[Literal["NoOpTriggeredAction"]]


class TriggerFieldsActionNotificationTriggeredAction(NotificationActionFields):
    typename__: Typename[Literal["NotificationTriggeredAction"]]


class TriggerFieldsScopeProject(ProjectScopeFields):
    typename__: Typename[Literal["Project"]]


class TriggerFieldsActionQueueJobTriggeredAction(QueueJobActionFields):
    typename__: Typename[Literal["QueueJobTriggeredAction"]]


class IntegrationConnectionFieldsEdgesNodeSlackIntegration(SlackIntegrationFields):
    typename__: Typename[Literal["SlackIntegration"]]


class NotificationActionFieldsIntegrationSlackIntegration(SlackIntegrationFields):
    typename__: Typename[Literal["SlackIntegration"]]


class SlackIntegrationConnectionFieldsEdgesNodeSlackIntegration(SlackIntegrationFields):
    typename__: Typename[Literal["SlackIntegration"]]


ArtifactPortfolioScopeFields.model_rebuild()
ArtifactSequenceScopeFields.model_rebuild()
CreateFilterTriggerResult.model_rebuild()
DeleteTriggerResult.model_rebuild()
FilterEventFields.model_rebuild()
GenericWebhookActionFields.model_rebuild()
GenericWebhookIntegrationConnectionFields.model_rebuild()
GenericWebhookIntegrationFields.model_rebuild()
GithubIntegrationFields.model_rebuild()
IntegrationConnectionFields.model_rebuild()
NoOpActionFields.model_rebuild()
NotificationActionFields.model_rebuild()
PageInfoFields.model_rebuild()
ProjectConnectionFields.model_rebuild()
ProjectScopeFields.model_rebuild()
QueueJobActionFields.model_rebuild()
RunQueueFields.model_rebuild()
SlackIntegrationConnectionFields.model_rebuild()
SlackIntegrationFields.model_rebuild()
TriggerFields.model_rebuild()
UpdateFilterTriggerResult.model_rebuild()
UserFields.model_rebuild()
