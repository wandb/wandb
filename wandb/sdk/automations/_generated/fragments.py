# Generated by ariadne-codegen
# Source: tools/pydantic_codegen/queries-automations.graphql

from __future__ import annotations

import sys
from datetime import datetime

from pydantic import Field, Json

from .base_model import BaseModel
from .enums import AlertSeverity, EventTriggeringConditionType

if sys.version_info >= (3, 12):
    from typing import Annotated, Literal
else:
    from typing_extensions import Annotated, Literal


class ArtifactPortfolioScope(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str


class ArtifactSequenceScope(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str


class CreateFilterTriggerResult(BaseModel):
    typename__: str = Field(alias="__typename")
    trigger: CreateFilterTriggerResultTrigger | None
    client_mutation_id: str | None = Field(alias="clientMutationId")


class DeleteTriggerResult(BaseModel):
    typename__: str = Field(alias="__typename")
    success: bool
    client_mutation_id: str | None = Field(alias="clientMutationId")


class FilterEventTriggeringCondition(BaseModel):
    event_type: EventTriggeringConditionType = Field(alias="eventType")
    filter: str


class GithubIntegration(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str


class NotificationAction(BaseModel):
    typename__: str = Field(alias="__typename")
    title: str | None
    message: str | None
    severity: AlertSeverity | None
    integration: (
        NotificationActionIntegrationIntegration
        | NotificationActionIntegrationSlackIntegration
    ) = Field(discriminator="typename__")


class NotificationActionIntegrationIntegration(BaseModel):
    typename__: Literal[
        "GenericWebhookIntegration", "GitHubOAuthIntegration", "Integration"
    ] = Field(alias="__typename")


class PageInfo(BaseModel):
    end_cursor: str | None = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class PaginatedIntegrations(BaseModel):
    page_info: PaginatedIntegrationsPageInfo = Field(alias="pageInfo")
    edges: list[PaginatedIntegrationsEdges]


class PaginatedIntegrationsEdges(BaseModel):
    cursor: str
    node: (
        Annotated[
            PaginatedIntegrationsEdgesNodeIntegration
            | PaginatedIntegrationsEdgesNodeIntegration,
            Field(discriminator="typename__"),
        ]
        | None
    )


class PaginatedIntegrationsEdgesNodeIntegration(BaseModel):
    typename__: Literal[
        "GenericWebhookIntegration",
        "GitHubOAuthIntegration",
        "Integration",
        "SlackIntegration",
    ] = Field(alias="__typename")
    id: str


class PaginatedProjectTriggers(BaseModel):
    page_info: PaginatedProjectTriggersPageInfo = Field(alias="pageInfo")
    edges: list[PaginatedProjectTriggersEdges]


class PaginatedProjectTriggersEdges(BaseModel):
    cursor: str
    node: PaginatedProjectTriggersEdgesNode | None


class PaginatedProjectTriggersEdgesNode(BaseModel):
    triggers: list[PaginatedProjectTriggersEdgesNodeTriggers]


class ProjectScope(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str


class QueueJobAction(BaseModel):
    typename__: str = Field(alias="__typename")
    template: Json
    queue: QueueJobActionQueue | None


class RunQueue(BaseModel):
    id: str
    name: str


class SlackIntegration(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    team_name: str = Field(alias="teamName")
    channel_name: str = Field(alias="channelName")


class Trigger(BaseModel):
    id: str
    created_at: datetime = Field(alias="createdAt")
    created_by: TriggerCreatedBy = Field(alias="createdBy")
    updated_at: datetime | None = Field(alias="updatedAt")
    name: str
    description: str | None
    enabled: bool
    scope: (
        TriggerScopeProject
        | TriggerScopeArtifactSequence
        | TriggerScopeArtifactPortfolio
    ) = Field(discriminator="typename__")
    event: TriggerEventFilterEventTriggeringCondition = Field(
        discriminator="typename__"
    )
    action: (
        TriggerActionQueueJobTriggeredAction
        | TriggerActionNotificationTriggeredAction
        | TriggerActionGenericWebhookTriggeredAction
    ) = Field(discriminator="typename__")


class UserInfo(BaseModel):
    id: str
    username: str | None


class WebhookAction(BaseModel):
    typename__: str = Field(alias="__typename")
    request_payload: Json | None = Field(alias="requestPayload")
    integration: (
        WebhookActionIntegrationIntegration
        | WebhookActionIntegrationGenericWebhookIntegration
    ) = Field(discriminator="typename__")


class WebhookActionIntegrationIntegration(BaseModel):
    typename__: Literal["GitHubOAuthIntegration", "Integration", "SlackIntegration"] = (
        Field(alias="__typename")
    )


class WebhookIntegration(BaseModel):
    typename__: str = Field(alias="__typename")
    id: str
    name: str
    url_endpoint: str = Field(alias="urlEndpoint")
    secret_ref: str | None = Field(alias="secretRef")
    access_token_ref: str | None = Field(alias="accessTokenRef")
    created_at: datetime = Field(alias="createdAt")


class TriggerScopeArtifactPortfolio(ArtifactPortfolioScope):
    typename__: Literal["ArtifactPortfolio"] = Field(alias="__typename")


class TriggerScopeArtifactSequence(ArtifactSequenceScope):
    typename__: Literal["ArtifactSequence"] = Field(alias="__typename")


class TriggerEventFilterEventTriggeringCondition(FilterEventTriggeringCondition):
    typename__: Literal["FilterEventTriggeringCondition"] = Field(alias="__typename")


class TriggerActionNotificationTriggeredAction(NotificationAction):
    typename__: Literal["NotificationTriggeredAction"] = Field(alias="__typename")


class PaginatedIntegrationsPageInfo(PageInfo):
    pass


class PaginatedProjectTriggersPageInfo(PageInfo):
    pass


class TriggerScopeProject(ProjectScope):
    typename__: Literal["Project"] = Field(alias="__typename")


class TriggerActionQueueJobTriggeredAction(QueueJobAction):
    typename__: Literal["QueueJobTriggeredAction"] = Field(alias="__typename")


class QueueJobActionQueue(RunQueue):
    pass


class NotificationActionIntegrationSlackIntegration(SlackIntegration):
    typename__: Literal["SlackIntegration"] = Field(alias="__typename")


class CreateFilterTriggerResultTrigger(Trigger):
    pass


class PaginatedProjectTriggersEdgesNodeTriggers(Trigger):
    pass


class TriggerCreatedBy(UserInfo):
    pass


class TriggerActionGenericWebhookTriggeredAction(WebhookAction):
    typename__: Literal["GenericWebhookTriggeredAction"] = Field(alias="__typename")


class WebhookActionIntegrationGenericWebhookIntegration(WebhookIntegration):
    typename__: Literal["GenericWebhookIntegration"] = Field(alias="__typename")


ArtifactPortfolioScope.model_rebuild()
ArtifactSequenceScope.model_rebuild()
CreateFilterTriggerResult.model_rebuild()
DeleteTriggerResult.model_rebuild()
FilterEventTriggeringCondition.model_rebuild()
GithubIntegration.model_rebuild()
NotificationAction.model_rebuild()
PageInfo.model_rebuild()
PaginatedIntegrations.model_rebuild()
PaginatedProjectTriggers.model_rebuild()
ProjectScope.model_rebuild()
QueueJobAction.model_rebuild()
RunQueue.model_rebuild()
SlackIntegration.model_rebuild()
Trigger.model_rebuild()
UserInfo.model_rebuild()
WebhookAction.model_rebuild()
WebhookIntegration.model_rebuild()
