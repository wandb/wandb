# Generated by ariadne-codegen
# Source: tools/graphql_codegen/artifacts/

from __future__ import annotations

from typing import List, Literal, Optional

from pydantic import Field

from wandb._pydantic import GQLBase, Typename

from .fragments import ArtifactFragment


class ProjectArtifacts(GQLBase):
    project: Optional[ProjectArtifactsProject]


class ProjectArtifactsProject(GQLBase):
    artifact_type: Optional[ProjectArtifactsProjectArtifactType] = Field(
        alias="artifactType"
    )


class ProjectArtifactsProjectArtifactType(GQLBase):
    artifact_collection: Optional[
        ProjectArtifactsProjectArtifactTypeArtifactCollection
    ] = Field(alias="artifactCollection")


class ProjectArtifactsProjectArtifactTypeArtifactCollection(GQLBase):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    name: str
    artifacts: Optional[ProjectArtifactsProjectArtifactTypeArtifactCollectionArtifacts]


class ProjectArtifactsProjectArtifactTypeArtifactCollectionArtifacts(GQLBase):
    total_count: int = Field(alias="totalCount")
    edges: List[ProjectArtifactsProjectArtifactTypeArtifactCollectionArtifactsEdges]
    page_info: ProjectArtifactsProjectArtifactTypeArtifactCollectionArtifactsPageInfo = Field(
        alias="pageInfo"
    )


class ProjectArtifactsProjectArtifactTypeArtifactCollectionArtifactsEdges(GQLBase):
    node: ArtifactFragment
    version: str
    cursor: str


class ProjectArtifactsProjectArtifactTypeArtifactCollectionArtifactsPageInfo(GQLBase):
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


ProjectArtifacts.model_rebuild()
ProjectArtifactsProject.model_rebuild()
ProjectArtifactsProjectArtifactType.model_rebuild()
ProjectArtifactsProjectArtifactTypeArtifactCollection.model_rebuild()
ProjectArtifactsProjectArtifactTypeArtifactCollectionArtifacts.model_rebuild()
ProjectArtifactsProjectArtifactTypeArtifactCollectionArtifactsEdges.model_rebuild()
