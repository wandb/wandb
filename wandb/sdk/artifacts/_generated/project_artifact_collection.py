# Generated by ariadne-codegen
# Source: tools/graphql_codegen/artifacts/

from __future__ import annotations

from typing import List, Literal, Optional

from pydantic import Field

from wandb._pydantic import GQLId, GQLResult, Typename

from .fragments import ArtifactAliasFragment, PageInfoFragment, TagFragment


class ProjectArtifactCollection(GQLResult):
    project: Optional[ProjectArtifactCollectionProject]


class ProjectArtifactCollectionProject(GQLResult):
    artifact_type: Optional[ProjectArtifactCollectionProjectArtifactType] = Field(
        alias="artifactType"
    )


class ProjectArtifactCollectionProjectArtifactType(GQLResult):
    artifact_collection: Optional[
        ProjectArtifactCollectionProjectArtifactTypeArtifactCollection
    ] = Field(alias="artifactCollection")
    artifact_sequence: Optional[
        ProjectArtifactCollectionProjectArtifactTypeArtifactSequence
    ] = Field(alias="artifactSequence")


class ProjectArtifactCollectionProjectArtifactTypeArtifactCollection(GQLResult):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    id: GQLId
    name: str
    description: Optional[str]
    created_at: str = Field(alias="createdAt")
    tags: ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionTags
    aliases: ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionAliases


class ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionTags(GQLResult):
    edges: List[ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionTagsEdges]


class ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionTagsEdges(
    GQLResult
):
    node: TagFragment


class ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionAliases(GQLResult):
    edges: List[
        ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionAliasesEdges
    ]
    page_info: PageInfoFragment = Field(alias="pageInfo")


class ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionAliasesEdges(
    GQLResult
):
    node: Optional[ArtifactAliasFragment]
    cursor: str


class ProjectArtifactCollectionProjectArtifactTypeArtifactSequence(GQLResult):
    typename__: Typename[Literal["ArtifactSequence"]]


ProjectArtifactCollection.model_rebuild()
ProjectArtifactCollectionProject.model_rebuild()
ProjectArtifactCollectionProjectArtifactType.model_rebuild()
ProjectArtifactCollectionProjectArtifactTypeArtifactCollection.model_rebuild()
ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionTags.model_rebuild()
ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionTagsEdges.model_rebuild()
ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionAliases.model_rebuild()
ProjectArtifactCollectionProjectArtifactTypeArtifactCollectionAliasesEdges.model_rebuild()
