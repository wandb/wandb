# Generated by ariadne-codegen
# Source: tools/graphql_codegen/artifacts/

from __future__ import annotations

from typing import Any, List, Literal, Optional

from pydantic import Field

from wandb._pydantic import GQLId, GQLResult, Typename

from .enums import ArtifactState


class ArtifactCollectionsFragment(GQLResult):
    page_info: ArtifactCollectionsFragmentPageInfo = Field(alias="pageInfo")
    total_count: int = Field(alias="totalCount")
    edges: List[ArtifactCollectionsFragmentEdges]


class ArtifactCollectionsFragmentEdges(GQLResult):
    node: Optional[ArtifactCollectionsFragmentEdgesNode]
    cursor: str


class ArtifactCollectionsFragmentEdgesNode(GQLResult):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    id: GQLId
    name: str
    description: Optional[str]
    created_at: str = Field(alias="createdAt")


class ArtifactCollectionsFragmentPageInfo(GQLResult):
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class ArtifactFragmentAliases(GQLResult):
    artifact_collection: Optional[ArtifactFragmentAliasesArtifactCollection] = Field(
        alias="artifactCollection"
    )
    alias: str


class ArtifactFragmentAliasesArtifactCollection(GQLResult):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    project: Optional[ArtifactFragmentAliasesArtifactCollectionProject]
    name: str


class ArtifactFragmentAliasesArtifactCollectionProject(GQLResult):
    entity_name: str = Field(alias="entityName")
    name: str


class ArtifactFragmentWithoutAliases(GQLResult):
    id: GQLId
    artifact_sequence: ArtifactFragmentWithoutAliasesArtifactSequence = Field(
        alias="artifactSequence"
    )
    version_index: Optional[int] = Field(alias="versionIndex")
    artifact_type: ArtifactFragmentWithoutAliasesArtifactType = Field(
        alias="artifactType"
    )
    description: Optional[str]
    metadata: Optional[Any]
    ttl_duration_seconds: Optional[Any] = Field(
        alias="ttlDurationSeconds", default=None
    )
    ttl_is_inherited: Optional[bool] = Field(alias="ttlIsInherited", default=None)
    tags: Optional[List[ArtifactFragmentWithoutAliasesTags]] = None
    history_step: Optional[Any] = Field(alias="historyStep", default=None)
    state: ArtifactState
    current_manifest: Optional[ArtifactFragmentWithoutAliasesCurrentManifest] = Field(
        alias="currentManifest"
    )
    commit_hash: Optional[str] = Field(alias="commitHash")
    file_count: Any = Field(alias="fileCount")
    created_at: str = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")


class ArtifactFragmentWithoutAliasesArtifactSequence(GQLResult):
    project: Optional[ArtifactFragmentWithoutAliasesArtifactSequenceProject]
    name: str


class ArtifactFragmentWithoutAliasesArtifactSequenceProject(GQLResult):
    entity_name: str = Field(alias="entityName")
    name: str


class ArtifactFragmentWithoutAliasesArtifactType(GQLResult):
    name: str


class ArtifactFragmentWithoutAliasesCurrentManifest(GQLResult):
    file: ArtifactFragmentWithoutAliasesCurrentManifestFile


class ArtifactFragmentWithoutAliasesCurrentManifestFile(GQLResult):
    direct_url: str = Field(alias="directUrl")


class ArtifactFragmentWithoutAliasesTags(GQLResult):
    name: str


class ArtifactPortfolioTypeFields(GQLResult):
    typename__: Typename[Literal["ArtifactPortfolio"]] = "ArtifactPortfolio"
    id: GQLId
    name: str


class ArtifactSequenceTypeFields(GQLResult):
    typename__: Typename[Literal["ArtifactSequence"]] = "ArtifactSequence"
    id: GQLId
    name: str


class ArtifactTypeFragment(GQLResult):
    typename__: Typename[Literal["ArtifactType"]] = "ArtifactType"
    id: GQLId
    name: str
    description: Optional[str]
    created_at: str = Field(alias="createdAt")


class ArtifactTypesFragment(GQLResult):
    edges: List[ArtifactTypesFragmentEdges]
    page_info: ArtifactTypesFragmentPageInfo = Field(alias="pageInfo")


class ArtifactTypesFragmentEdges(GQLResult):
    node: Optional[ArtifactTypeFragment]
    cursor: str


class ArtifactTypesFragmentPageInfo(GQLResult):
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class ArtifactsFragment(GQLResult):
    total_count: int = Field(alias="totalCount")
    edges: List[ArtifactsFragmentEdges]
    page_info: ArtifactsFragmentPageInfo = Field(alias="pageInfo")


class ArtifactsFragmentEdges(GQLResult):
    node: ArtifactFragment
    version: str
    cursor: str


class ArtifactsFragmentPageInfo(GQLResult):
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class FileUrlsFragment(GQLResult):
    page_info: FileUrlsFragmentPageInfo = Field(alias="pageInfo")
    edges: List[FileUrlsFragmentEdges]


class FileUrlsFragmentEdges(GQLResult):
    node: Optional[FileUrlsFragmentEdgesNode]


class FileUrlsFragmentEdgesNode(GQLResult):
    name: str
    direct_url: str = Field(alias="directUrl")


class FileUrlsFragmentPageInfo(GQLResult):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")


class FilesFragment(GQLResult):
    edges: List[FilesFragmentEdges]
    page_info: FilesFragmentPageInfo = Field(alias="pageInfo")


class FilesFragmentEdges(GQLResult):
    node: Optional[FilesFragmentEdgesNode]
    cursor: str


class FilesFragmentEdgesNode(GQLResult):
    id: GQLId
    name: str
    url: Optional[str]
    size_bytes: Any = Field(alias="sizeBytes")
    storage_path: Optional[str] = Field(alias="storagePath", default=None)
    mimetype: Optional[str]
    updated_at: Optional[str] = Field(alias="updatedAt")
    digest: Optional[str]
    md_5: Optional[str] = Field(alias="md5")
    direct_url: str = Field(alias="directUrl")


class FilesFragmentPageInfo(GQLResult):
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class MembershipWithArtifact(GQLResult):
    id: GQLId
    artifact_collection: Optional[MembershipWithArtifactArtifactCollection] = Field(
        alias="artifactCollection"
    )
    artifact: Optional[ArtifactFragment]


class MembershipWithArtifactArtifactCollection(GQLResult):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    id: GQLId
    name: str
    project: Optional[MembershipWithArtifactArtifactCollectionProject]


class MembershipWithArtifactArtifactCollectionProject(GQLResult):
    id: GQLId
    entity_name: str = Field(alias="entityName")
    name: str


class RegistriesPage(GQLResult):
    page_info: RegistriesPagePageInfo = Field(alias="pageInfo")
    edges: List[RegistriesPageEdges]


class RegistriesPageEdges(GQLResult):
    node: Optional[RegistryFragment]


class RegistriesPagePageInfo(GQLResult):
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class RegistryCollectionsPage(GQLResult):
    total_count: int = Field(alias="totalCount")
    page_info: RegistryCollectionsPagePageInfo = Field(alias="pageInfo")
    edges: List[RegistryCollectionsPageEdges]


class RegistryCollectionsPageEdges(GQLResult):
    cursor: str
    node: Optional[RegistryCollectionsPageEdgesNode]


class RegistryCollectionsPageEdgesNode(GQLResult):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    id: GQLId
    name: str
    description: Optional[str]
    created_at: str = Field(alias="createdAt")
    tags: RegistryCollectionsPageEdgesNodeTags
    project: Optional[RegistryCollectionsPageEdgesNodeProject]
    default_artifact_type: RegistryCollectionsPageEdgesNodeDefaultArtifactType = Field(
        alias="defaultArtifactType"
    )
    aliases: RegistryCollectionsPageEdgesNodeAliases


class RegistryCollectionsPageEdgesNodeAliases(GQLResult):
    edges: List[RegistryCollectionsPageEdgesNodeAliasesEdges]


class RegistryCollectionsPageEdgesNodeAliasesEdges(GQLResult):
    node: Optional[RegistryCollectionsPageEdgesNodeAliasesEdgesNode]


class RegistryCollectionsPageEdgesNodeAliasesEdgesNode(GQLResult):
    alias: str


class RegistryCollectionsPageEdgesNodeDefaultArtifactType(GQLResult):
    name: str


class RegistryCollectionsPageEdgesNodeProject(GQLResult):
    name: str
    entity: RegistryCollectionsPageEdgesNodeProjectEntity


class RegistryCollectionsPageEdgesNodeProjectEntity(GQLResult):
    name: str


class RegistryCollectionsPageEdgesNodeTags(GQLResult):
    edges: List[RegistryCollectionsPageEdgesNodeTagsEdges]


class RegistryCollectionsPageEdgesNodeTagsEdges(GQLResult):
    node: RegistryCollectionsPageEdgesNodeTagsEdgesNode


class RegistryCollectionsPageEdgesNodeTagsEdgesNode(GQLResult):
    name: str


class RegistryCollectionsPagePageInfo(GQLResult):
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class RegistryFragment(GQLResult):
    id: GQLId
    allow_all_artifact_types_in_registry: bool = Field(
        alias="allowAllArtifactTypesInRegistry"
    )
    artifact_types: RegistryFragmentArtifactTypes = Field(alias="artifactTypes")
    name: str
    description: Optional[str]
    created_at: str = Field(alias="createdAt")
    updated_at: Optional[str] = Field(alias="updatedAt")
    access: Optional[str]


class RegistryFragmentArtifactTypes(GQLResult):
    edges: List[RegistryFragmentArtifactTypesEdges]


class RegistryFragmentArtifactTypesEdges(GQLResult):
    node: Optional[RegistryFragmentArtifactTypesEdgesNode]


class RegistryFragmentArtifactTypesEdgesNode(GQLResult):
    name: str


class RegistryVersionsPage(GQLResult):
    page_info: RegistryVersionsPagePageInfo = Field(alias="pageInfo")
    edges: List[RegistryVersionsPageEdges]


class RegistryVersionsPageEdges(GQLResult):
    node: Optional[RegistryVersionsPageEdgesNode]


class RegistryVersionsPageEdgesNode(GQLResult):
    artifact_collection: Optional[RegistryVersionsPageEdgesNodeArtifactCollection] = (
        Field(alias="artifactCollection")
    )
    version_index: Optional[int] = Field(alias="versionIndex")
    artifact: Optional[ArtifactFragmentWithoutAliases]
    aliases: List[RegistryVersionsPageEdgesNodeAliases]


class RegistryVersionsPageEdgesNodeAliases(GQLResult):
    alias: str


class RegistryVersionsPageEdgesNodeArtifactCollection(GQLResult):
    typename__: Typename[
        Literal["ArtifactCollection", "ArtifactPortfolio", "ArtifactSequence"]
    ]
    project: Optional[RegistryVersionsPageEdgesNodeArtifactCollectionProject]
    name: str


class RegistryVersionsPageEdgesNodeArtifactCollectionProject(GQLResult):
    name: str
    entity: RegistryVersionsPageEdgesNodeArtifactCollectionProjectEntity


class RegistryVersionsPageEdgesNodeArtifactCollectionProjectEntity(GQLResult):
    name: str


class RegistryVersionsPagePageInfo(GQLResult):
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class RunInputArtifactConnectionFragment(GQLResult):
    total_count: int = Field(alias="totalCount")
    edges: List[RunInputArtifactConnectionFragmentEdges]
    page_info: RunInputArtifactConnectionFragmentPageInfo = Field(alias="pageInfo")


class RunInputArtifactConnectionFragmentEdges(GQLResult):
    node: Optional[ArtifactFragment]
    cursor: str


class RunInputArtifactConnectionFragmentPageInfo(GQLResult):
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class RunOutputArtifactConnectionFragment(GQLResult):
    total_count: int = Field(alias="totalCount")
    edges: List[RunOutputArtifactConnectionFragmentEdges]
    page_info: RunOutputArtifactConnectionFragmentPageInfo = Field(alias="pageInfo")


class RunOutputArtifactConnectionFragmentEdges(GQLResult):
    node: Optional[ArtifactFragment]
    cursor: str


class RunOutputArtifactConnectionFragmentPageInfo(GQLResult):
    end_cursor: Optional[str] = Field(alias="endCursor")
    has_next_page: bool = Field(alias="hasNextPage")


class TypeInfoFragment(GQLResult):
    name: Optional[str]
    fields: Optional[List[TypeInfoFragmentFields]]
    input_fields: Optional[List[TypeInfoFragmentInputFields]] = Field(
        alias="inputFields"
    )


class TypeInfoFragmentFields(GQLResult):
    name: str
    args: List[TypeInfoFragmentFieldsArgs]


class TypeInfoFragmentFieldsArgs(GQLResult):
    name: str


class TypeInfoFragmentInputFields(GQLResult):
    name: str


class ArtifactFragment(ArtifactFragmentWithoutAliases):
    aliases: Optional[List[ArtifactFragmentAliases]] = None


ArtifactCollectionsFragment.model_rebuild()
ArtifactCollectionsFragmentEdges.model_rebuild()
ArtifactCollectionsFragmentEdgesNode.model_rebuild()
ArtifactCollectionsFragmentPageInfo.model_rebuild()
ArtifactFragmentAliases.model_rebuild()
ArtifactFragmentAliasesArtifactCollection.model_rebuild()
ArtifactFragmentAliasesArtifactCollectionProject.model_rebuild()
ArtifactFragmentWithoutAliases.model_rebuild()
ArtifactFragmentWithoutAliasesArtifactSequence.model_rebuild()
ArtifactFragmentWithoutAliasesArtifactSequenceProject.model_rebuild()
ArtifactFragmentWithoutAliasesArtifactType.model_rebuild()
ArtifactFragmentWithoutAliasesCurrentManifest.model_rebuild()
ArtifactFragmentWithoutAliasesCurrentManifestFile.model_rebuild()
ArtifactFragmentWithoutAliasesTags.model_rebuild()
ArtifactPortfolioTypeFields.model_rebuild()
ArtifactSequenceTypeFields.model_rebuild()
ArtifactTypeFragment.model_rebuild()
ArtifactTypesFragment.model_rebuild()
ArtifactTypesFragmentEdges.model_rebuild()
ArtifactTypesFragmentPageInfo.model_rebuild()
ArtifactsFragment.model_rebuild()
ArtifactsFragmentEdges.model_rebuild()
ArtifactsFragmentPageInfo.model_rebuild()
FileUrlsFragment.model_rebuild()
FileUrlsFragmentEdges.model_rebuild()
FileUrlsFragmentEdgesNode.model_rebuild()
FileUrlsFragmentPageInfo.model_rebuild()
FilesFragment.model_rebuild()
FilesFragmentEdges.model_rebuild()
FilesFragmentEdgesNode.model_rebuild()
FilesFragmentPageInfo.model_rebuild()
MembershipWithArtifact.model_rebuild()
MembershipWithArtifactArtifactCollection.model_rebuild()
MembershipWithArtifactArtifactCollectionProject.model_rebuild()
RegistriesPage.model_rebuild()
RegistriesPageEdges.model_rebuild()
RegistriesPagePageInfo.model_rebuild()
RegistryCollectionsPage.model_rebuild()
RegistryCollectionsPageEdges.model_rebuild()
RegistryCollectionsPageEdgesNode.model_rebuild()
RegistryCollectionsPageEdgesNodeAliases.model_rebuild()
RegistryCollectionsPageEdgesNodeAliasesEdges.model_rebuild()
RegistryCollectionsPageEdgesNodeAliasesEdgesNode.model_rebuild()
RegistryCollectionsPageEdgesNodeDefaultArtifactType.model_rebuild()
RegistryCollectionsPageEdgesNodeProject.model_rebuild()
RegistryCollectionsPageEdgesNodeProjectEntity.model_rebuild()
RegistryCollectionsPageEdgesNodeTags.model_rebuild()
RegistryCollectionsPageEdgesNodeTagsEdges.model_rebuild()
RegistryCollectionsPageEdgesNodeTagsEdgesNode.model_rebuild()
RegistryCollectionsPagePageInfo.model_rebuild()
RegistryFragment.model_rebuild()
RegistryFragmentArtifactTypes.model_rebuild()
RegistryFragmentArtifactTypesEdges.model_rebuild()
RegistryFragmentArtifactTypesEdgesNode.model_rebuild()
RegistryVersionsPage.model_rebuild()
RegistryVersionsPageEdges.model_rebuild()
RegistryVersionsPageEdgesNode.model_rebuild()
RegistryVersionsPageEdgesNodeAliases.model_rebuild()
RegistryVersionsPageEdgesNodeArtifactCollection.model_rebuild()
RegistryVersionsPageEdgesNodeArtifactCollectionProject.model_rebuild()
RegistryVersionsPageEdgesNodeArtifactCollectionProjectEntity.model_rebuild()
RegistryVersionsPagePageInfo.model_rebuild()
RunInputArtifactConnectionFragment.model_rebuild()
RunInputArtifactConnectionFragmentEdges.model_rebuild()
RunInputArtifactConnectionFragmentPageInfo.model_rebuild()
RunOutputArtifactConnectionFragment.model_rebuild()
RunOutputArtifactConnectionFragmentEdges.model_rebuild()
RunOutputArtifactConnectionFragmentPageInfo.model_rebuild()
TypeInfoFragment.model_rebuild()
TypeInfoFragmentFields.model_rebuild()
TypeInfoFragmentFieldsArgs.model_rebuild()
TypeInfoFragmentInputFields.model_rebuild()
ArtifactFragment.model_rebuild()
ArtifactFragmentWithoutAliases.model_rebuild()
ArtifactTypeFragment.model_rebuild()
RegistryFragment.model_rebuild()
ArtifactFragment.model_rebuild()
ArtifactFragment.model_rebuild()
ArtifactFragment.model_rebuild()
ArtifactFragment.model_rebuild()
