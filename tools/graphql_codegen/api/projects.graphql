fragment RegistryFragment on Project {
  id
  allowAllArtifactTypesInRegistry
  artifactTypes(includeAll: true) {
    edges {
      node {
        name
      }
    }
  }
  name
  description
  createdAt
  updatedAt
  access
}

query FetchRegistry($name: String, $entityName: String) {
  entity(name: $entityName) {
    project(name: $name) {
      ...RegistryFragment
    }
  }
}

# ------------------ Mutations ------------------

mutation renameProject($entityName: String!, $oldProjectName: String!, $newProjectName: String!) {
  renameProject(
    input: {
      entityName: $entityName
      oldProjectName: $oldProjectName
      newProjectName: $newProjectName
    }
  ) {
    project {
      name
    }
    inserted
  }
}

mutation UpsertRegistryProject(
  $description: String
  $entityName: String
  $name: String
  $access: String
  $allowAllArtifactTypesInRegistry: Boolean
  $artifactTypes: [ArtifactTypeInput!]
) {
  upsertModel(
    input: {
      description: $description
      entityName: $entityName
      name: $name
      access: $access
      allowAllArtifactTypesInRegistry: $allowAllArtifactTypesInRegistry
      artifactTypes: $artifactTypes
    }
  ) {
    project {
      ...RegistryFragment
    }
    inserted
  }
}

mutation deleteProject($id: String!) {
  deleteModel(input: { id: $id }) {
    success
    __typename
  }
}

# ----------------------------------------------------------------------------

fragment ProjectFragment on Project {
  id
  name
  entityName
  createdAt
  isBenchmark
}

query GetProjects($entity: String, $cursor: String, $perPage: Int = 50) {
  models(entityName: $entity, after: $cursor, first: $perPage) {
    edges {
      node {
        ...ProjectFragment
      }
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
}

query GetProject($project: String!, $entity: String!) {
  project(name: $project, entityName: $entity) {
    ...ProjectFragment
  }
}

mutation CreateProject(
  $description: String
  $entityName: String
  $id: String
  $name: String
  $framework: String
  $access: String
  $views: JSONString
) {
  upsertModel(
    input: {
      description: $description
      entityName: $entityName
      id: $id
      name: $name
      framework: $framework
      access: $access
      views: $views
    }
  ) {
    project {
      id
      name
      entityName
      description
      access
      views
    }
    model {
      id
      name
      entityName
      description
      access
      views
    }
    inserted
  }
}
