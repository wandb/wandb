fragment SlackIntegrationFields on SlackIntegration {
    __typename
    id
    teamName
    channelName
}
fragment GenericWebhookIntegrationFields on GenericWebhookIntegration {
    __typename
    id
    name
    urlEndpoint
}

# ------------------------------------------------------------------------------
fragment ProjectScopeFields on Project {
    __typename
    id
    name
}
fragment ArtifactPortfolioScopeFields on ArtifactPortfolio {
    __typename
    id
    name
}
fragment ArtifactSequenceScopeFields on ArtifactSequence {
    __typename
    id
    name
}

# ------------------------------------------------------------------------------
fragment FilterEventFields on FilterEventTriggeringCondition {
    __typename
    eventType
    filter
}

# ------------------------------------------------------------------------------
fragment QueueJobActionFields on QueueJobTriggeredAction {
    __typename
    queue {
        id
        name
    }
    template
}
fragment NotificationActionFields on NotificationTriggeredAction {
    __typename
    integration {
        __typename
        ...SlackIntegrationFields
    }
    title
    message
    severity
}
fragment GenericWebhookActionFields on GenericWebhookTriggeredAction {
    __typename
    integration {
        __typename
        ...GenericWebhookIntegrationFields
    }
    requestPayload
}
fragment NoOpActionFields on NoOpTriggeredAction {
    __typename
    noOp # GraphQL doesn't support empty objects, so this should be an ignored placeholder field
}

# ------------------------------------------------------------------------------
fragment TriggerFields on Trigger {
    __typename

    id
    createdAt
    updatedAt

    name
    description
    enabled

    scope {
        __typename
        ...ProjectScopeFields
        ...ArtifactPortfolioScopeFields
        ...ArtifactSequenceScopeFields
    }
    event: triggeringCondition {
        __typename
        ...FilterEventFields
    }
    action: triggeredAction {
        __typename
        ...QueueJobActionFields
        ...NotificationActionFields
        ...GenericWebhookActionFields
        ...NoOpActionFields
    }
}

# ------------------------------------------------------------------------------
fragment PageInfoFields on PageInfo {
    endCursor
    hasNextPage
}

# ------------------------------------------------------------------------------
fragment ProjectConnectionFields on ProjectConnection {
    __typename
    pageInfo {...PageInfoFields}
    edges {
        cursor
        node {
            triggers {...TriggerFields}
        }
    }
}

# For now, this query is used to fetch all triggers known to the user.
# In the future, we should consider adding (a less awkward and more efficient)
# top-level `triggers(...)` query.  The fact that triggers can only be searched under
# an individual project or collection is a bit awkward, but has historically been
# needed to support the UI alone.
query GetAutomations (
    $cursor: String,
    $perPage: Int,
) {
    searchScope: viewer {
        projects(after: $cursor, first: $perPage) {
            ...ProjectConnectionFields
        }
    }
}
query GetAutomationsByEntity (
    $entityName: String!,
    $cursor: String,
    $perPage: Int,
) {
    searchScope: entity (name: $entityName) {
        projects(after: $cursor, first: $perPage) {
            ...ProjectConnectionFields
        }
    }
}

# ------------------------------------------------------------------------------
fragment CreateAutomationResult on CreateFilterTriggerPayload {
    __typename
    trigger {...TriggerFields}
}
mutation CreateAutomation($params: CreateFilterTriggerInput!) {
    result: createFilterTrigger(input: $params) {
        ...CreateAutomationResult
    }
}

fragment UpdateAutomationResult on UpdateFilterTriggerPayload {
    __typename
    trigger {...TriggerFields}
}
mutation UpdateAutomation($params: UpdateFilterTriggerInput!) {
    result: updateFilterTrigger(input: $params) {
        ...UpdateAutomationResult
    }
}

fragment DeleteAutomationResult on DeleteTriggerPayload {
    __typename
    success
}
mutation DeleteAutomation($id: ID!) {
    result: deleteTrigger(input: {triggerID: $id}) {
        ...DeleteAutomationResult
    }
}

# ------------------------------------------------------------------------------
fragment IntegrationConnectionFields on IntegrationConnection {
    __typename
    pageInfo {...PageInfoFields}
    edges {
        cursor
        node {
            __typename
            ...SlackIntegrationFields
            ...GenericWebhookIntegrationFields
        }
    }
}
fragment SlackIntegrationConnectionFields on IntegrationConnection {
    __typename
    pageInfo {...PageInfoFields}
    edges {
        cursor
        node {
            __typename
            ...SlackIntegrationFields
        }
    }
}
fragment GenericWebhookIntegrationConnectionFields on IntegrationConnection {
    __typename
    pageInfo {...PageInfoFields}
    edges {
        cursor
        node {
            __typename
            ...GenericWebhookIntegrationFields
        }
    }
}

query IntegrationsByEntity(
    $entityName: String!,
    $cursor: String,
    $perPage: Int,
) {
    entity(name: $entityName) {
        integrations(after: $cursor, first: $perPage) {
            ...IntegrationConnectionFields
        }
    }
}
query SlackIntegrationsByEntity(
    $entityName: String!,
    $cursor: String,
    $perPage: Int,
) {
    entity(name: $entityName) {
        integrations(after: $cursor, first: $perPage) {
            ...SlackIntegrationConnectionFields
        }
    }
}
query GenericWebhookIntegrationsByEntity(
    $entityName: String!,
    $cursor: String,
    $perPage: Int,
) {
    entity(name: $entityName) {
        integrations(after: $cursor, first: $perPage) {
            ...GenericWebhookIntegrationConnectionFields
        }
    }
}

mutation CreateGenericWebhookIntegration($params: CreateGenericWebhookIntegrationInput!) {
    createGenericWebhookIntegration(input: $params) {
        integration {
            ...GenericWebhookIntegrationFields
        }
    }
}
