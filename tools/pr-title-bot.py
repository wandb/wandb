import argparse
import os
import sys

if sys.version_info < (3, 8):
    from typing_extensions import Literal
else:
    from typing import Literal

import openai
from github import Github

GITHUB_TOKEN = os.environ.get("GITHUB_API_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

Model = Literal["gpt-4", "gpt-3.5-turbo", "vicuna-7b-v1.1"]

CC_TYPES = os.environ.get(
    "CC_TYPES",
    ", ".join(
        [
            "feat",
            "fix",
            "docs",
            "style",
            "refactor",
            "perf",
            "test",
            "build",
            "ci",
            "chore",
            "revert",
            "security",
        ]
    ),
)

CC_SCOPES = os.environ.get(
    "CC_SCOPES",
    ", ".join(
        [
            "sdk",
            "cli",
            "public-api",
            "integrations",
            "artifacts",
            "media",
            "sweeps",
            "launch",
        ]
    ),
)


def generate_pr_title(
    pr_number: int,
    model: Model = "gpt-4",
    repo_name: str = "wandb/wandb",
) -> str:
    """Generate a PR title for a given PR number using the given model."""
    g = Github(GITHUB_TOKEN)

    # Then get your repo
    repo = g.get_repo(repo_name)
    openai.api_key = OPENAI_API_KEY

    messages = [
        {
            "role": "system",
            "content": (
                "Your task is to write a title for a GitHub pull request "
                "that will follow the conventional commit format and capture the essence of the change: "
                f"<type>(<scope>): <description>. The possible types are: {CC_TYPES}."
                f"The possible scopes are: {CC_SCOPES}."
                "The description must start with a verb in the imperative mood and be lower case."
                "For context, the user will provide the current title and the diff of the pull request."
                "and their corresponding labels."
                "You must respond in the format: <type>(<scope>): <description>."
                "Be concise and specific. If you are unsure, keep the original title."
                "Even if you think the correct type or scope is missing, you must only use the provided options."
                "Be concise."
            ),
        },
        {
            "role": "user",
            "content": "Title: {{TITLE}}. Diff: {{DIFF}}.",
        },
    ]

    # Get specific pull request by number
    pr = repo.get_pull(pr_number)

    # Get the files
    files = pr.get_files()

    diff = "\n".join(
        [
            file.patch
            for file in files
            if "_pb2" not in file.filename  # ignore autogenerated protobuf files
        ]
    )
    pr_title = pr.title

    # get the title
    # print("Original title:", pr.title)

    messages[-1]["content"] = messages[-1]["content"].replace("{{TITLE}}", pr_title)
    messages[-1]["content"] = messages[-1]["content"].replace("{{DIFF}}", diff)

    completion = openai.ChatCompletion.create(
        model=model,
        messages=messages,
    )
    suggested_title = completion.choices[0]["message"]["content"]

    # print("Suggested title:", suggested_title)

    return suggested_title


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("pr_number", type=int, help="The PR number")
    args = parser.parse_args()

    title = generate_pr_title(args.pr_number)
    print(title)
