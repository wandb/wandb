[build-system]
requires = ["hatchling", "typing_extensions"]
build-backend = "hatchling.build"

[project]
name = "wandb"
dynamic = ["version"]
description = "A CLI and library for interacting with the Weights & Biases API."
authors = [{ name = "Weights & Biases", email = "support@wandb.com" }]
readme = "package_readme.md"
license = { file = "LICENSE" }
requires-python = ">=3.8"
dependencies = [
    "Click>=7.1,!=8.0.0",
    "GitPython>=1.0.0,!=3.1.29",
    "requests>=2.0.0,<3",
    "psutil>=5.0.0",
    "sentry-sdk>=2.0.0",
    "protobuf>=3.12.0,!=4.21.0,!=5.28.0,<7; python_version < '3.9' and sys_platform == 'linux'",
    "protobuf>=3.15.0,!=4.21.0,!=5.28.0,<7; python_version == '3.9' and sys_platform == 'linux'",
    "protobuf>=3.19.0,!=4.21.0,!=5.28.0,<7; python_version > '3.9' and sys_platform == 'linux'",
    "protobuf>=3.19.0,!=4.21.0,!=5.28.0,<7; sys_platform != 'linux'",
    "PyYAML",
    "setproctitle",
    "platformdirs",
    "typing_extensions>=4.8,<5",
    "pydantic<3",
    "eval_type_backport; python_version < '3.10'",
    "packaging",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Go",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Logging",
    "Topic :: System :: Monitoring",
]


[project.scripts]
wandb = "wandb.cli.cli:cli"
wb = "wandb.cli.cli:cli"

[project.urls]
"Source" = "https://github.com/wandb/wandb"
"Bug Reports" = "https://github.com/wandb/wandb/issues"
"Documentation" = "https://docs.wandb.ai/"

[project.optional-dependencies]
kubeflow = ["kubernetes", "minio", "google-cloud-storage", "sh"]
gcp = ["google-cloud-storage"]
aws = [
    "boto3",
    "botocore>=1.5.76",
    # https://github.com/boto/botocore/pull/1107
    # https://github.com/boto/botocore/pull/1230
]
azure = ["azure-identity", "azure-storage-blob"]
media = [
    "numpy",
    "moviepy>=1.0.0",
    # imageio is a dependency of moviepy but incase that changes we also pin it here
    # imageio versions before 2.28.1 do not work properly when encoding videos.
    "imageio>=2.28.1",
    "pillow",
    "bokeh",
    "soundfile",
    "plotly>=5.18.0",
    "rdkit",
]
sweeps = ["sweeps>=0.2.0"]
launch = [
    "wandb[aws]",
    "awscli",
    "azure-identity",
    "azure-containerregistry",
    "azure-storage-blob",
    "chardet",
    "google-auth",
    "google-cloud-aiplatform",
    "google-cloud-artifact-registry",
    "google-cloud-compute",
    "google-cloud-storage",
    "iso8601",
    "jsonschema",
    "kubernetes",
    "kubernetes_asyncio",
    "optuna",
    "nbconvert",
    "nbformat",
    "pydantic",
    "typing_extensions",
    "tomli",
    "PyYAML>=6.0.0",
    "tornado>=6.5.0;python_version>='3.9'",
]
models = ["cloudpickle"]
perf = ["orjson"]
importers = ["polars<=1.2.1", "rich", "filelock", "mlflow", "tenacity"]
workspaces = ["wandb-workspaces"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
minversion = "6.0"
console_output_style = "count"
addopts = "-vvv --cov-config=pyproject.toml"
markers = [
    "image_output",
    "multiclass",
    "wandb_args",
    "flaky",
    "skip_wandb_core(feature): skip tests that fail on wandb-core, gropued by feature",
    "wandb_core_only: tests for features only available with wandb-core",
]
timeout = 60
log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
filterwarnings = ["ignore::DeprecationWarning", "error:ResourceWarning"]
testpaths = "tests"
# The testpaths setting is ignored by VSCode's usage of pytest --collect-only,
# causing it to execute files named test_*.py while trying to do pytest
# discovery. Some of these files, in particular old "yea" tests, execute
# code at the top-level.
norecursedirs = [
    # Custom directories to ignore:
    "vendor",
    "wandb/vendor",
    "landfill",
    # Standard directories to ignore:
    ".*",
    "build",
    "dist",
]


[tool.coverage.paths]
wandb = ["wandb/", "**/site-packages/wandb/"]

[tool.coverage.run]
concurrency = ["multiprocessing", "thread"]
omit = ["**/wandb/vendor/**", "**/wandb/proto/**"]

[tool.coverage.report]
exclude_also = ["if TYPE_CHECKING:", "@abstractmethod"]
omit = ["**/wandb/vendor/**", "**/wandb/proto/**"]
ignore_errors = true


[tool.ruff]
extend-exclude = [
    "landfill/**",
    "wandb/__init__.py",
    "wandb/vendor/**",
    "wandb/proto/**",
]
target-version = "py38"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "F",      # Pyflakes
    "E",      # pycodestyle Error
    "W",      # pycodestyle Warning
    "B",      # flake8-bugbear
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "C90",    # mccabe
    "UP",     # pyupgrade
    "T20",    # flake8-print
    "RUF100", # unused-noqa

    # tryceratops
    "TRY004", # type-check-without-type-error
    "TRY201", # verbose-raise
    "TRY203", # useless-try-except
    "TRY300", # try-consider-else
    "TRY301", # raise-within-try
    "TRY400", # error-instead-of-exception
    "TRY401", # verbose-log-message
]
ignore = [
    "B904",
    "E501",
    # pydocstyle rules: https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "D100", # Allow missing docstrings in modules.
    "D101", # Allow missing docstrings in classes.
    "D104", # Allow missing docstrings in packages.
    "D105", # Allow missing docstrings in magic (dunder) methods, e.g. __str__().
    "D106", # Allow missing docstrings in nested classes.
    "D107", # Allow missing docstrings in __init__ methods.
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    # Allow Pydantic's `@field_validator` to trigger classmethod treatment,
    # as well as the internal compat implementation.
    "pydantic.field_validator",
    "wandb._pydantic.field_validator",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

ignore-decorators = [
    # Allow undocumented @property descriptors for now.
    #
    # As of May 2024, many in the public API module(s) currently lack docs,
    # or may plausibly have been intended for internal use only. Consider
    # removing this exemption in the future, when/if/as appropriate.
    "property",
]

[tool.ruff.lint.per-file-ignores]
# Ignore some docstring requirements everywhere except in some public APIs.
# - D101: Require docstrings in public classes
# - D102: Require docstrings in public methods
# - D103: Require docstrings in public functions
# - D417: Require descriptions for all arguments
"!wandb/apis/public/api.py" = [
    "D101",
    "D102",
    "D103",
    "D417",
] # "Public API" module
"!wandb/automations/**/*.py" = [
    "D101",
    "D102",
    "D103",
    "D417",
] # Automations submodules

# Relax docstring and print() statement requirements in tests.
"tests/**" = ["D", "T20"]

# Allow internal tools to use print().
"tools/**" = ["T20"]

# Ignore unused imports in all __init__.py files.
# TODO: Unignore this lint and add symbols to __all__ instead.
"**/__init__.py" = ["F401"]

# TODO: Fix UP006, UP007 in wandb_run.py, then remove ignores here.
"wandb/__init__.py" = ["I001"]
"wandb/__init__.pyi" = ["UP006", "UP007"]
"wandb/__init__.template.pyi" = ["UP006", "UP007", "D415", "N999"]

# TODO: Use f-strings in wandb/apis/public/ for GraphQL statements.
#   To preserve GraphQL syntax highlighting, add #graphql at the start of
#   the f-strings. Do not auto-fix the lint, as that will break syntax
#   highlights and harm readability.
"wandb/apis/public/**" = ["UP032"]

# TODO: Fix these lints and remove the ignores.
"wandb/cli/cli.py" = ["C901"]
"wandb/integration/metaflow/metaflow.py" = ["F811"]
"wandb/old/**" = ["B006", "B020", "D", "F822"]
"wandb/plot/**" = ["D", "B007", "F401", "N812", "F841", "UP031"]
"wandb/sdk/internal/file_stream.py" = ["TRY300"]
"wandb/sdk/internal/internal_api.py" = ["TRY300"]
"wandb/sdk/internal/system/assets/gpu.py" = ["TRY300"]
"wandb/sdk/internal/system/assets/trainium.py" = ["TRY300"]
"wandb/sdk/launch/**" = ["T20"]
"wandb/sdk/launch/agent/agent.py" = ["TRY300"]
"wandb/sdk/launch/builder/templates/_wandb_bootstrap.py" = ["TRY300"]
"wandb/sdk/launch/environment/aws_environment.py" = ["TRY300"]
"wandb/sdk/launch/environment/gcp_environment.py" = ["TRY300"]
"wandb/sdk/launch/registry/azure_container_registry.py" = ["TRY300"]
"wandb/sdk/launch/runner/abstract.py" = ["TRY300"]
"wandb/sdk/launch/runner/kubernetes_runner.py" = ["TRY300"]
"wandb/sdk/launch/sweeps/scheduler.py" = ["TRY300"]
"wandb/sdk/launch/utils.py" = ["TRY300"]
"wandb/sdk/lib/retry.py" = ["TRY300"]
"wandb/sklearn/**" = ["B010", "B011", "N803", "N806", "UP031"]
"wandb/wandb_controller.py" = ["N806"]
"wandb/wandb_torch.py" = ["C901", "D", "E741", "F841"]

# Ignore specific naming rules on codegen scripts or plugins.
# Codegen logic relies on Python's `ast` module, in which implementing a custom
# NodeVisitor/NodeTransformer requires method names (e.g. `visit_ClassDef`)
# that violate Python's own PEP8 guidelines.
# See: https://docs.python.org/3/library/ast.html#ast.NodeTransformer
"tools/graphql_codegen/**" = ["N802"]

# Ignore lints on generated code.
"wandb/**/_generated/**/*.py" = [
    # Generated code names may not respect PEP8.
    "N8",

    # Standard library generics (list[...]) can cause issues with older
    # Pydantic versions.
    "UP006",

    # The `X | Y` syntax can cause issues with pydantic < 2.6
    "UP007",
]

# Pydantic code requires an older style for type annotations.
"wandb/sdk/wandb_settings.py" = ["UP006", "UP007"]
"wandb/sdk/wandb_metadata.py" = ["UP006", "UP007"]
"wandb/sdk/lib/run_moment.py" = ["UP006", "UP007"]
"wandb/automations/**" = ["UP006", "UP007"]

# TODO: Remove the landfill/ directory.
"landfill/**" = ["F405", "N806", "D415"]

[tool.mypy]
plugins = ["pydantic.mypy"]
warn_redundant_casts = true
exclude = '''
   (?x)(
      wandb/vendor/.
   )
'''
# wandb.*
[[tool.mypy.overrides]]
module = "wandb.*"
ignore_errors = false

[[tool.mypy.overrides]]
module = [
    "wandb.integration.*",
    "wandb.apis.*",
    "wandb.proto.*",
    "wandb.beta.*",
    "wandb.sdk.wandb_login",
    "wandb.cli.*",
    "wandb.wandb_torch.*",
    "wandb.wandb_controller.*",
    "wandb.wandb_agent.*",
    "wandb.sdk.verify.*",
    "wandb.trigger.*",
    "wandb.wandb_summary.*",
    "wandb.sync.*",
    "wandb.sdk.integration_utils.*",
    "wandb.plot.*",
    "wandb.old.*",
    "wandb.*._generated.*",
]
ignore_errors = true

# wandb/env
[[tool.mypy.overrides]]
module = "wandb.env"
ignore_errors = false
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
check_untyped_defs = true
disallow_untyped_decorators = true
strict_equality = true
implicit_reexport = false

# wandb/filesync.*
[[tool.mypy.overrides]]
module = "wandb.filesync.*"
ignore_errors = false
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
check_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = true
strict_equality = true
implicit_reexport = false

# More wandb/ modules can be added in a similar manner as overrides

# wandb/automations.*
[[tool.mypy.overrides]]
module = "wandb.automations.*"
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true

# External libraries
[[tool.mypy.overrides]]
module = [
    "psutil.*",
    "tensorboard.*",
    "grpc.*",
    "setproctitle.*",
    "ultralytics.*",
    "wandb_gql.*",
    "wandb_graphql.*",
    "wandb.vendor.*",
    "wandb.vendor.pynvml.pynvml.*",
]
ignore_missing_imports = true
