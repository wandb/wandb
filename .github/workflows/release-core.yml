name: Build and Release W&B SDK Core

on:
  workflow_dispatch:
    inputs:
      use_pre:
        type: boolean
        description: "pre-release"
        required: false
        default: false

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Remove specific Go version
        if: runner.os == 'Windows'
        run: cmd /c "rmdir /s /q C:\hostedtoolcache\windows\go"

      - name: Install Latest Go on Windows
        if: runner.os == 'Windows'
        run: |
          choco upgrade golang
          echo "C:\Program Files\Go\bin" >> $env:GITHUB_PATH

      - name: Verify Go Version
        run: |
          go version
          gcc --version

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.15.0
        with:
           package-dir: "nexus"
           output-dir: "nexus/wheelhouse"
        env:
          CIBW_ENVIRONMENT: PATH=$PATH:/usr/local/go/bin
          CIBW_BEFORE_ALL_LINUX: python nexus/scripts/build/install_go.py
          CIBW_BEFORE_ALL_MACOS: brew update && rm -f /usr/local/bin/go* && brew install go@1.21
          CIBW_BEFORE_BUILD_WINDOWS: refreshenv && set "GOROOT=C:\Program Files\Go" && set "PATH=%GOROOT%\bin;%PATH%"
          CIBW_BUILD: "{*x86_64,*arm64,*aarch64,*amd64}"
          CIBW_SKIP: cp36-* cp312-* pp* *musllinux*
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_BUILD_VERBOSITY: 3

# todo: build sdist
#      - name: Build sdist
#        if: runner.os == 'Linux'
#        run: |
#          python -m pip install --upgrade build
#          python -m build --sdist nexus
#
#      - uses: actions/upload-artifact@v3
#        if: runner.os == 'Linux'
#        with:
#          path: ./nexus/dist/*.tar.gz

      - uses: actions/upload-artifact@v3
        with:
          name: wandb-core-distributions
          path: ./nexus/wheelhouse/*.whl

  test-pypi-publish:
    name: Publish to TestPyPI
    needs: build_wheels
    continue-on-error: true
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://test.pypi.org/p/wandb-core
    permissions:
      id-token: write  # trusted publishing
    steps:
      - name: Download all the wheels
        uses: actions/download-artifact@v3
        with:
          name: wandb-core-distributions
          path: dist/
      - name: List wheels
        run: ls dist/
      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  verify-test-pypi:
    name: Verify TestPyPI upload
    needs: test-pypi-publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install wandb-core from TestPyPI
        run: |
          python -m pip install --upgrade pip
          if [ "${{ inputs.use_pre }}" == "true" ]; then
            python -m pip install --index-url https://test.pypi.org/simple/ --pre wandb-core
          else
            python -m pip install --index-url https://test.pypi.org/simple/ wandb-core
          fi
      - name: Install wandb from source
        run: |
          python -m pip install .
      - name: Smoke-test wandb-core TestPyPI install
        env:
          WANDB_REQUIRE_NEXUS: true
        run: |
          python -c "import wandb; run = wandb.init(settings={'mode': 'offline'}); run.finish()"

  pypi-publish:
    name: Publish to PyPI
    needs: test-pypi-publish
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/p/wandb-core
    permissions:
      id-token: write  # trusted publishing
    steps:
      - name: Download all the wheels
        uses: actions/download-artifact@v3
        with:
          name: wandb-core-distributions
          path: dist/
      - name: List wheels
        run: ls dist/
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  slack:
    name: Post to Slack
    needs: pypi-publish
    runs-on: ubuntu-latest
    steps:
      - name: Install from PyPI and get version
        id: get_version
        run: |
          sleep 5
          python -m pip install --upgrade pip
          if [ "${{ inputs.use_pre }}" == "true" ]; then
            python -m pip install --pre wandb-core
          else
            python -m pip install wandb-core
          fi
          echo "WANDB_CORE_VERSION=$(python -c 'import wandb_core; print(wandb_core.__version__)')" >> "$GITHUB_ENV"
      - name: Post to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: ${{ secrets.SLACK_SDK_RELEASE_CHANNEL_ID }}
          # For posting a simple plain text message
          slack-message: "W&B SDK Core (Nexus) ${{ env.WANDB_CORE_VERSION }} released :tada:: https://pypi.org/project/wandb-core/${{ env.WANDB_CORE_VERSION }}/"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
