[tox]
minversion=3.15.2
envlist = codemod,black,mypy,flake8,docstrings,py{36,27,37,38,39},standalone-py37,standalone-cover,cover

[testenv:py{27,35,36,37,38,39}]
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements_dev.txt
    pytest
    pytest-cov
    pytest-xdist
    pytest-flask
    pytest-mock<=3.2.0
    pytest-timeout
    pytest-openfiles
    pytest-flakefinder
install_command = pip install -f https://download.pytorch.org/whl/torch_stable.html {opts} {packages}
passenv = USERNAME
setenv =
    py{27,35,36,37,38,39}: COVERAGE_FILE={envdir}/.coverage
    py{37}: WINDIR=C:\\Windows
# Pytorch installations on non-darwin need the `-f`
whitelist_externals =
    mkdir
# Workaround for bug with fastparquet and numpy<0.20 ("numpy.ndarray size changed, may indicate binary incompatibility")
commands_pre =
    py{36,37,38}: pip install fastparquet
commands =
    py{35,36,37,38,39}: ipython kernel install --user --name=wandb_python
    mkdir -p test-results
    python -m pytest -n=3 --durations=20 --junitxml=test-results/junit.xml --cov-config=tox.ini --cov=wandb --cov=tests/ --cov-report= --no-cov-on-fail --ignore=wandb/sweeps --ignore=build/ {posargs:tests/ wandb/sweeps/}

[testenv:dev]
usedevelop = true
basepython = python3
commands = ipython

[testenv:codemod]
basepython=python3
skip_install = true
deps =
    libcst
commands=
    /bin/bash -c './tools/strip_type_annotations.sh'

[testenv:bumpversion-to-dev]
basepython=python3
skip_install = true
deps =
    bumpversion==0.5.3
commands=
    python ./tools/bumpversion-tool.py --to-dev {posargs}

[testenv:bumpversion-from-dev]
basepython=python3
skip_install = true
deps =
    bumpversion==0.5.3
commands=
    python ./tools/bumpversion-tool.py --from-dev {posargs}

[testenv:codemodcheck]
basepython=python3
skip_install = true
deps =
    libcst
commands=
    /bin/bash -c './tools/strip_type_annotations.sh --check'

[testenv:protocheck]
basepython=python3
skip_install = true
whitelist_externals =
    cp
    rm
    diff
deps =
    grpcio==1.27.2
    grpcio-tools==1.27.2
    mypy-protobuf==1.23
changedir={toxinidir}/wandb/proto
commands=
    rm -rf {toxinidir}/wandb/proto_check/
    cp -r {toxinidir}/wandb/proto/ {toxinidir}/wandb/proto_check/
    python wandb_internal_codegen.py
    diff {toxinidir}/wandb/proto/ {toxinidir}/wandb/proto_check/

[testenv:proto]
basepython=python3
skip_install = true
deps =
    grpcio==1.27.2
    grpcio-tools==1.27.2
    mypy-protobuf==1.23
changedir={toxinidir}/wandb/proto
commands=
    python wandb_internal_codegen.py

[flake8base]
deps =
    flake8
    flake8-colors

[testenv:flake8]
basepython=python3
skip_install = true
deps =
    {[flake8base]deps}
    flake8-bugbear>=21.4.2
    pep8-naming
    flake8-fixme
    flake8-typing-imports>=1.1
    flake8-import-order>=0.9
commands =
    flake8 --append-config={toxinidir}/.flake8-base {posargs}

[testenv:docstrings]
basepython=python3
skip_install = true
deps =
    {[flake8base]deps}
    flake8-docstrings>=1.3.1
commands =
    flake8 --append-config={toxinidir}/.flake8-docstrings {posargs}

[testenv:darglint]
basepython=python3
skip_install = true
deps =
    {[flake8base]deps}
    darglint>=1.8.0
commands =
    {[flake8base]deps}
    flake8 --append-config={toxinidir}/.flake8-darglint {posargs}

[testenv:pylint]
basepython=python3
deps=pylint
commands=
	pylint -rn --rcfile={toxinidir}/.pylintrc wandb.sdk

[testenv:mypy]
basepython=python3
skip_install = true
deps=
    mypy==0.812
    lxml
setenv =
    MYPYPATH = {toxinidir}
commands=
    mypy --show-error-codes --config-file {toxinidir}/mypy.ini -p wandb --html-report mypy-results/

[testenv:coverage]
basepython=python3
deps=
    coverage
    pytest
commands=
    coverage run --source wandb -m pytest
    coverage report -m

[testenv:yapf]
basepython=python3
skip_install = true
deps=
    yapf
commands=
    /bin/bash -c 'yapf -d {toxinidir}/wandb/sdk/*.py'

[testenv:format]
basepython=python3
skip_install = true
deps=
    black==19.10b0
commands=
    black wandb/ tests/

[testenv:black]
basepython=python3
skip_install = true
deps=
    black==19.10b0
commands=
    black --check wandb/ tests/

[flake8]
max-line-length = 88
# ignore = D203, W503, E203
ignore =
    # TODO()'s are allowed for now
    T101,
    W503,
    # allow long lines, lets use blacks rules
    E501,
    # ignore space after comma rule, let black rule
    E231,
    # ignore whitespace before ':' (incompatible with black)
    E203,
    # google convention for docstrings, expressed as ignores
    D203,D204,D213,D215,D400,D401,D404,D406,D407,D408,D409,D413,
    # ignore missing docstrings
    D1,
    # configure darglint for function signatures
    DAR103,
# select = C,E,F,W,B,B901,I,N
max-complexity = 18
import-order-style = google
application-import-names = flake8
format = ${cyan}%(path)s${reset}:${yellow_bold}%(row)d${reset}:${green_bold}%(col)d${reset}: ${red_bold}%(code)s${reset} %(text)s
# docstring checking
docstring-convention = all
docstring-style = google
ignore-regex=^_(.*)
strictness=short

[testenv:covercircle]
skip_install = true
basepython = python3
passenv = CI CIRCLECI CIRCLE_* CODECOV_* TOXENV
deps =
    pytest
    coverage
    codecov
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
commands =
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage'
    coverage report --ignore-errors --skip-covered --omit "wandb/vendor/*"
    codecov -e TOXENV -F unittests

# hack until we figure out how to do better path conversions for windows
[testenv:wincovercircle]
skip_install = true
basepython = python3
passenv = CI CIRCLECI CIRCLE_* CODECOV_* TOXENV
deps =
    pytest
    coverage
    codecov
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
commands =
    bash.exe -c 'C:/Users/circleci/project/.tox/wincovercircle/Scripts/python -m coverage combine C:/Users/circleci/project/.tox/py37/.coverage'
    bash.exe -c 'C:/Users/circleci/project/.tox/wincovercircle/Scripts/python -m coverage report --ignore-errors --skip-covered --omit "wandb/vendor/*"'
    bash.exe -c 'C:/Users/circleci/project/.tox/wincovercircle/Scripts/python -m codecov -e TOXENV -F unittests'

[testenv:cover]
skip_install = true
deps =
    pytest
    coverage
commands =
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage'
    coverage report -m --ignore-errors --skip-covered --omit "wandb/vendor/*"
    coverage report --ignore-errors --skip-covered --fail-under 90 --include "tests/*"
    coverage report --ignore-errors --skip-covered --fail-under 60 --include "wandb/sdk/"
    coverage report --ignore-errors --skip-covered --fail-under 50 --include "wandb/" --exclude "wandb/sdk*"

[testenv:standalone-{py35,py36,py37,py38,py39}]
install_command = pip install -f https://download.pytorch.org/whl/torch_stable.html {opts} {packages}
commands_pre =
setenv =
    COVERAGE_FILE={envdir}/.coverage
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements_dev.txt
    coverage
    pytest-mock<=3.2.0
    pytest-flask
    jsonschema>=3.2.0
changedir =
    tests/standalone/
commands =
    python {toxinidir}/tests/standalone/run-tests.py

[testenv:standalone-cover]
skip_install = true
deps =
    coverage
commands =
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/standalone-py*/.coverage.*'
    coverage report --include "wandb/*" --omit "wandb/vendor/*"

[testenv:standalone-covercircle]
skip_install = true
basepython = python3
passenv = CI CIRCLECI CIRCLE_* CODECOV_* TOXENV
deps =
    pytest
    coverage
    codecov
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
commands =
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/standalone-py*/.coverage.*'
    coverage report --ignore-errors --skip-covered --include "wandb/*" --omit "wandb/vendor/*"
    codecov -e TOXENV -F standalone

[coverage:paths]
toxcode =
    wandb/
    .tox/standalone-py*/lib/python*/site-packages/wandb/

source =
    wandb/sdk/
    wandb/sdk_py27/

[coverage:run]
# TODO(jhr): enable this in the future
# branch = True
concurrency = multiprocessing,thread
omit =
    */wandb/vendor/*
    wandb/vendor/*
    .tox/*

[coverage:report]
exclude_lines =
    pragma: no cover
    if TYPE_CHECKING:
