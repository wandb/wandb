[tox]
minversion=4.4.3
envlist=
    black
    isort
    ruff
    mypy
    flake8

[base]
setenv =
    YEA_WANDB_VERSION = 0.9.7
    ; Setting low network buffer so that we exercise flow control logic
    WANDB__NETWORK_BUFFER = 1000

[unitbase]
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements_test.txt

[testenv:py{37,38,39,310,launch}]
deps =
    {[unitbase]deps}
    -r{toxinidir}/requirements_dev.txt
install_command =
    py{37,38,39,310,launch}: pip install --timeout 600 --extra-index-url https://download.pytorch.org/whl/cpu {opts} {packages}
passenv =
    USERNAME
    CI_PYTEST_SPLIT_ARGS
    CI_PYTEST_PARALLEL
    CI
setenv =
    py{37,38,39,310,launch}: COVERAGE_FILE={envdir}/.coverage
    py{37,39}: WINDIR=C:\\Windows
# Pytorch installations on non-darwin need the `-f`
allowlist_externals =
    mkdir
    bash
commands =
    mkdir -p test-results
    py{37,38,39,310}:     python -m pytest {env:CI_PYTEST_SPLIT_ARGS:} -n={env:CI_PYTEST_PARALLEL:10} --durations=20 --reruns 3 --reruns-delay 1 --junitxml=test-results/junit.xml --cov-config=.coveragerc --cov --cov-report= --no-cov-on-fail {posargs:tests/pytest_tests}
    pylaunch:             python -m pytest {env:CI_PYTEST_SPLIT_ARGS:} -n={env:CI_PYTEST_PARALLEL:4} --durations=20 --reruns 3 --reruns-delay 1 --junitxml=test-results/junit.xml --cov-config=.coveragerc --cov --cov-report= --no-cov-on-fail {posargs:tests/pytest_tests/unit_tests_old/tests_launch/}

[testenv:nb-py{37,38,39,310}]
deps =
    {[unitbase]deps}
    nb: flask
    nb: requests
    nb: pandas
    nb: responses
    nb: ipython
    nb: ipykernel
    nb: nbclient
    nb: nbconvert
allowlist_externals =
    mkdir
setenv =
    py{37,38,39,310,launch}: COVERAGE_FILE={envdir}/.coverage
    py{37}: WINDIR=C:\\Windows
passenv =
    USERNAME
    CI_PYTEST_SPLIT_ARGS
    CI_PYTEST_PARALLEL
    CI
commands =
    nb: ipython kernel install --user --name=wandb_python
    mkdir -p test-results
    python -m pytest {env:CI_PYTEST_SPLIT_ARGS:} -n={env:CI_PYTEST_PARALLEL:{env:WB_UNIT_PARALLEL:10}} --durations=20 --reruns 3 --reruns-delay 1 --junitxml=test-results/junit.xml --cov-config=.coveragerc --cov --cov-report= --no-cov-on-fail --timeout 300 {posargs:tests/pytest_tests/system_tests/test_notebooks/}

[testenv:bumpversion-to-dev]
basepython=python3
skip_install = true
deps =
    bump2version==1.0.1
commands=
    python ./tools/bumpversion-tool.py --to-dev {posargs}

[testenv:bumpversion-from-dev]
basepython=python3
skip_install = true
deps =
    bump2version==1.0.1
commands=
    python ./tools/bumpversion-tool.py --from-dev {posargs}

[testenv:codecovcheck]
basepython=python3
commands=
    python tools{/}coverage-tool.py check

[testenv:generatecheck]
basepython=python3
skip_install = false
deps = {[black]deps}
commands=
    python tools{/}generate-tool.py --check

[testenv:generate]
basepython=python3
skip_install = false
deps = {[black]deps}
commands=
    python tools{/}generate-tool.py --generate

[testenv:protocheck{3,4}]
basepython=python3
skip_install = false
allowlist_externals =
    cp
    rm
    diff
deps =
    -r{toxinidir}/requirements.txt
    protocheck3: mypy-protobuf==3.3.0
    protocheck3: grpcio==1.46.3
    protocheck3: grpcio-tools==1.46.3
    protocheck4: mypy-protobuf==3.4.0
    protocheck4: grpcio==1.50.0
    protocheck4: grpcio-tools==1.50.0
changedir={toxinidir}/wandb/proto
commands=
    rm -rf {toxinidir}/wandb/proto_check/
    protocheck3: cp -r {toxinidir}/wandb/proto/v3/ {toxinidir}/wandb/proto_check/
    protocheck4: cp -r {toxinidir}/wandb/proto/v4/ {toxinidir}/wandb/proto_check/
    python wandb_internal_codegen.py
    protocheck3: diff {toxinidir}/wandb/proto/v3/ {toxinidir}/wandb/proto_check/
    protocheck4: diff {toxinidir}/wandb/proto/v4/ {toxinidir}/wandb/proto_check/

[testenv:proto{3,4}]
basepython=python3
skip_install = false
deps =
    -r{toxinidir}/requirements.txt
    proto3: mypy-protobuf==3.3.0
    proto3: grpcio==1.46.3
    proto3: grpcio-tools==1.46.3
    proto4: mypy-protobuf==3.4.0
    proto4: grpcio==1.50.0
    proto4: grpcio-tools==1.50.0
changedir={toxinidir}/wandb/proto
commands=
    proto{3,4}: python wandb_internal_codegen.py

[flake8base]
deps =
    flake8>=5.0.0
    grpcio>=1.46.3

[testenv:flake8]
basepython=python3
skip_install = true
deps =
    {[flake8base]deps}
    flake8-bugbear>=21.4.2
    pep8-naming
    flake8-fixme
    flake8-typing-imports>=1.1
commands =
    flake8 --append-config={toxinidir}/.flake8-base --color=always {posargs}

[testenv:docstrings]
basepython=python3
skip_install = true
deps =
    {[flake8base]deps}
    flake8-docstrings>=1.3.1
commands =
    flake8 --select D --append-config={toxinidir}/.flake8-docstrings {posargs}

[testenv:darglint]
basepython=python3
skip_install = true
deps =
    {[flake8base]deps}
    darglint>=1.8.0
commands =
    flake8 --append-config={toxinidir}/.flake8-darglint {posargs}

[testenv:pylint]
basepython=python3
deps=pylint
commands=
	pylint -rn --rcfile={toxinidir}/.pylintrc wandb.sdk

[testenv:mypy]
basepython=python3
skip_install = true
deps=
    types-click==7.1.8
    mypy
    lxml
    grpcio
    httpx
setenv =
    MYPYPATH = {toxinidir}
commands=
    mypy --install-types --non-interactive --show-error-codes --config-file {toxinidir}/mypy.ini -p wandb --html-report mypy-results/ --cobertura-xml-report  mypy-results/ --lineprecision-report mypy-results/

[testenv:mypy-report]
basepython=python3
skip_install = true
deps=
    pycobertura
commands=
    pycobertura show --format text mypy-results/cobertura.xml

[isort]
deps=
    isort

[testenv:isort-check]
basepython = python3
skip_install = true
deps=
    {[isort]deps}
commands=
    isort --check --resolve-all-configs --config-root {toxinidir} {toxinidir}

[testenv:isort-format]
basepython = python3
skip_install = true
deps=
    {[isort]deps}
commands=
    isort --resolve-all-configs --config-root {toxinidir} {toxinidir}

[ruff]
deps=
    ruff==0.0.263

[testenv:ruff]
basepython = python3
skip_install = true
deps=
    {[ruff]deps}
commands=
    ruff {toxinidir}

[testenv:ruff-fix]
basepython = python3
skip_install = true
deps=
    {[ruff]deps}
commands=
    ruff --fix {toxinidir}

[black]
deps=
    black[jupyter]==23.3.0

[testenv:format]
basepython = python3
skip_install = true
deps= {[black]deps}
commands =
    black wandb/ tests/ tools/

[testenv:black]
basepython = python3.9
skip_install = true
deps = {[black]deps}
commands =
    black --check wandb/ tests/ tools/

[testenv:blackdiff]
basepython = python3.9
skip_install = true
deps = {[black]deps}
commands =
    black --diff wandb/ tests/ tools/

[testenv:pyupgrade]
basepython=python3
allowlist_externals =
    sh
deps=
    pyupgrade<=2.34.0
commands=
    sh -c 'python tools/locate-py-files.py | xargs pyupgrade --py36-plus --keep-mock'

[flake8]
max-line-length = 88
# ignore = D203, W503, E203
ignore =
    # TODO()'s are allowed for now
    T101,
    W503,
    # allow long lines, lets use blacks rules
    E501,
    # ignore space after comma rule, let black rule
    E231,
    # ignore whitespace before ':' (incompatible with black)
    E203,
    # google convention for docstrings, expressed as ignores
    D203,D204,D213,D215,D400,D401,D404,D406,D407,D408,D409,D413,
    # ignore missing docstrings
    D1,
    # configure darglint for function signatures
    DAR103,
# select = C,E,F,W,B,B901,I,N
max-complexity = 18
# docstring checking
docstring-convention = all
docstring-style = google
ignore-regex=^_(.*)
strictness=short

[testenv:covercircle]
skip_install = true
basepython = python3
passenv =
    CI
    CIRCLECI
    CIRCLE_*
    CODECOV_*
    TOXENV
deps =
    pytest
    coverage
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
allowlist_externals =
    cp
    chmod
    curl
    env
    mkdir
    ./codecov
commands =
    mkdir -p cover-results
    env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage*'
    coverage xml --ignore-errors
    cp .coverage coverage.xml cover-results/
    coverage report --ignore-errors --skip-covered --omit "wandb/vendor/*"

    curl -Os https://uploader.codecov.io/latest/linux/codecov
    chmod +x codecov
    ./codecov -e TOXENV -F unittest

[testenv:maccovercircle]
skip_install = true
basepython = python3
passenv = 
    CI
    CIRCLECI
    CIRCLE_*
    CODECOV_*
    TOXENV
deps =
    pytest
    coverage
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
allowlist_externals =
    cp
    chmod
    curl
    env
    mkdir
    ./codecov
commands =
    mkdir -p cover-results
    env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage*'
    coverage xml --ignore-errors
    cp .coverage coverage.xml cover-results/
    coverage report --ignore-errors --skip-covered --omit "wandb/vendor/*"

    curl -Os https://uploader.codecov.io/latest/macos/codecov
    chmod +x codecov
    ./codecov -e TOXENV -F unittest

# temporary until we can consolidate coverage collection paths
[testenv:nb-covercircle]
skip_install = true
basepython = python3
passenv =
    CI
    CIRCLECI
    CIRCLE_*
    CODECOV_*
    TOXENV
deps =
    pytest
    coverage
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
allowlist_externals =
    mkdir
    bash
    cp
    env
    curl
    chmod
    ./codecov
commands =
    mkdir -p cover-results
    env bash -c '{envpython} -m coverage combine {toxworkdir}/nb-py*/.coverage*'
    env bash -c '{envpython} -m coverage xml --ignore-errors'
    cp .coverage coverage.xml cover-results/
    coverage report --ignore-errors --skip-covered --include "wandb/*" --omit "wandb/vendor/*"

    curl -Os https://uploader.codecov.io/latest/linux/codecov
    chmod +x codecov
    ./codecov -e TOXENV -F unittest

# temporary until we can consolidate coverage collection paths
[testenv:unit-cover]
skip_install = true
deps =
    pytest
    coverage
allowlist_externals =
    mkdir
    bash
    cp
    env
commands =
    mkdir -p cover-results
    env bash -c '{envpython} -m coverage combine {toxworkdir}/unit-s*-py*/.coverage*'
    coverage xml --ignore-errors
    cp .coverage coverage.xml cover-results/
    coverage report -m --ignore-errors --skip-covered --omit "wandb/vendor/*"

# hack until we figure out how to do better path conversions for windows
[testenv:wincovercircle]
skip_install = true
basepython = python3
passenv =
    CI
    CIRCLECI
    CIRCLE_*
    CODECOV_*
    TOXENV
deps =
    pytest
    coverage
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
allowlist_externals =
    mkdir
    curl
    chmod
    cp
    bash.exe
    codecov.exe
commands =
    bash.exe -c 'mkdir -p cover-results'
    bash.exe -c '~/project/.tox/wincovercircle/Scripts/python.exe -m coverage combine ~/project/.tox/py39/.coverage*'
    bash.exe -c '~/project/.tox/wincovercircle/Scripts/python.exe -m coverage xml'
    bash.exe -c 'cp .coverage coverage.xml cover-results/'
    bash.exe -c '~/project/.tox/wincovercircle/Scripts/python.exe -m coverage report --ignore-errors --skip-covered --omit "wandb/vendor/*"'

    curl -o codecov.exe https://uploader.codecov.io/latest/windows/codecov.exe
    chmod +x codecov.exe
    codecov.exe -e TOXENV -F unittest

[testenv:cover]
skip_install = true
deps =
    pytest
    coverage
allowlist_externals =
    mkdir
    cp
    env
commands =
    mkdir -p cover-results
    env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage*'
    coverage xml --ignore-errors
    cp .coverage coverage.xml cover-results/
    coverage report -m --ignore-errors --skip-covered --omit "wandb/vendor/*"

[testenv:func-s_{base,sklearn,metaflow,tf115,tf21,tf24,tf25,tf26,ray112,ray2,service,py310,docs,imports1,imports2,imports3,imports4,imports5,imports6,imports7,imports8,imports9,imports10,imports11,imports12,noml,grpc,kfp}-{py37,py38,py39,py310}]
install_command = pip install --extra-index-url https://download.pytorch.org/whl/cpu {opts} {packages}
commands_pre =
setenv =
    {[base]setenv}
    COVERAGE_FILE={envdir}/.coverage
    YEACOV_SOURCE={envsitepackagesdir}/wandb/
    s_kfp: WB_PROBE_PACKAGE=true
passenv =
    USERNAME
    CI_PYTEST_SPLIT_ARGS
deps =
    -r{toxinidir}/requirements.txt
    func-s_{base,metaflow}-py{37,38,39,310}: -r{toxinidir}/requirements_dev.txt
    pytest-mock
    yea-wandb=={env:YEA_WANDB_VERSION}
extras =
    func-s_service-py{37,38,39,310}: service
    func-s_grpc-py{37,38,39,310}: grpc
allowlist_externals =
    mkdir
commands =
    mkdir -p test-results
    func-s_base-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard default run {posargs:--all}
    func-s_sklearn-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard sklearn run {posargs:--all}
    func-s_metaflow-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard metaflow run {posargs:--all}
    func-s_tf115-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard tf115 run {posargs:--all}
    func-s_tf21-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard tf21 run {posargs:--all}
    func-s_tf24-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard tf24 run {posargs:--all}
    func-s_tf25-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard tf25 run {posargs:--all}
    func-s_tf26-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard tf26 run {posargs:--all}
    func-s_ray112-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard ray112 run {posargs:--all}
    func-s_ray2-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard ray2 run {posargs:--all}
    func-s_service-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard service run {posargs:--all}
    func-s_grpc-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard grpc run {posargs:--all}
    func-s_py310-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard py310 run {posargs:--all}
    func-s_docs-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --yeadoc --shard docs run {posargs:--all}
    func-s_imports1-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports1 run {posargs:--all}
    func-s_imports2-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports2 run {posargs:--all}
    func-s_imports3-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports3 run {posargs:--all}
    func-s_imports4-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports4 run {posargs:--all}
    func-s_imports5-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports5 run {posargs:--all}
    func-s_imports6-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports6 run {posargs:--all}
    func-s_imports7-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports7 run {posargs:--all}
    func-s_imports8-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports8 run {posargs:--all}
    func-s_imports9-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports9 run {posargs:--all}
    func-s_imports10-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports10 run {posargs:--all}
    func-s_imports11-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports11 run {posargs:--all}
    func-s_imports12-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard imports12 run {posargs:--all}
    func-s_noml-py{37,38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard noml run {posargs:--all}
    func-s_kfp-py{37}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict -p wandb:mockserver-bind=0.0.0.0 -p wandb:mockserver-host=__auto__ --shard kfp run {posargs:--all}

[testenv:func-s_llm-{py37,py38,py39,py310}]
install_command = pip install --extra-index-url https://download.pytorch.org/whl/cpu {opts} {packages}
commands_pre =
setenv =
    {[base]setenv}
    COVERAGE_FILE={envdir}/.coverage
    YEACOV_SOURCE={envsitepackagesdir}/wandb/
passenv =
    USERNAME
    CI_PYTEST_SPLIT_ARGS
    WANDB_API_KEY
    OPENAI_API_KEY
deps =
    -r{toxinidir}/requirements.txt
    func-s_llm-py{37,38,39,310}: -r{toxinidir}/requirements_dev.txt
    pytest-mock
    yea-wandb=={env:YEA_WANDB_VERSION}
allowlist_externals =
    mkdir
commands =
    mkdir -p test-results
    func-s_llm-py{38,39,310}: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict -p wandb:mockserver-bind=0.0.0.0 -p wandb:mockserver-host=__auto__ --shard llm run {posargs:--all}

[testenv:pod-store]
allowlist_externals =
    mkdir
    cp
commands =
    mkdir -p /wandb-store/test-results
    cp -rp test-results /wandb-store/test-results

[testenv:func-cover]
skip_install = true
deps =
    coverage
allowlist_externals =
    mkdir
    cp
    env
commands =
    mkdir -p cover-results
    env bash -c '{envpython} -m coverage combine {toxworkdir}/func-s*-py*/.coverage*'
    env bash -c '{envpython} -m coverage xml --ignore-errors'
    cp .coverage coverage.xml cover-results/
    coverage report

[testenv:func-covercircle]
skip_install = true
basepython = python3
passenv =
    CI
    CIRCLECI
    CIRCLE_*
    CODECOV_*
    TOXENV
deps =
    pytest
    coverage
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
allowlist_externals =
    mkdir
    cp
    env
    curl
    chmod
    ./codecov
commands =
    mkdir -p cover-results
    env bash -c '{envpython} -m coverage combine {toxworkdir}/func-s*-py*/.coverage*'
    env bash -c '{envpython} -m coverage xml --ignore-errors'
    cp .coverage coverage.xml cover-results/
    coverage report --rcfile=.coveragerc

    curl -Os https://uploader.codecov.io/latest/linux/codecov
    chmod +x codecov
    ./codecov -e TOXENV -F functest

[testenv:standalone-{cpu,gpu,tpu,local}-py{37,38,39,310}]
install_command = pip install --extra-index-url https://download.pytorch.org/whl/cpu {opts} {packages}
commands_pre =
setenv =
    {[base]setenv}
    COVERAGE_FILE={envdir}/.coverage
    YEACOV_SOURCE={envsitepackagesdir}/wandb/
    WANDB_PROJECT=standalone-{env:DATE}
passenv =
    DATE
    USERNAME
    WANDB_API_KEY
deps =
    -r{toxinidir}/requirements.txt
    standalone-{cpu,gpu,tpu,local}-py{37,38,39,310}: -r{toxinidir}/requirements_dev.txt
    pytest-mock
    yea-wandb=={env:YEA_WANDB_VERSION}
allowlist_externals =
    date
    echo
    export
    mkdir
    sh
commands =
    mkdir -p test-results
    wandb login --relogin {env:WANDB_API_KEY}
    standalone-cpu-py{37,38,39,310}: yea --debug --strict -p wandb:mockserver-relay=true -p wandb:mockserver-relay-remote-base-url=https://api.wandb.ai --shard standalone-cpu run {posargs:--all}
    standalone-gpu-py{37,38,39,310}: yea --debug --strict -p wandb:mockserver-relay=true -p wandb:mockserver-relay-remote-base-url=https://api.wandb.ai --shard standalone-gpu run {posargs:--all}
    standalone-tpu-py{37,38,39,310}: yea --debug --strict -p wandb:mockserver-relay=true -p wandb:mockserver-relay-remote-base-url=https://api.wandb.ai --shard standalone-tpu run {posargs:--all}
    standalone-local-py{37,38,39,310}: yea --debug --strict -p wandb:mockserver-bind=0.0.0.0 -p wandb:mockserver-host=__auto__ -p wandb:mockserver-relay=true -p wandb:mockserver-relay-remote-base-url=http://localhost:5000 --shard standalone-cpu run {posargs:--all}

[testenv:regression-{yolov5,huggingface,keras,tensorflow,pytorch,wandb-sdk-standalone,wandb-sdk-examples,wandb-sdk-other,s3,sagemaker}-py{37,38,39,310}]
install_command = pip install --extra-index-url https://download.pytorch.org/whl/cpu {opts} {packages}
deps =
    pyyaml
    six
    wandb
    shortuuid
setenv =
    {[base]setenv}
    COVERAGE_FILE={envdir}/.coverage
passenv = *
allowlist_externals =
    git
    rm
    env
changedir =
    {envdir}
commands_pre =
    rm -rf wandb-testing
    git clone -b update-py-v https://github.com/wandb/wandb-testing.git
commands =
    yolov5: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/yolov5/ {posargs}"
    huggingface: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/huggingface/ {posargs}"
    keras: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/keras/ {posargs}"
    tensorflow: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/tensorflow/ {posargs}"
    pytorch: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/pytorch/ {posargs}"
    wandb-sdk-standalone: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/wandb-git/client/standalone_tests/ {posargs}"
    wandb-sdk-examples: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/wandb-git/examples/ {posargs}"
    wandb-sdk-other: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/wandb-git/wandb-examples/ {posargs}"
    sagemaker: env bash -c "./wandb-testing/regression/do-sagemaker-regression.sh tests/sagemaker-beta/ {posargs}"
    s3: env bash -c "./wandb-testing/regression/do-s3-regression.sh tests/s3-beta/ {posargs}"

[testenv:executor-{pex,uwsgi,gunicorn}]
install_command = pip install --extra-index-url https://download.pytorch.org/whl/cpu {opts} {packages}
basepython=python3.9
commands_pre =
deps =
    executor-{uwsgi,gunicorn}: flask
    executor-gunicorn: gunicorn
    executor-uwsgi: uwsgi
    executor-pex: pex
    executor-pex: urllib3<2
setenv =
    {[base]setenv}
passenv = *
allowlist_externals =
    bash
commands =
    bash tests/standalone_tests/executor_tests/{envname}.sh {posargs}
