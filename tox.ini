[tox]
minversion=3.7
envlist = codemod,black,mypy,flake8,py36,py27,py37,py38,cover

[testenv]
deps =
    -r{toxinidir}/requirements.txt
    -r{toxinidir}/requirements_dev.txt
    pytest
    pytest-cov
    pytest-xdist
    pytest-flask
    pytest-mock<=3.2.0
    pytest-timeout
    pytest-openfiles
passenv = USERNAME
setenv =
    py{27,35,36,37,38}: COVERAGE_FILE={envdir}/.coverage
    py{37}: WINDIR=C:\\Windows
# Pytorch installations on non-darwin need the `-f`
install_command = pip install -f https://download.pytorch.org/whl/torch_stable.html {opts} {packages}
commands =
    py{35,36,37,38}: ipython kernel install --user --name=wandb_python
    python -m pytest --cov-config=tox.ini --cov=wandb --cov=tests/ --cov-report= --no-cov-on-fail --ignore=wandb/sweeps --ignore=build/ {posargs:tests/ wandb/sweeps/}

[testenv:dev]
usedevelop = true
basepython = python3
commands = ipython

[testenv:codemod]
skip_install = true
deps =
    libcst
commands=
    /bin/bash -c './tools/strip_type_annotations.sh'

[testenv:codemodcheck]
skip_install = true
deps =
    libcst
commands=
    /bin/bash -c './tools/strip_type_annotations.sh --check'

[testenv:flake8]
basepython=python3
skip_install = true
deps =
    flake8
    flake8-colors
    flake8-bugbear
    pep8-naming
    flake8-fixme
    flake8-typing-imports>=1.1
    flake8-import-order>=0.9
    # flake8-docstrings>=1.3.1
commands = 
    flake8

[testenv:pylint]
basepython=python3
deps=pylint
commands=
	pylint -rn --rcfile={toxinidir}/.pylintrc wandb.sdk

[testenv:mypy]
basepython=python3
skip_install = true
deps=
    mypy
setenv =
    MYPYPATH = {toxinidir}
commands=
    mypy --show-error-codes --config-file {toxinidir}/mypy.ini -p wandb

[testenv:coverage]
basepython=python3
deps=
    coverage
    pytest
commands=
    coverage run --source wandb -m pytest
    coverage report -m

[testenv:yapf]
basepython=python3
skip_install = true
deps=
    yapf
commands=
    /bin/bash -c 'yapf -d {toxinidir}/wandb/sdk/*.py'

[testenv:format]
basepython=python3
skip_install = true
deps=
    black==19.10b0
commands=
    black wandb/

[testenv:black]
basepython=python3
skip_install = true
deps=
    black==19.10b0
commands=
    black --check wandb/
	
[flake8]
max-line-length = 88
# ignore = D203, W503, E203
ignore =
    # TODO()'s are allowed for now
    T101,
    W503,
    # allow long lines, lets use blacks rules
    E501,
    # ignore space after comma rule, let black rule
    E231,
# select = C,E,F,W,B,B901,I,N
per-file-ignores =
   wandb/cli/cli.py:E501,C901,I202,E203 # conflict with black
   wandb/sdk/wandb_watch.py:E501
   wandb/lib/git.py:E501
   wandb/wandb_controller.py:N803,N806
   wandb/apis/public.py:B006
exclude =
    .tox,
    .git,
    __pycache__,
    docs/source/conf.py,
    docs/*.py,
    build,
    dist,
    tests/fixtures/*,
    tests/,
    codemod/,
    standalone_tests/,
    wandb/__init__.py,
    wandb/wandb_torch.py,
    wandb/data/,
    wandb/errors/,
    wandb/old/,
    wandb/sdk_py27/,
    wandb/proto/,
    wandb/util.py,
    wandb/data_types.py,
    wandb/env.py,
    wandb/sweeps/,
    wandb/integration/magic.py,
    wandb/integration/keras/,
    wandb/integration/tensorboard/,
    wandb/integration/lightgbm/,
    wandb/integration/xgboost/,
    wandb/integration/fastai/,
    wandb/filesync/,
    wandb/internal/internal_api.py,
    wandb/internal/file_pusher.py,
    wandb/internal/file_stream.py,
    wandb/internal/git_repo.py,
    wandb/internal/artifacts.py,
    wandb/sdk/wandb_artifacts.py,
    wandb/keras/,
    wandb/compat/,
    wandb/superagent/,
    wandb/plots/,
    wandb/sklearn/,
    wandb/viz.py,
    vendor/,
    wandb/vendor/,
    wandb/apis/__init__.py,
    *.pyc,
    *.egg-info,
    .cache,
    .eggs
max-complexity = 18
import-order-style = google
application-import-names = flake8
format = ${cyan}%(path)s${reset}:${yellow_bold}%(row)d${reset}:${green_bold}%(col)d${reset}: ${red_bold}%(code)s${reset} %(text)s

[testenv:covercircle]
skip_install = true
basepython = python3
passenv = CIRCLECI CIRCLE_* CI_PULL_REQUEST COVERALLS_PARALLEL COVERALLS_REPO_TOKEN
deps =
    pytest
    coverage
    coveralls
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
    COVERALLS_PARALLEL=true
commands =
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage'
    coverage report --ignore-errors --skip-covered --omit "wandb/vendor/*"
    coveralls

[testenv:cover]
skip_install = true
# basepython = python3.6
deps =
    pytest
    coverage
commands =
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage'
    coverage report --fail-under 80 --skip-covered --include "tests/*"
    coverage report --fail-under 50  --skip-covered

[testenv:coveralls]
# NOTE: Coveralls should be run with:
#   tools/coveralls.sh
# basepython = python3
deps =
    coveralls
commands =
    coveralls

[coverage:run]
omit =
    */wandb/vendor/*

[coverage:paths]
source =
    wandb/sdk/
    wandb/sdk_py27/
