[tox]
minversion=3.24.0
envlist = black, mypy, flake8, docstrings, py{36,37,38,39,launch}, func-s_{base,sklearn,metaflow,tf115,tf21,tf25,tf26,service,docs,imports1,imports2,imports3,imports4,imports5,imports6,noml,grpc}-py37, func-cover, cover

[unitbase]
deps =
    -r{toxinidir}/requirements.txt
    pytest
    pytest-cov
    pytest-xdist
    pytest-flask
    pytest-split
    pytest-mock
    pytest-timeout
    pytest-openfiles
    pytest-flakefinder

[unitshardbase]
deps =
    {[unitbase]deps}
    matplotlib<3.5.2  # TODO: remove after conftest.py refactor
    bokeh             # TODO: remove after conftest.py refactor
    nbclient          # TODO: remove after conftest.py refactor

[testenv:py{27,35,36,37,38,39,310,launch}]
deps =
    {[unitbase]deps}
    -r{toxinidir}/requirements_dev.txt
install_command = 
    py{27,35,36,37,38,39,launch}: pip install -f https://download.pytorch.org/whl/torch_stable.html {opts} {packages}
passenv =
    USERNAME
    CI_PYTEST_SPLIT_ARGS
    CI_PYTEST_PARALLEL
    WB_PYTEST_VERBOSITY
setenv =
    py{27,35,36,37,38,39,launch}: COVERAGE_FILE={envdir}/.coverage
    py{37}: WINDIR=C:\\Windows
# Pytorch installations on non-darwin need the `-f`
whitelist_externals =
    mkdir
    bash
    git
# Workaround for bug with fastparquet and numpy<0.20 ("numpy.ndarray size changed, may indicate binary incompatibility")
# fixme: fastparquet==0.8.0 fails locally, need to investigate
commands_pre =
    py{36,37,38}: pip install "fastparquet<0.8"
commands =
    mkdir -p test-results
    py{35,36,37,38,39,310}:     python -m pytest {env:CI_PYTEST_SPLIT_ARGS:} -{env:WB_PYTEST_VERBOSITY:vv} -n={env:CI_PYTEST_PARALLEL:4} --durations=20 --junitxml=test-results/junit.xml --cov-config=.coveragerc --cov --cov-report= --no-cov-on-fail {posargs:tests/}
    pylaunch:               python -m pytest {env:CI_PYTEST_SPLIT_ARGS:} -n={env:CI_PYTEST_PARALLEL:4} --durations=20 --junitxml=test-results/junit.xml --cov-config=.coveragerc --cov --cov-report= --no-cov-on-fail {posargs:tests/tests_launch/}

[testenv:unit-s_{nb,kfp}-py{27,35,36,37,38,39,310}]
deps =
    {[unitshardbase]deps}
    s_nb: ipython
    s_nb: ipykernel
    s_nb: nbclient
    s_kfp: kfp==1.8.11
whitelist_externals =
    mkdir
setenv =
    py{27,35,36,37,38,39,launch}: COVERAGE_FILE={envdir}/.coverage
    py{37}: WINDIR=C:\\Windows
    s_nb: WB_UNIT_SHARD=s_nb
    s_kfp: WB_UNIT_SHARD=s_kfp
    s_kfp: WB_UNIT_PARALLEL=1
passenv =
    USERNAME
    CI_PYTEST_SPLIT_ARGS
    CI_PYTEST_PARALLEL
    WB_PYTEST_VERBOSITY
commands =
    s_nb: ipython kernel install --user --name=wandb_python
    mkdir -p test-results
    python -m pytest {env:CI_PYTEST_SPLIT_ARGS:} -{env:WB_PYTEST_VERBOSITY:vv} -n={env:CI_PYTEST_PARALLEL:{env:WB_UNIT_PARALLEL:4}} --durations=20 --junitxml=test-results/junit.xml --cov-config=.coveragerc --cov --cov-report= --no-cov-on-fail {posargs:tests/tests_{env:WB_UNIT_SHARD}/}

[testenv:dev]
usedevelop = true
basepython = python3
commands = ipython

; [testenv:codemod]
; basepython=python3
; skip_install = true
; deps =
;     libcst
; commands=
;     /bin/bash -c './tools/strip_type_annotations.sh'

[testenv:bumpversion-to-dev]
basepython=python3
skip_install = true
deps =
    bumpversion==0.5.3
commands=
    python ./tools/bumpversion-tool.py --to-dev {posargs}

[testenv:bumpversion-from-dev]
basepython=python3
skip_install = true
deps =
    bumpversion==0.5.3
commands=
    python ./tools/bumpversion-tool.py --from-dev {posargs}

; [testenv:codemodcheck]
; basepython=python3
; skip_install = true
; deps =
;     libcst
; commands=
;     /bin/bash -c './tools/strip_type_annotations.sh --check'

[testenv:generatecheck]
basepython=python3
skip_install = true
deps = {[black]deps}
commands=
    python tools{/}generate-tool.py --check

[testenv:generate]
basepython=python3
skip_install = true
deps = {[black]deps}
commands=
    python tools{/}generate-tool.py --generate

[testenv:protocheck]
basepython=python3
skip_install = false
whitelist_externals =
    cp
    rm
    diff
deps =
    -r{toxinidir}/requirements.txt
    grpcio==1.40.0
    grpcio-tools==1.40.0
    mypy-protobuf==2.4
changedir={toxinidir}/wandb/proto
commands=
    rm -rf {toxinidir}/wandb/proto_check/
    cp -r {toxinidir}/wandb/proto/ {toxinidir}/wandb/proto_check/
    python wandb_internal_codegen.py
    diff {toxinidir}/wandb/proto/ {toxinidir}/wandb/proto_check/

[testenv:proto]
basepython=python3
skip_install = false
deps =
    -r{toxinidir}/requirements.txt
    grpcio==1.40.0
    grpcio-tools==1.40.0
    mypy-protobuf==2.4
changedir={toxinidir}/wandb/proto
commands=
    python wandb_internal_codegen.py

[flake8base]
deps =
    flake8
    flake8-colors
    grpcio==1.40.0

[testenv:flake8]
basepython=python3
skip_install = true
deps =
    {[flake8base]deps}
    flake8-bugbear>=21.4.2
    pep8-naming
    flake8-fixme
    flake8-typing-imports>=1.1
    flake8-import-order>=0.9
commands =
    flake8 --append-config={toxinidir}/.flake8-base {posargs}

[testenv:docstrings]
basepython=python3
skip_install = true
deps =
    {[flake8base]deps}
    flake8-docstrings>=1.3.1
commands =
    flake8 --select D --append-config={toxinidir}/.flake8-docstrings {posargs}

[testenv:darglint]
basepython=python3
skip_install = true
deps =
    {[flake8base]deps}
    darglint>=1.8.0
commands =
    flake8 --append-config={toxinidir}/.flake8-darglint {posargs}

[testenv:pylint]
basepython=python3
deps=pylint
commands=
	pylint -rn --rcfile={toxinidir}/.pylintrc wandb.sdk

[testenv:mypy]
basepython=python3
skip_install = true
deps=
    mypy==0.812
    lxml
    grpcio==1.40.0
setenv =
    MYPYPATH = {toxinidir}
commands=
    mypy --show-error-codes --config-file {toxinidir}/mypy.ini -p wandb --html-report mypy-results/ --cobertura-xml-report  mypy-results/ --exclude wandb/vendor/

[testenv:mypy-report]
basepython=python3
skip_install = true
deps=
    pycobertura
commands=
    pycobertura show mypy-results/cobertura.xml

[black]
deps=
    black==22.3.0

[testenv:format]
basepython = python3
skip_install = true
deps= {[black]deps}
commands =
    black wandb/ tests/ tools/

[testenv:black]
basepython = python3
skip_install = true
deps = {[black]deps}
commands =
    black --check wandb/ tests/ tools/

[testenv:blackdiff]
basepython = python3
skip_install = true
deps = {[black]deps}
commands =
    black --diff wandb/ tests/ tools/

[testenv:pyupgrade]
basepython=python3
whitelist_externals =
    sh
deps=pyupgrade
commands=
    sh -c 'python tools/locate-py-files.py | xargs pyupgrade --py36-plus --keep-mock'

[flake8]
max-line-length = 88
# ignore = D203, W503, E203
ignore =
    # TODO()'s are allowed for now
    T101,
    W503,
    # allow long lines, lets use blacks rules
    E501,
    # ignore space after comma rule, let black rule
    E231,
    # ignore whitespace before ':' (incompatible with black)
    E203,
    # google convention for docstrings, expressed as ignores
    D203,D204,D213,D215,D400,D401,D404,D406,D407,D408,D409,D413,
    # ignore missing docstrings
    D1,
    # configure darglint for function signatures
    DAR103,
# select = C,E,F,W,B,B901,I,N
max-complexity = 18
import-order-style = google
application-import-names = flake8
format = ${cyan}%(path)s${reset}:${yellow_bold}%(row)d${reset}:${green_bold}%(col)d${reset}: ${red_bold}%(code)s${reset} %(text)s
# docstring checking
docstring-convention = all
docstring-style = google
ignore-regex=^_(.*)
strictness=short

[testenv:covercircle]
skip_install = true
basepython = python3
passenv = CI CIRCLECI CIRCLE_* CODECOV_* TOXENV
deps =
    pytest
    coverage
    codecov
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
whitelist_externals =
    mkdir
    cp
commands =
    mkdir -p cover-results
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage*'
    coverage xml --ignore-errors
    cp .coverage coverage.xml cover-results/
    coverage report --ignore-errors --skip-covered --omit "wandb/vendor/*"
    codecov -e TOXENV -F unittest

# temporary until we can consolidate coverage collection paths
[testenv:unit-covercircle]
skip_install = true
basepython = python3
passenv = CI CIRCLECI CIRCLE_* CODECOV_* TOXENV
deps =
    pytest
    coverage
    codecov
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
whitelist_externals =
    mkdir
    bash
    cp
commands =
    mkdir -p cover-results
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/unit-s*-py*/.coverage*'
    /usr/bin/env bash -c '{envpython} -m coverage xml --ignore-errors'
    cp .coverage coverage.xml cover-results/
    coverage report --ignore-errors --skip-covered --include "wandb/*" --omit "wandb/vendor/*"
    codecov -e TOXENV -F unittest

# temporary until we can consolidate coverage collection paths
[testenv:unit-cover]
skip_install = true
deps =
    pytest
    coverage
whitelist_externals =
    mkdir
    bash
    cp
commands =
    mkdir -p cover-results
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/unit-s*-py*/.coverage*'
    coverage xml --ignore-errors
    cp .coverage coverage.xml cover-results/
    coverage report -m --ignore-errors --skip-covered --omit "wandb/vendor/*"

# hack until we figure out how to do better path conversions for windows
[testenv:wincovercircle]
skip_install = true
basepython = python3
passenv = CI CIRCLECI CIRCLE_* CODECOV_* TOXENV
deps =
    pytest
    coverage
    codecov
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
whitelist_externals =
    mkdir
    cp
    bash.exe
commands =
    bash.exe -c 'mkdir -p cover-results'
    bash.exe -c 'C:/Users/circleci/project/.tox/wincovercircle/Scripts/python -m coverage combine C:/Users/circleci/project/.tox/py37/.coverage*'
    bash.exe -c 'C:/Users/circleci/project/.tox/wincovercircle/Scripts/python -m coverage xml'
    bash.exe -c 'cp .coverage coverage.xml cover-results/'
    bash.exe -c 'C:/Users/circleci/project/.tox/wincovercircle/Scripts/python -m coverage report --ignore-errors --skip-covered --omit "wandb/vendor/*"'
    bash.exe -c 'C:/Users/circleci/project/.tox/wincovercircle/Scripts/python -m codecov -e TOXENV -F unittest'

[testenv:cover]
skip_install = true
deps =
    pytest
    coverage
whitelist_externals =
    mkdir
    cp
commands =
    mkdir -p cover-results
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/py*/.coverage*'
    coverage xml --ignore-errors
    cp .coverage coverage.xml cover-results/
    coverage report -m --ignore-errors --skip-covered --omit "wandb/vendor/*"

[testenv:func-s_{base,sklearn,metaflow,tf115,tf21,tf25,tf26,service,py310,docs,imports1,imports2,imports3,imports4,imports5,imports6,imports7,noml,grpc,kfp}-{py35,py36,py37,py38,py39,py310}]
install_command = pip install -f https://download.pytorch.org/whl/torch_stable.html {opts} {packages}
commands_pre =
setenv =
    COVERAGE_FILE={envdir}/.coverage
    YEACOV_SOURCE={envsitepackagesdir}/wandb/
    s_kfp: WB_PROBE_PACKAGE=true
passenv =
    USERNAME
deps =
    -r{toxinidir}/requirements.txt
    func-s_{base,metaflow}-py{35,36,37,38,39,310}: -r{toxinidir}/requirements_dev.txt
    pytest-mock
    yea-wandb==0.7.53
extras =
    func-s_service-py{35,36,37,38,39,310}: service
    func-s_grpc-py{35,36,37,38,39,310}: grpc
whitelist_externals =
    mkdir
commands =
    mkdir -p test-results
    func-s_base-py{35,36,37,38,39,310}: yea --shard default run {posargs:--all}
    func-s_sklearn-py{35,36,37,38,39,310}: yea --shard sklearn run {posargs:--all}
    func-s_metaflow-py{35,36,37,38,39,310}: yea --shard metaflow run {posargs:--all}
    func-s_tf115-py{35,36,37,38,39,310}: yea --shard tf115 run {posargs:--all}
    func-s_tf21-py{35,36,37,38,39,310}: yea --shard tf21 run {posargs:--all}
    func-s_tf25-py{35,36,37,38,39,310}: yea --shard tf25 run {posargs:--all}
    func-s_tf26-py{35,36,37,38,39,310}: yea --shard tf26 run {posargs:--all}
    func-s_service-py{35,36,37,38,39,310}: yea --shard service run {posargs:--all}
    func-s_grpc-py{35,36,37,38,39,310}: yea --shard grpc run {posargs:--all}
    func-s_py310-py{35,36,37,38,39,310}: yea --shard py310 run {posargs:--all}
    func-s_docs-py{35,36,37,38,39,310}: yea --shard docs run {posargs:--all}
    func-s_imports1-py{35,36,37,38,39,310}: yea --shard imports1 run {posargs:--all}
    func-s_imports2-py{35,36,37,38,39,310}: yea --shard imports2 run {posargs:--all}
    func-s_imports3-py{35,36,37,38,39,310}: yea --shard imports3 run {posargs:--all}
    func-s_imports4-py{35,36,37,38,39,310}: yea --shard imports4 run {posargs:--all}
    func-s_imports5-py{35,36,37,38,39,310}: yea --shard imports5 run {posargs:--all}
    func-s_imports6-py{35,36,37,38,39,310}: yea --shard imports6 run {posargs:--all}
    func-s_imports7-py{35,36,37,38,39,310}: yea --shard imports7 run {posargs:--all}
    func-s_noml-py{35,36,37,38,39,310}: yea --shard noml run {posargs:--all}
    func-s_kfp-py{37}: yea -p wandb:mockserver-bind=0.0.0.0 -p wandb:mockserver-host=__auto__ --shard kfp run {posargs:--all}

[testenv:func-cover]
skip_install = true
deps =
    coverage
whitelist_externals =
    mkdir
    cp
commands =
    mkdir -p cover-results
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/func-s*-py*/.coverage*'
    /usr/bin/env bash -c '{envpython} -m coverage xml --ignore-errors'
    cp .coverage coverage.xml cover-results/
    coverage report

[testenv:func-covercircle]
skip_install = true
basepython = python3
passenv = CI CIRCLECI CIRCLE_* CODECOV_* TOXENV
deps =
    pytest
    coverage
    codecov
setenv =
    CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
whitelist_externals =
    mkdir
    cp
commands =
    mkdir -p cover-results
    /usr/bin/env bash -c '{envpython} -m coverage combine {toxworkdir}/func-s*-py*/.coverage*'
    /usr/bin/env bash -c '{envpython} -m coverage xml --ignore-errors'
    cp .coverage coverage.xml cover-results/
    coverage report --ignore-errors --skip-covered --include "wandb/*" --omit "wandb/vendor/*"
    codecov -e TOXENV -F functest
