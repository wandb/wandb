; NOTE: We're gradually replacing tox with nox. See noxfile.py instead.

[tox]
minversion=4.5.1
envlist=greet

[testenv]
package=wheel
wheel_build_env=.pkg
setenv=
    PIP_EXTRA_INDEX_URL=https://download.pytorch.org/whl/cpu
    PIP_TIMEOUT=600

[testenv:.pkg]
setenv=
    WANDB_BUILD_COVERAGE=true
    WANDB_BUILD_UNIVERSAL=false

[testenv:greet]
skip_install=true
commands=
    python -c "print('\nGreetings, wandb developer!\\nTo execute a tox environment, run `tox run -e <envname>`\n')"

[base]
deps=
    -r{toxinidir}/requirements_dev.txt
setenv=
    ; Setting low network buffer so that we exercise flow control logic
    WANDB__NETWORK_BUFFER=1000
    COVERAGE_FILE={envdir}/.coverage
    YEA_WANDB_VERSION=0.9.20
    WANDB_ERROR_REPORTING=false
passenv=
    USERNAME
    CI_PYTEST_SPLIT_ARGS

[testenv:{,importer-wandb-,importer-mlflow-}py{37,38,39,310,311,312}]
deps=
    {[base]deps}
    !py37-!mlflow: .[reports]
    !py37-!mlflow: polyfactory
    wheel
    build
    nox
    importer-mlflow: pydantic<2
    importer-wandb: pydantic>=2
    importer: polars
    importer: rich
    importer: filelock
setenv=
    {[base]setenv}
    WINDIR=C:\\Windows
    GOCOVERDIR={tox_root}/.coverage
passenv=
    {[base]passenv}
    CI_PYTEST_PARALLEL
    CI
    importer-wandb: WANDB_TEST_SERVER_URL2
allowlist_externals=
    mkdir
    nox
    go
commands_pre=
    mkdir -p test-results .coverage
commands=
    pytest {env:CI_PYTEST_SPLIT_ARGS:} -n=8 --durations=20 --junitxml=test-results/junit.xml --cov --cov-report=xml --no-cov-on-fail --timeout 300 {posargs}
commands_post=
    go tool covdata textfmt -i=.coverage -o coverage.txt


[testenv:launch-release]
deps=
    pytest
    wandb
    wandb[launch]
commands=
    wandb login
    pytest tests/release_tests/test_launch/ {posargs}

[testenv:func-{base-,mitm-,docs-}py{37,38,39,310,311,312}]
deps =
    yea-wandb=={env:YEA_WANDB_VERSION}
setenv=
    {[base]setenv}
    YEACOV_SOURCE={envsitepackagesdir}/wandb/
    GOCOVERDIR={tox_root}/.go-coverage
passenv=
    {[base]passenv}
    SHARD
    WANDB_API_KEY
    GOCOVERDIR
allowlist_externals=
    mkdir
    go
commands_pre=
    mkdir -p test-results
    mkdir -p {env:GOCOVERDIR}
commands=
    base: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard {env:SHARD:default} --mitm run {posargs:--all}
    mitm: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard mitm --mitm run {posargs:tests/standalone_tests}
    docs: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard docs --mitm --yeadoc run {posargs:tests/functional_tests}
commands_post=
    go tool covdata textfmt -i={env:GOCOVERDIR} -o coverage.txt


[testenv:func-{llm,kfp}-py{37,38,39,310,311,312}]
deps=
    yea-wandb=={env:YEA_WANDB_VERSION}
setenv=
    {[base]setenv}
    YEACOV_SOURCE={envsitepackagesdir}/wandb/
    kfp: WB_PROBE_PACKAGE=true
passenv=
    {[base]passenv}
;    llm: WANDB_API_KEY
    llm: OPENAI_API_KEY
    llm: CO_API_KEY
allowlist_externals=
    mkdir
commands_pre=
    mkdir -p test-results
;    llm: wandb login --relogin {env:WANDB_API_KEY}
commands=
;    llm: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict -p wandb:mockserver-relay=true -p wandb:mockserver-relay-remote-base-url=https://api.wandb.ai --shard llm run {posargs:--all}
    llm: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict --shard llm run {posargs:--all}
    kfp: yea {env:CI_PYTEST_SPLIT_ARGS:} --strict -p wandb:mockserver-bind=0.0.0.0 -p wandb:mockserver-host=__auto__ --shard kfp run {posargs:--all}

[testenv:standalone-{local,cpu,gpu,tpu}-py{37,38,39,310,311,312}]
setenv=
    {[base]setenv}
    YEACOV_SOURCE={envsitepackagesdir}/wandb/
    WANDB_PROJECT=standalone-{env:DATE}
passenv=
    DATE
    USERNAME
    WANDB_API_KEY
    SHARD
deps=
    yea-wandb=={env:YEA_WANDB_VERSION}
allowlist_externals=
    mkdir
    go
commands_pre=
    wandb login --relogin {env:WANDB_API_KEY}
commands=
    mkdir -p test-results
    !{local}: yea --debug --strict -p wandb:mockserver-relay=true -p wandb:mockserver-relay-remote-base-url=https://api.wandb.ai --shard standalone-{env:SHARD:cpu} run {posargs:--all}
    local: yea --debug --strict -p wandb:mockserver-bind=0.0.0.0 -p wandb:mockserver-host=__auto__ -p wandb:mockserver-relay=true -p wandb:mockserver-relay-remote-base-url=http://localhost:5000 --shard standalone-cpu run {posargs:--all}

[testenv:regression-{yolov5,huggingface,keras,tensorflow,pytorch,wandb-sdk-standalone,wandb-sdk-examples,wandb-sdk-other,s3,sagemaker}-py{37,38,39,310,311,312}]
deps=
    pyyaml
    six
    wandb
    shortuuid
setenv=
    {[base]setenv}
passenv=*
allowlist_externals=
    git
    rm
    env
changedir=
    {envdir}
commands_pre=
    rm -rf wandb-testing
    git clone https://github.com/wandb/wandb-testing.git
commands=
    yolov5: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/yolov5/ {posargs}"
    huggingface: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/huggingface/ {posargs}"
    keras: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/keras/ {posargs}"
    tensorflow: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/tensorflow/ {posargs}"
    pytorch: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/pytorch/ {posargs}"
    wandb-sdk-standalone: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/wandb-git/client/standalone_tests/ {posargs}"
    wandb-sdk-examples: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/wandb-git/examples/ {posargs}"
    wandb-sdk-other: env bash -c "./wandb-testing/regression/do-cloud-regression.sh tests/main/wandb-git/wandb-examples/ {posargs}"
    sagemaker: env bash -c "./wandb-testing/regression/do-sagemaker-regression.sh tests/sagemaker-beta/ {posargs}"
    s3: env bash -c "./wandb-testing/regression/do-s3-regression.sh tests/s3-beta/ {posargs}"

[testenv:executor-{pex,uwsgi,gunicorn}]
basepython=python3.9
deps=
    {uwsgi,gunicorn}: flask
    gunicorn: gunicorn
    uwsgi: uwsgi
    pex: pex
setenv=
    {[base]setenv}
passenv=*
allowlist_externals=
    bash
commands=
    bash tests/standalone_tests/executor_tests/{envname}.sh {posargs}

[testenv:cover-func-{linux,mac,win}{,-circle}]
skip_install=true
basepython=python3
deps=
    coverage[toml]
setenv=
    circle: CIRCLE_BUILD_NUM={env:CIRCLE_WORKFLOW_ID}
passenv=
    circle: CI
    circle: CIRCLECI
    circle: CIRCLE_*
    circle: CODECOV_*
    COVERAGE_DIR
allowlist_externals=
    mkdir
    cp
    !{win}: env
commands=
    mkdir -p cover-results
    !{win}: env bash -c '{envpython} -m coverage combine {toxworkdir}/{env:COVERAGE_DIR}/.coverage*'
    !{win}: env bash -c '{envpython} -m coverage xml --ignore-errors'
    win: {envpython} -m coverage combine '{toxworkdir}\\{env:COVERAGE_DIR}\\.coverage'
    win: {envpython} -m coverage xml --ignore-errors

    cp .coverage coverage.xml cover-results/
    !{win}: coverage report --rcfile=.coveragerc
    win: {envpython} -m coverage report --rcfile=.coveragerc
